/*! For license information please see scripts.js.LICENSE.txt */
(()=>{var e,t,n={669:(e,t,n)=>{e.exports=n(609)},592:(e,t,n)=>{"use strict";var r=n(867),a=n(26),o=n(372),l=n(327),i=n(97),u=n(109),s=n(985),c=n(874),f=n(648),d=n(644),p=n(205);e.exports=function(e){return new Promise((function(t,n){var h,m=e.data,v=e.headers,y=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(h),e.signal&&e.signal.removeEventListener("abort",h)}r.isFormData(m)&&r.isStandardBrowserEnv()&&delete v["Content-Type"];var b=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",S=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";v.Authorization="Basic "+btoa(w+":"+S)}var k=i(e.baseURL,e.url);function E(){if(b){var r="getAllResponseHeaders"in b?u(b.getAllResponseHeaders()):null,o={data:y&&"text"!==y&&"json"!==y?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:r,config:e,request:b};a((function(e){t(e),g()}),(function(e){n(e),g()}),o),b=null}}if(b.open(e.method.toUpperCase(),l(k,e.params,e.paramsSerializer),!0),b.timeout=e.timeout,"onloadend"in b?b.onloadend=E:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(E)},b.onabort=function(){b&&(n(new f("Request aborted",f.ECONNABORTED,e,b)),b=null)},b.onerror=function(){n(new f("Network Error",f.ERR_NETWORK,e,b,b)),b=null},b.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||c;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new f(t,r.clarifyTimeoutError?f.ETIMEDOUT:f.ECONNABORTED,e,b)),b=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||s(k))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;x&&(v[e.xsrfHeaderName]=x)}"setRequestHeader"in b&&r.forEach(v,(function(e,t){void 0===m&&"content-type"===t.toLowerCase()?delete v[t]:b.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(b.withCredentials=!!e.withCredentials),y&&"json"!==y&&(b.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&b.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(h=function(e){b&&(n(!e||e&&e.type?new d:e),b.abort(),b=null)},e.cancelToken&&e.cancelToken.subscribe(h),e.signal&&(e.signal.aborted?h():e.signal.addEventListener("abort",h))),m||(m=null);var _=p(k);_&&-1===["http","https","file"].indexOf(_)?n(new f("Unsupported protocol "+_+":",f.ERR_BAD_REQUEST,e)):b.send(m)}))}},609:(e,t,n)=>{"use strict";var r=n(867),a=n(849),o=n(321),l=n(185),i=function e(t){var n=new o(t),i=a(o.prototype.request,n);return r.extend(i,o.prototype,n),r.extend(i,n),i.create=function(n){return e(l(t,n))},i}(n(546));i.Axios=o,i.CanceledError=n(644),i.CancelToken=n(972),i.isCancel=n(502),i.VERSION=n(288).version,i.toFormData=n(675),i.AxiosError=n(648),i.Cancel=i.CanceledError,i.all=function(e){return Promise.all(e)},i.spread=n(713),i.isAxiosError=n(268),e.exports=i,e.exports.default=i},972:(e,t,n)=>{"use strict";var r=n(644);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},a.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},644:(e,t,n)=>{"use strict";var r=n(648);function a(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}n(867).inherits(a,r,{__CANCEL__:!0}),e.exports=a},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),a=n(327),o=n(782),l=n(572),i=n(185),u=n(97),s=n(875),c=s.validators;function f(e){this.defaults=e,this.interceptors={request:new o,response:new o}}f.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=i(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&s.assertOptions(n,{silentJSONParsing:c.transitional(c.boolean),forcedJSONParsing:c.transitional(c.boolean),clarifyTimeoutError:c.transitional(c.boolean)},!1);var r=[],a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var o,u=[];if(this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)})),!a){var f=[l,void 0];for(Array.prototype.unshift.apply(f,r),f=f.concat(u),o=Promise.resolve(t);f.length;)o=o.then(f.shift(),f.shift());return o}for(var d=t;r.length;){var p=r.shift(),h=r.shift();try{d=p(d)}catch(e){h(e);break}}try{o=l(d)}catch(e){return Promise.reject(e)}for(;u.length;)o=o.then(u.shift(),u.shift());return o},f.prototype.getUri=function(e){e=i(this.defaults,e);var t=u(e.baseURL,e.url);return a(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){f.prototype[e]=function(t,n){return this.request(i(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,a){return this.request(i(a||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}f.prototype[e]=t(),f.prototype[e+"Form"]=t(!0)})),e.exports=f},648:(e,t,n)=>{"use strict";var r=n(867);function a(e,t,n,r,a){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),a&&(this.response=a)}r.inherits(a,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var o=a.prototype,l={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){l[e]={value:e}})),Object.defineProperties(a,l),Object.defineProperty(o,"isAxiosError",{value:!0}),a.from=function(e,t,n,l,i,u){var s=Object.create(o);return r.toFlatObject(e,s,(function(e){return e!==Error.prototype})),a.call(s,e.message,t,n,l,i),s.name=e.name,u&&Object.assign(s,u),s},e.exports=a},782:(e,t,n)=>{"use strict";var r=n(867);function a(){this.handlers=[]}a.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},97:(e,t,n)=>{"use strict";var r=n(793),a=n(303);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},572:(e,t,n)=>{"use strict";var r=n(867),a=n(527),o=n(502),l=n(546),i=n(644);function u(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new i}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=a.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||l.adapter)(e).then((function(t){return u(e),t.data=a.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(u(e),t&&t.response&&(t.response.data=a.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={};function a(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function o(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:a(void 0,e[n]):a(e[n],t[n])}function l(e){if(!r.isUndefined(t[e]))return a(void 0,t[e])}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:a(void 0,e[n]):a(void 0,t[n])}function u(n){return n in t?a(e[n],t[n]):n in e?a(void 0,e[n]):void 0}var s={url:l,method:l,data:l,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:u};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=s[e]||o,a=t(e);r.isUndefined(a)&&t!==u||(n[e]=a)})),n}},26:(e,t,n)=>{"use strict";var r=n(648);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(new r("Request failed with status code "+n.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},527:(e,t,n)=>{"use strict";var r=n(867),a=n(546);e.exports=function(e,t,n){var o=this||a;return r.forEach(n,(function(n){e=n.call(o,e,t)})),e}},546:(e,t,n)=>{"use strict";var r=n(867),a=n(16),o=n(648),l=n(874),i=n(675),u={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,f={transitional:l,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=n(592)),c),transformRequest:[function(e,t){if(a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,o=r.isObject(e),l=t&&t["Content-Type"];if((n=r.isFileList(e))||o&&"multipart/form-data"===l){var u=this.env&&this.env.FormData;return i(n?{"files[]":e}:e,u&&new u)}return o||"application/json"===l?(s(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||f.transitional,n=t&&t.silentJSONParsing,a=t&&t.forcedJSONParsing,l=!n&&"json"===this.responseType;if(l||a&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(l){if("SyntaxError"===e.name)throw o.from(e,o.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){f.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){f.headers[e]=r.merge(u)})),e.exports=f},874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},288:e=>{e.exports={version:"0.27.2"}},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var l=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),l.push(a(t)+"="+a(e))})))})),o=l.join("&")}if(o){var i=e.indexOf("#");-1!==i&&(e=e.slice(0,i)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,l){var i=[];i.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),r.isString(a)&&i.push("path="+a),r.isString(o)&&i.push("domain="+o),!0===l&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},268:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},623:e=>{e.exports=null},109:(e,t,n)=>{"use strict";var r=n(867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,l={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(l[t]&&a.indexOf(t)>=0)return;l[t]="set-cookie"===t?(l[t]?l[t]:[]).concat([n]):l[t]?l[t]+", "+n:n}})),l):l}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},675:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||new FormData;var n=[];function a(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(o,l){if(r.isPlainObject(o)||r.isArray(o)){if(-1!==n.indexOf(o))throw Error("Circular reference detected in "+l);n.push(o),r.forEach(o,(function(n,o){if(!r.isUndefined(n)){var i,u=l?l+"."+o:o;if(n&&!l&&"object"==typeof n)if(r.endsWith(o,"{}"))n=JSON.stringify(n);else if(r.endsWith(o,"[]")&&(i=r.toArray(n)))return void i.forEach((function(e){!r.isUndefined(e)&&t.append(u,a(e))}));e(n,u)}})),n.pop()}else t.append(l,a(o))}(e),t}},875:(e,t,n)=>{"use strict";var r=n(288).version,a=n(648),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var l={};o.transitional=function(e,t,n){function o(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,i){if(!1===e)throw new a(o(r," has been removed"+(t?" in "+t:"")),a.ERR_DEPRECATED);return t&&!l[r]&&(l[r]=!0,console.warn(o(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,i)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new a("options must be an object",a.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),o=r.length;o-- >0;){var l=r[o],i=t[l];if(i){var u=e[l],s=void 0===u||i(u,l,e);if(!0!==s)throw new a("option "+l+" must be "+s,a.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new a("Unknown option "+l,a.ERR_BAD_OPTION)}},validators:o}},867:(e,t,n)=>{"use strict";var r,a=n(849),o=Object.prototype.toString,l=(r=Object.create(null),function(e){var t=o.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function i(e){return e=e.toLowerCase(),function(t){return l(t)===e}}function u(e){return Array.isArray(e)}function s(e){return void 0===e}var c=i("ArrayBuffer");function f(e){return null!==e&&"object"==typeof e}function d(e){if("object"!==l(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var p=i("Date"),h=i("File"),m=i("Blob"),v=i("FileList");function y(e){return"[object Function]"===o.call(e)}var g=i("URLSearchParams");function b(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),u(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}var w,S=(w="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return w&&e instanceof w});e.exports={isArray:u,isArrayBuffer:c,isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||o.call(e)===t||y(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&c(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isPlainObject:d,isUndefined:s,isDate:p,isFile:h,isBlob:m,isFunction:y,isStream:function(e){return f(e)&&y(e.pipe)},isURLSearchParams:g,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:b,merge:function e(){var t={};function n(n,r){d(t[r])&&d(n)?t[r]=e(t[r],n):d(n)?t[r]=e({},n):u(n)?t[r]=n.slice():t[r]=n}for(var r=0,a=arguments.length;r<a;r++)b(arguments[r],n);return t},extend:function(e,t,n){return b(t,(function(t,r){e[r]=n&&"function"==typeof t?a(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var r,a,o,l={};t=t||{};do{for(a=(r=Object.getOwnPropertyNames(e)).length;a-- >0;)l[o=r[a]]||(t[o]=e[o],l[o]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:l,kindOfTest:i,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;var t=e.length;if(s(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:S,isFileList:v}},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),L=Symbol.for("react.context"),N=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var j=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var z=Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var I,A=Object.assign;function D(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var U=!1;function M(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var u="\n"+a[l].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=l&&0<=i);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function B(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return M(e.type,!1);case 11:return M(e.type.render,!1);case 1:return M(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case k:return"Portal";case _:return"Profiler";case x:return"StrictMode";case O:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case L:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case N:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return A({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return A({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function oe(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ee=null,xe=null;function _e(e){if(e=ba(e)){if("function"!=typeof ke)throw Error(o(280));var t=e.stateNode;t&&(t=Sa(t),ke(e.stateNode,e.type,t))}}function Ce(e){Ee?xe?xe.push(e):xe=[e]:Ee=e}function Le(){if(Ee){var e=Ee,t=xe;if(xe=Ee=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Ne(e,t){return e(t)}function Oe(){}var Pe=!1;function Te(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Ne(e,t,n)}finally{Pe=!1,(null!==Ee||null!==xe)&&(Oe(),Le())}}function Re(e,t){var n=e.stateNode;if(null===n)return null;var r=Sa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var je=!1;if(c)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){je=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(ce){je=!1}function Fe(e,t,n,r,a,o,l,i,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ie=!1,Ae=null,De=!1,Ue=null,Me={onError:function(e){Ie=!0,Ae=e}};function Be(e,t,n,r,a,o,l,i,u){Ie=!1,Ae=null,Fe.apply(Me,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if($e(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return Ve(a),e;if(l===r)return Ve(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ge=a.unstable_cancelCallback,Ke=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/ut|0)|0},it=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~a;0!==i?r=ft(i):0!=(o&=l)&&(r=ft(o))}else 0!=(l=n&~a)?r=ft(l):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,kt,Et,xt,_t,Ct=!1,Lt=[],Nt=null,Ot=null,Pt=null,Tt=new Map,Rt=new Map,jt=[],zt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ft(e,t){switch(e){case"focusin":case"focusout":Nt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function It(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function At(e){var t=ga(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void _t(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ut(e,t,n){Dt(e)&&n.delete(t)}function Mt(){Ct=!1,null!==Nt&&Dt(Nt)&&(Nt=null),null!==Ot&&Dt(Ot)&&(Ot=null),null!==Pt&&Dt(Pt)&&(Pt=null),Tt.forEach(Ut),Rt.forEach(Ut)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Mt)))}function $t(e){function t(t){return Bt(t,e)}if(0<Lt.length){Bt(Lt[0],e);for(var n=1;n<Lt.length;n++){var r=Lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Nt&&Bt(Nt,e),null!==Ot&&Bt(Ot,e),null!==Pt&&Bt(Pt,e),Tt.forEach(t),Rt.forEach(t),n=0;n<jt.length;n++)(r=jt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<jt.length&&null===(n=jt[0]).blockedOn;)At(n),null===n.blockedOn&&jt.shift()}var Wt=w.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function Qt(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function qt(e,t,n,r){if(Vt){var a=Kt(e,t,n,r);if(null===a)Vr(e,t,r,Gt,n),Ft(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Nt=It(Nt,e,t,n,r,a),!0;case"dragenter":return Ot=It(Ot,e,t,n,r,a),!0;case"mouseover":return Pt=It(Pt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Tt.set(o,It(Tt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Rt.set(o,It(Rt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Ft(e,r),4&t&&-1<zt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&St(o),null===(o=Kt(e,t,n,r))&&Vr(e,t,r,Gt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=ga(e=Se(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return A(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=A({},sn,{view:0,detail:0}),dn=an(fn),pn=A({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(A({},pn,{dataTransfer:0})),vn=an(A({},fn,{relatedTarget:0})),yn=an(A({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=A({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(gn),wn=an(A({},sn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function _n(){return xn}var Cn=A({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ln=an(Cn),Nn=an(A({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=an(A({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Pn=an(A({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=A({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=an(Tn),jn=[9,13,27,32],zn=c&&"CompositionEvent"in window,Fn=null;c&&"documentMode"in document&&(Fn=document.documentMode);var In=c&&"TextEvent"in window&&!Fn,An=c&&(!zn||Fn&&8<Fn&&11>=Fn),Dn=String.fromCharCode(32),Un=!1;function Mn(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){Ce(r),0<(t=Qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,qn=null;function Gn(e){Dr(e,0)}function Kn(e){if(q(wa(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),qn=Qn=null)}function nr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];Hn(t,qn,e,Se(e)),Te(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function or(e,t){if("click"===e)return Kn(t)}function lr(e,t){if("input"===e||"change"===e)return Kn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!ir(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var l=cr(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==G(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Qr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},Er={},xr={};function _r(e){if(Er[e])return Er[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return Er[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Cr=_r("animationend"),Lr=_r("animationiteration"),Nr=_r("animationstart"),Or=_r("transitionend"),Pr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rr(e,t){Pr.set(e,t),u(t,[e])}for(var jr=0;jr<Tr.length;jr++){var zr=Tr[jr];Rr(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Rr(Cr,"onAnimationEnd"),Rr(Lr,"onAnimationIteration"),Rr(Nr,"onAnimationStart"),Rr("dblclick","onDoubleClick"),Rr("focusin","onFocus"),Rr("focusout","onBlur"),Rr(Or,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Fr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(Fr));function Ar(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,u,s){if(Be.apply(this,arguments),Ie){if(!Ie)throw Error(o(198));var c=Ae;Ie=!1,Ae=null,De||(De=!0,Ue=c)}}(r,t,void 0,e),e.currentTarget=null}function Dr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,i,s),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,i,s),o=u}}}if(De)throw e=Ue,De=!1,Ue=null,e}function Ur(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Mr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Br]){e[Br]=!0,l.forEach((function(t){"selectionchange"!==t&&(Ir.has(t)||Mr(t,!1,e),Mr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Mr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Yt(t)){case 1:var a=Ht;break;case 4:a=Qt;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!je||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=ga(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}Te((function(){var r=o,a=Se(n),l=[];e:{var i=Pr.get(e);if(void 0!==i){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Ln;break;case"focusin":s="focus",u=vn;break;case"focusout":s="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Cr:case Lr:case Nr:u=yn;break;case Or:u=Pn;break;case"scroll":u=dn;break;case"wheel":u=Rn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Nn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Re(h,d))&&c.push(Hr(h,m,p))),f)break;h=h.return}0<c.length&&(i=new u(i,s,null,n,a),l.push({event:i,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ga(s)&&!s[ha])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ga(s):null)&&(s!==(f=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:wa(u),p=null==s?i:wa(s),(i=new c(m,h+"leave",u,n,a)).target=f,i.relatedTarget=p,m=null,ga(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=qr(p))h++;for(p=0,m=d;m;m=qr(m))p++;for(;0<h-p;)c=qr(c),h--;for(;0<p-h;)d=qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=qr(c),d=qr(d)}c=null}else c=null;null!==u&&Gr(l,i,u,c,!1),null!==s&&null!==f&&Gr(l,f,s,c,!0)}if("select"===(u=(i=r?wa(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var v=Yn;else if(Vn(i))if(Xn)v=lr;else{v=ar;var y=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=or);switch(v&&(v=v(e,r))?Hn(l,v,n,a):(y&&y(e,i,r),"focusout"===e&&(y=i._wrapperState)&&y.controlled&&"number"===i.type&&ee(i,"number",i.value)),y=r?wa(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(l,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(l,n,a)}var g;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Mn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(g=en()):(Jt="value"in(Xt=a)?Xt.value:Xt.textContent,$n=!0)),0<(y=Qr(r,b)).length&&(b=new wn(b,e,null,n,a),l.push({event:b,listeners:y}),(g||null!==(g=Bn(n)))&&(b.data=g))),(g=In?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Un=!0,Dn);case"textInput":return(e=t.data)===Dn&&Un?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!zn&&Mn(e,t)?(e=en(),Zt=Jt=Xt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=g)}Dr(l,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Re(e,n))&&r.unshift(Hr(e,o,a)),null!=(o=Re(e,t))&&r.push(Hr(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=Re(n,o))&&l.unshift(Hr(n,u,i)):a||null!=(u=Re(n,o))&&l.push(Hr(n,u,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Kr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Yr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,la="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void $t(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);$t(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ha="__reactContainer$"+fa,ma="__reactEvents$"+fa,va="__reactListeners$"+fa,ya="__reactHandles$"+fa;function ga(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Sa(e){return e[pa]||null}var ka=[],Ea=-1;function xa(e){return{current:e}}function _a(e){0>Ea||(e.current=ka[Ea],ka[Ea]=null,Ea--)}function Ca(e,t){Ea++,ka[Ea]=e.current,e.current=t}var La={},Na=xa(La),Oa=xa(!1),Pa=La;function Ta(e,t){var n=e.type.contextTypes;if(!n)return La;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ra(e){return null!=e.childContextTypes}function ja(){_a(Oa),_a(Na)}function za(e,t,n){if(Na.current!==La)throw Error(o(168));Ca(Na,t),Ca(Oa,n)}function Fa(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,W(e)||"Unknown",a));return A({},n,r)}function Ia(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||La,Pa=Na.current,Ca(Na,e),Ca(Oa,Oa.current),!0}function Aa(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Fa(e,t,Pa),r.__reactInternalMemoizedMergedChildContext=e,_a(Oa),_a(Na),Ca(Na,e)):_a(Oa),Ca(Oa,n)}var Da=null,Ua=!1,Ma=!1;function Ba(e){null===Da?Da=[e]:Da.push(e)}function $a(){if(!Ma&&null!==Da){Ma=!0;var e=0,t=bt;try{var n=Da;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Da=null,Ua=!1}catch(t){throw null!==Da&&(Da=Da.slice(e+1)),qe(Ze,$a),t}finally{bt=t,Ma=!1}}return null}var Wa=[],Va=0,Ha=null,Qa=0,qa=[],Ga=0,Ka=null,Ya=1,Xa="";function Ja(e,t){Wa[Va++]=Qa,Wa[Va++]=Ha,Ha=e,Qa=t}function Za(e,t,n){qa[Ga++]=Ya,qa[Ga++]=Xa,qa[Ga++]=Ka,Ka=e;var r=Ya;e=Xa;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var o=32-lt(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Ya=1<<32-lt(t)+a|n<<a|r,Xa=o+e}else Ya=1<<o|n<<a|r,Xa=e}function eo(e){null!==e.return&&(Ja(e,1),Za(e,1,0))}function to(e){for(;e===Ha;)Ha=Wa[--Va],Wa[Va]=null,Qa=Wa[--Va],Wa[Va]=null;for(;e===Ka;)Ka=qa[--Ga],qa[Ga]=null,Xa=qa[--Ga],qa[Ga]=null,Ya=qa[--Ga],qa[Ga]=null}var no=null,ro=null,ao=!1,oo=null;function lo(e,t){var n=Rs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ka?{id:Ya,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Rs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!io(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&io(e,t)?lo(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)lo(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var vo=w.ReactCurrentBatchConfig;function yo(e,t){if(e&&e.defaultProps){for(var n in t=A({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var go=xa(null),bo=null,wo=null,So=null;function ko(){So=wo=bo=null}function Eo(e){var t=go.current;_a(go),e._currentValue=t}function xo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _o(e,t){bo=e,So=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wi=!0),e.firstContext=null)}function Co(e){var t=e._currentValue;if(So!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===bo)throw Error(o(308));wo=e,bo.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var Lo=null;function No(e){null===Lo?Lo=[e]:Lo.push(e)}function Oo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,No(t)):(n.next=a.next,a.next=n),t.interleaved=n,Po(e,r)}function Po(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var To=!1;function Ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function jo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function zo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ou)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Po(e,n)}return null===(a=r.interleaved)?(t.next=t,No(r)):(t.next=a.next,a.next=t),r.interleaved=t,Po(e,n)}function Io(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ao(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Do(e,t,n,r){var a=e.updateQueue;To=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(l=0,c=s=u=null,i=o;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=A({},f,d);break e;case 2:To=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,l|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(d=i).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Au|=l,e.lanes=l,e.memoizedState=f}}function Uo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Mo=(new r.Component).refs;function Bo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:A({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $o={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=zo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Fo(e,o,a))&&(rs(t,e,a,r),Io(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=zo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Fo(e,o,a))&&(rs(t,e,a,r),Io(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ts(),r=ns(e),a=zo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Fo(e,a,r))&&(rs(t,e,r,n),Io(t,e,r))}};function Wo(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function Vo(e,t,n){var r=!1,a=La,o=t.contextType;return"object"==typeof o&&null!==o?o=Co(o):(a=Ra(t)?Pa:Na.current,o=(r=null!=(r=t.contextTypes))?Ta(e,a):La),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$o,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Ho(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$o.enqueueReplaceState(t,t.state,null)}function Qo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Mo,Ro(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Co(o):(o=Ra(t)?Pa:Na.current,a.context=Ta(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Bo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&$o.enqueueReplaceState(a,a.state,null),Do(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function qo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;t===Mo&&(t=a.refs={}),null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ko(e){return(0,e._init)(e._payload)}function Yo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=zs(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ds(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===E?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===R&&Ko(o)===t.type)?((r=a(t,n.props)).ref=qo(e,t,n),r.return=e,r):((r=Fs(n.type,n.key,n.props,null,e.mode,r)).ref=qo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Is(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ds(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Fs(t.type,t.key,t.props,null,e.mode,n)).ref=qo(e,null,t),n.return=e,n;case k:return(t=Us(t,e.mode,n)).return=e,t;case R:return d(e,(0,t._init)(t._payload),n)}if(te(t)||F(t))return(t=Is(t,e.mode,n,null)).return=e,t;Go(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===a?s(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null;case R:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||F(n))return null!==a?null:f(e,t,n,r,null);Go(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case R:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||F(r))return f(t,e=e.get(n)||null,r,a,null);Go(t,r)}return null}function m(a,o,i,u){for(var s=null,c=null,f=o,m=o=0,v=null;null!==f&&m<i.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(a,f,i[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(a,f),o=l(y,o,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===i.length)return n(a,f),ao&&Ja(a,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(a,i[m],u))&&(o=l(f,o,m),null===c?s=f:c.sibling=f,c=f);return ao&&Ja(a,m),s}for(f=r(a,f);m<i.length;m++)null!==(v=h(f,a,m,i[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),o=l(v,o,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(a,e)})),ao&&Ja(a,m),s}function v(a,i,u,s){var c=F(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,m=i,v=i=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(a,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(a,m),i=l(b,i,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(a,m),ao&&Ja(a,v),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(a,g.value,s))&&(i=l(g,i,v),null===f?c=g:f.sibling=g,f=g);return ao&&Ja(a,v),c}for(m=r(a,m);!g.done;v++,g=u.next())null!==(g=h(m,a,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),i=l(g,i,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(a,e)})),ao&&Ja(a,v),c}return function e(r,o,l,u){if("object"==typeof l&&null!==l&&l.type===E&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case S:e:{for(var s=l.key,c=o;null!==c;){if(c.key===s){if((s=l.type)===E){if(7===c.tag){n(r,c.sibling),(o=a(c,l.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===R&&Ko(s)===c.type){n(r,c.sibling),(o=a(c,l.props)).ref=qo(r,c,l),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===E?((o=Is(l.props.children,r.mode,u,l.key)).return=r,r=o):((u=Fs(l.type,l.key,l.props,null,r.mode,u)).ref=qo(r,o,l),u.return=r,r=u)}return i(r);case k:e:{for(c=l.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Us(l,r.mode,u)).return=r,r=o}return i(r);case R:return e(r,o,(c=l._init)(l._payload),u)}if(te(l))return m(r,o,l,u);if(F(l))return v(r,o,l,u);Go(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,l)).return=r,r=o):(n(r,o),(o=Ds(l,r.mode,u)).return=r,r=o),i(r)):n(r,o)}}var Xo=Yo(!0),Jo=Yo(!1),Zo={},el=xa(Zo),tl=xa(Zo),nl=xa(Zo);function rl(e){if(e===Zo)throw Error(o(174));return e}function al(e,t){switch(Ca(nl,t),Ca(tl,e),Ca(el,Zo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_a(el),Ca(el,t)}function ol(){_a(el),_a(tl),_a(nl)}function ll(e){rl(nl.current);var t=rl(el.current),n=ue(t,e.type);t!==n&&(Ca(tl,e),Ca(el,n))}function il(e){tl.current===e&&(_a(el),_a(tl))}var ul=xa(0);function sl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var cl=[];function fl(){for(var e=0;e<cl.length;e++)cl[e]._workInProgressVersionPrimary=null;cl.length=0}var dl=w.ReactCurrentDispatcher,pl=w.ReactCurrentBatchConfig,hl=0,ml=null,vl=null,yl=null,gl=!1,bl=!1,wl=0,Sl=0;function kl(){throw Error(o(321))}function El(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function xl(e,t,n,r,a,l){if(hl=l,ml=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,dl.current=null===e||null===e.memoizedState?ii:ui,e=n(r,a),bl){l=0;do{if(bl=!1,wl=0,25<=l)throw Error(o(301));l+=1,yl=vl=null,t.updateQueue=null,dl.current=si,e=n(r,a)}while(bl)}if(dl.current=li,t=null!==vl&&null!==vl.next,hl=0,yl=vl=ml=null,gl=!1,t)throw Error(o(300));return e}function _l(){var e=0!==wl;return wl=0,e}function Cl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yl?ml.memoizedState=yl=e:yl=yl.next=e,yl}function Ll(){if(null===vl){var e=ml.alternate;e=null!==e?e.memoizedState:null}else e=vl.next;var t=null===yl?ml.memoizedState:yl.next;if(null!==t)yl=t,vl=e;else{if(null===e)throw Error(o(310));e={memoizedState:(vl=e).memoizedState,baseState:vl.baseState,baseQueue:vl.baseQueue,queue:vl.queue,next:null},null===yl?ml.memoizedState=yl=e:yl=yl.next=e}return yl}function Nl(e,t){return"function"==typeof t?t(e):t}function Ol(e){var t=Ll(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=vl,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var u=i=null,s=null,c=l;do{var f=c.lane;if((hl&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,i=r):s=s.next=d,ml.lanes|=f,Au|=f}c=c.next}while(null!==c&&c!==l);null===s?i=r:s.next=u,ir(r,t.memoizedState)||(wi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,ml.lanes|=l,Au|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Pl(e){var t=Ll(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,t.memoizedState)||(wi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Tl(){}function Rl(e,t){var n=ml,r=Ll(),a=t(),l=!ir(r.memoizedState,a);if(l&&(r.memoizedState=a,wi=!0),r=r.queue,Vl(Fl.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==yl&&1&yl.memoizedState.tag){if(n.flags|=2048,Ul(9,zl.bind(null,n,r,a,t),void 0,null),null===Pu)throw Error(o(349));0!=(30&hl)||jl(n,t,a)}return a}function jl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function zl(e,t,n,r){t.value=n,t.getSnapshot=r,Il(t)&&Al(e)}function Fl(e,t,n){return n((function(){Il(t)&&Al(e)}))}function Il(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Al(e){var t=Po(e,1);null!==t&&rs(t,e,1,-1)}function Dl(e){var t=Cl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Nl,lastRenderedState:e},t.queue=e,e=e.dispatch=ni.bind(null,ml,e),[t.memoizedState,e]}function Ul(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ml(){return Ll().memoizedState}function Bl(e,t,n,r){var a=Cl();ml.flags|=e,a.memoizedState=Ul(1|t,n,void 0,void 0===r?null:r)}function $l(e,t,n,r){var a=Ll();r=void 0===r?null:r;var o=void 0;if(null!==vl){var l=vl.memoizedState;if(o=l.destroy,null!==r&&El(r,l.deps))return void(a.memoizedState=Ul(t,n,o,r))}ml.flags|=e,a.memoizedState=Ul(1|t,n,o,r)}function Wl(e,t){return Bl(8390656,8,e,t)}function Vl(e,t){return $l(2048,8,e,t)}function Hl(e,t){return $l(4,2,e,t)}function Ql(e,t){return $l(4,4,e,t)}function ql(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gl(e,t,n){return n=null!=n?n.concat([e]):null,$l(4,4,ql.bind(null,t,e),n)}function Kl(){}function Yl(e,t){var n=Ll();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&El(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xl(e,t){var n=Ll();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&El(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Jl(e,t,n){return 0==(21&hl)?(e.baseState&&(e.baseState=!1,wi=!0),e.memoizedState=n):(ir(n,t)||(n=mt(),ml.lanes|=n,Au|=n,e.baseState=!0),t)}function Zl(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pl.transition;pl.transition={};try{e(!1),t()}finally{bt=n,pl.transition=r}}function ei(){return Ll().memoizedState}function ti(e,t,n){var r=ns(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ri(e)?ai(t,n):null!==(n=Oo(e,t,n,r))&&(rs(n,e,r,ts()),oi(n,t,r))}function ni(e,t,n){var r=ns(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ri(e))ai(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,ir(i,l)){var u=t.interleaved;return null===u?(a.next=a,No(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Oo(e,t,a,r))&&(rs(n,e,r,a=ts()),oi(n,t,r))}}function ri(e){var t=e.alternate;return e===ml||null!==t&&t===ml}function ai(e,t){bl=gl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function oi(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var li={readContext:Co,useCallback:kl,useContext:kl,useEffect:kl,useImperativeHandle:kl,useInsertionEffect:kl,useLayoutEffect:kl,useMemo:kl,useReducer:kl,useRef:kl,useState:kl,useDebugValue:kl,useDeferredValue:kl,useTransition:kl,useMutableSource:kl,useSyncExternalStore:kl,useId:kl,unstable_isNewReconciler:!1},ii={readContext:Co,useCallback:function(e,t){return Cl().memoizedState=[e,void 0===t?null:t],e},useContext:Co,useEffect:Wl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Bl(4194308,4,ql.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Bl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bl(4,2,e,t)},useMemo:function(e,t){var n=Cl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Cl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ti.bind(null,ml,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Cl().memoizedState=e},useState:Dl,useDebugValue:Kl,useDeferredValue:function(e){return Cl().memoizedState=e},useTransition:function(){var e=Dl(!1),t=e[0];return e=Zl.bind(null,e[1]),Cl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ml,a=Cl();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Pu)throw Error(o(349));0!=(30&hl)||jl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Wl(Fl.bind(null,r,l,e),[e]),r.flags|=2048,Ul(9,zl.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=Cl(),t=Pu.identifierPrefix;if(ao){var n=Xa;t=":"+t+"R"+(n=(Ya&~(1<<32-lt(Ya)-1)).toString(32)+n),0<(n=wl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Sl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ui={readContext:Co,useCallback:Yl,useContext:Co,useEffect:Vl,useImperativeHandle:Gl,useInsertionEffect:Hl,useLayoutEffect:Ql,useMemo:Xl,useReducer:Ol,useRef:Ml,useState:function(){return Ol(Nl)},useDebugValue:Kl,useDeferredValue:function(e){return Jl(Ll(),vl.memoizedState,e)},useTransition:function(){return[Ol(Nl)[0],Ll().memoizedState]},useMutableSource:Tl,useSyncExternalStore:Rl,useId:ei,unstable_isNewReconciler:!1},si={readContext:Co,useCallback:Yl,useContext:Co,useEffect:Vl,useImperativeHandle:Gl,useInsertionEffect:Hl,useLayoutEffect:Ql,useMemo:Xl,useReducer:Pl,useRef:Ml,useState:function(){return Pl(Nl)},useDebugValue:Kl,useDeferredValue:function(e){var t=Ll();return null===vl?t.memoizedState=e:Jl(t,vl.memoizedState,e)},useTransition:function(){return[Pl(Nl)[0],Ll().memoizedState]},useMutableSource:Tl,useSyncExternalStore:Rl,useId:ei,unstable_isNewReconciler:!1};function ci(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function fi(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function di(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pi="function"==typeof WeakMap?WeakMap:Map;function hi(e,t,n){(n=zo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,Qu=r),di(0,t)},n}function mi(e,t,n){(n=zo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){di(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){di(0,t),"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pi;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Cs.bind(null,e,t,n),t.then(e,e))}function yi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gi(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=zo(-1,1)).tag=2,Fo(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bi=w.ReactCurrentOwner,wi=!1;function Si(e,t,n,r){t.child=null===e?Jo(t,null,n,r):Xo(t,e.child,n,r)}function ki(e,t,n,r,a){n=n.render;var o=t.ref;return _o(t,a),r=xl(e,t,n,r,o,a),n=_l(),null===e||wi?(ao&&n&&eo(t),t.flags|=1,Si(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hi(e,t,a))}function Ei(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||js(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,xi(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(l,r)&&e.ref===t.ref)return Hi(e,t,a)}return t.flags|=1,(e=zs(o,r)).ref=t.ref,e.return=t,t.child=e}function xi(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(wi=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Hi(e,t,a);0!=(131072&e.flags)&&(wi=!0)}}return Li(e,t,n,r,a)}function _i(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ca(zu,ju),ju|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ca(zu,ju),ju|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Ca(zu,ju),ju|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ca(zu,ju),ju|=r;return Si(e,t,a,n),t.child}function Ci(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Li(e,t,n,r,a){var o=Ra(n)?Pa:Na.current;return o=Ta(t,o),_o(t,a),n=xl(e,t,n,r,o,a),r=_l(),null===e||wi?(ao&&r&&eo(t),t.flags|=1,Si(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hi(e,t,a))}function Ni(e,t,n,r,a){if(Ra(n)){var o=!0;Ia(t)}else o=!1;if(_o(t,a),null===t.stateNode)Vi(e,t),Vo(t,n,r),Qo(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var u=l.context,s=n.contextType;s="object"==typeof s&&null!==s?Co(s):Ta(t,s=Ra(n)?Pa:Na.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;f||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==s)&&Ho(t,l,r,s),To=!1;var d=t.memoizedState;l.state=d,Do(t,r,l,a),u=t.memoizedState,i!==r||d!==u||Oa.current||To?("function"==typeof c&&(Bo(t,n,c,r),u=t.memoizedState),(i=To||Wo(t,n,i,r,d,u,s))?(f||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),l.props=r,l.state=u,l.context=s,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,jo(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:yo(t.type,i),l.props=s,f=t.pendingProps,d=l.context,u="object"==typeof(u=n.contextType)&&null!==u?Co(u):Ta(t,u=Ra(n)?Pa:Na.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==f||d!==u)&&Ho(t,l,r,u),To=!1,d=t.memoizedState,l.state=d,Do(t,r,l,a);var h=t.memoizedState;i!==f||d!==h||Oa.current||To?("function"==typeof p&&(Bo(t,n,p,r),h=t.memoizedState),(s=To||Wo(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Oi(e,t,n,r,o,a)}function Oi(e,t,n,r,a,o){Ci(e,t);var l=0!=(128&t.flags);if(!r&&!l)return a&&Aa(t,n,!1),Hi(e,t,o);r=t.stateNode,bi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=Xo(t,e.child,null,o),t.child=Xo(t,null,i,o)):Si(e,t,i,o),t.memoizedState=r.state,a&&Aa(t,n,!0),t.child}function Pi(e){var t=e.stateNode;t.pendingContext?za(0,t.pendingContext,t.pendingContext!==t.context):t.context&&za(0,t.context,!1),al(e,t.containerInfo)}function Ti(e,t,n,r,a){return ho(),mo(a),t.flags|=256,Si(e,t,n,r),t.child}var Ri,ji,zi,Fi,Ii={dehydrated:null,treeContext:null,retryLane:0};function Ai(e){return{baseLanes:e,cachePool:null,transitions:null}}function Di(e,t,n){var r,a=t.pendingProps,l=ul.current,i=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),Ca(ul,1&l),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=a.children,e=a.fallback,i?(a=t.mode,i=t.child,u={mode:"hidden",children:u},0==(1&a)&&null!==i?(i.childLanes=0,i.pendingProps=u):i=As(u,a,0,null),e=Is(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Ai(n),t.memoizedState=Ii,e):Ui(t,u));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,a,l,i){if(n)return 256&t.flags?(t.flags&=-257,Mi(e,t,i,r=fi(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,a=t.mode,r=As({mode:"visible",children:r.children},a,0,null),(l=Is(l,a,i,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,0!=(1&t.mode)&&Xo(t,e.child,null,i),t.child.memoizedState=Ai(i),t.memoizedState=Ii,l);if(0==(1&t.mode))return Mi(e,t,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Mi(e,t,i,r=fi(l=Error(o(419)),r,void 0))}if(u=0!=(i&e.childLanes),wi||u){if(null!==(r=Pu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|i))?0:a)&&a!==l.retryLane&&(l.retryLane=a,Po(e,a),rs(r,e,a,-1))}return vs(),Mi(e,t,i,r=fi(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ns.bind(null,e),a._reactRetry=t,null):(e=l.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Ga++]=Ya,qa[Ga++]=Xa,qa[Ga++]=Ka,Ya=e.id,Xa=e.overflow,Ka=t),(t=Ui(t,r.children)).flags|=4096,t)}(e,t,u,a,r,l,n);if(i){i=a.fallback,u=t.mode,r=(l=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&u)&&t.child!==l?((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null):(a=zs(l,s)).subtreeFlags=14680064&l.subtreeFlags,null!==r?i=zs(r,i):(i=Is(i,u,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,u=null===(u=e.child.memoizedState)?Ai(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~n,t.memoizedState=Ii,a}return e=(i=e.child).sibling,a=zs(i,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ui(e,t){return(t=As({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Mi(e,t,n,r){return null!==r&&mo(r),Xo(t,e.child,null,n),(e=Ui(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xo(e.return,t,n)}function $i(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Wi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Si(e,t,r.children,n),0!=(2&(r=ul.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bi(e,n,t);else if(19===e.tag)Bi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ca(ul,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===sl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),$i(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===sl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}$i(t,!0,n,null,o);break;case"together":$i(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vi(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Au|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=zs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qi(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gi(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return qi(t),null;case 1:case 17:return Ra(t.type)&&ja(),qi(t),null;case 3:return r=t.stateNode,ol(),_a(Oa),_a(Na),fl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),ji(e,t),qi(t),null;case 5:il(t);var a=rl(nl.current);if(n=t.type,null!==e&&null!=t.stateNode)zi(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return qi(t),null}if(e=rl(el.current),fo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[da]=t,r[pa]=l,e=0!=(1&t.mode),n){case"dialog":Ur("cancel",r),Ur("close",r);break;case"iframe":case"object":case"embed":Ur("load",r);break;case"video":case"audio":for(a=0;a<Fr.length;a++)Ur(Fr[a],r);break;case"source":Ur("error",r);break;case"img":case"image":case"link":Ur("error",r),Ur("load",r);break;case"details":Ur("toggle",r);break;case"input":Y(r,l),Ur("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ur("invalid",r);break;case"textarea":ae(r,l),Ur("invalid",r)}for(var u in ge(n,l),a=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==l.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==l.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Ur("scroll",r)}switch(n){case"input":Q(r),Z(r,l,!0);break;case"textarea":Q(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[pa]=r,Ri(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Ur("cancel",e),Ur("close",e),a=r;break;case"iframe":case"object":case"embed":Ur("load",e),a=r;break;case"video":case"audio":for(a=0;a<Fr.length;a++)Ur(Fr[a],e);a=r;break;case"source":Ur("error",e),a=r;break;case"img":case"image":case"link":Ur("error",e),Ur("load",e),a=r;break;case"details":Ur("toggle",e),a=r;break;case"input":Y(e,r),a=K(e,r),Ur("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=A({},r,{value:void 0}),Ur("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Ur("invalid",e)}for(l in ge(n,a),s=a)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ve(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=c&&"onScroll"===l&&Ur("scroll",e):null!=c&&b(e,l,c,u))}switch(n){case"input":Q(e),Z(e,r,!1);break;case"textarea":Q(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return qi(t),null;case 6:if(e&&null!=t.stateNode)Fi(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=rl(nl.current),rl(el.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(l=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return qi(t),null;case 13:if(_a(ul),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),ho(),t.flags|=98560,l=!1;else if(l=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[da]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qi(t),l=!1}else null!==oo&&(is(oo),oo=null),l=!0;if(!l)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ul.current)?0===Fu&&(Fu=3):vs())),null!==t.updateQueue&&(t.flags|=4),qi(t),null);case 4:return ol(),ji(e,t),null===e&&$r(t.stateNode.containerInfo),qi(t),null;case 10:return Eo(t.type._context),qi(t),null;case 19:if(_a(ul),null===(l=t.memoizedState))return qi(t),null;if(r=0!=(128&t.flags),null===(u=l.rendering))if(r)Qi(l,!1);else{if(0!==Fu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=sl(e))){for(t.flags|=128,Qi(l,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ca(ul,1&ul.current|2),t.child}e=e.sibling}null!==l.tail&&Xe()>Wu&&(t.flags|=128,r=!0,Qi(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sl(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Qi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!u.alternate&&!ao)return qi(t),null}else 2*Xe()-l.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Qi(l,!1),t.lanes=4194304);l.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=l.last)?n.sibling=u:t.child=u,l.last=u)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Xe(),t.sibling=null,n=ul.current,Ca(ul,r?1&n|2:1&n),t):(qi(t),null);case 22:case 23:return ds(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&ju)&&(qi(t),6&t.subtreeFlags&&(t.flags|=8192)):qi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ki(e,t){switch(to(t),t.tag){case 1:return Ra(t.type)&&ja(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ol(),_a(Oa),_a(Na),fl(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return il(t),null;case 13:if(_a(ul),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _a(ul),null;case 4:return ol(),null;case 10:return Eo(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Ri=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ji=function(){},zi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,rl(el.current);var o,l=null;switch(n){case"input":a=K(e,a),r=K(e,r),l=[];break;case"select":a=A({},a,{value:void 0}),r=A({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ge(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(l||(l=[]),l.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(l=l||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Ur("scroll",e),l||u===s||(l=[])):(l=l||[]).push(c,s))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},Fi=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yi=!1,Xi=!1,Ji="function"==typeof WeakSet?WeakSet:Set,Zi=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){_s(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){_s(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&tu(t,n,o)}a=a.next}while(a!==r)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ma],delete t[va],delete t[ya]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xi||eu(n,t);case 6:var r=fu,a=du;fu=null,pu(e,t,n),du=a,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),$t(e)):ua(fu,n.stateNode));break;case 4:r=fu,a=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=a;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,l=o.destroy;o=o.tag,void 0!==l&&(0!=(2&o)||0!=(4&o))&&tu(n,t,l),a=a.next}while(a!==r)}pu(e,t,n);break;case 1:if(!Xi&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){_s(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Xi=(r=Xi)||null!==n.memoizedState,pu(e,t,n),Xi=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ji),t.forEach((function(t){var r=Os.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(o(160));hu(l,i,a),fu=null,du=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){_s(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),gu(e),4&r){try{ru(3,e,e.return),au(3,e)}catch(t){_s(e,e.return,t)}try{ru(5,e,e.return)}catch(t){_s(e,e.return,t)}}break;case 1:vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){_s(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===l.type&&null!=l.name&&X(a,l),be(u,i);var c=be(u,l);for(i=0;i<s.length;i+=2){var f=s[i],d=s[i+1];"style"===f?ve(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(u){case"input":J(a,l);break;case"textarea":oe(a,l);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var h=l.value;null!=h?ne(a,!!l.multiple,h,!1):p!==!!l.multiple&&(null!=l.defaultValue?ne(a,!!l.multiple,l.defaultValue,!0):ne(a,!!l.multiple,l.multiple?[]:"",!1))}a[pa]=l}catch(t){_s(e,e.return,t)}}break;case 6:if(vu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(t){_s(e,e.return,t)}}break;case 3:if(vu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){_s(e,e.return,t)}break;case 4:default:vu(t,e),gu(e);break;case 13:vu(t,e),gu(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||($u=Xe())),4&r&&mu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xi=(c=Xi)||f,vu(t,e),Xi=c):vu(t,e),gu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Zi=e,f=e.child;null!==f;){for(d=Zi=f;null!==Zi;){switch(h=(p=Zi).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){_s(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){ku(d);continue}}null!==h?(h.return=p,Zi=h):ku(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{a=d.stateNode,c?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(u=d.stateNode,i=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(t){_s(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){_s(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vu(t,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),cu(e,uu(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;su(e,uu(e),l);break;default:throw Error(o(161))}}catch(t){_s(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Zi=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Zi;){var a=Zi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Yi;if(!l){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Yi;var s=Xi;if(Yi=l,(Xi=u)&&!s)for(Zi=a;null!==Zi;)u=(l=Zi).child,22===l.tag&&null!==l.memoizedState?Eu(a):null!==u?(u.return=l,Zi=u):Eu(a);for(;null!==o;)Zi=o,wu(o,t,n),o=o.sibling;Zi=a,Yi=i,Xi=s}Su(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Zi=o):Su(e)}}function Su(e){for(;null!==Zi;){var t=Zi;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xi||au(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xi)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:yo(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&Uo(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Uo(t,i,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&$t(d)}}}break;default:throw Error(o(163))}Xi||512&t.flags&&ou(t)}catch(e){_s(t,t.return,e)}}if(t===e){Zi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zi=n;break}Zi=t.return}}function ku(e){for(;null!==Zi;){var t=Zi;if(t===e){Zi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zi=n;break}Zi=t.return}}function Eu(e){for(;null!==Zi;){var t=Zi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{au(4,t)}catch(e){_s(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){_s(t,a,e)}}var o=t.return;try{ou(t)}catch(e){_s(t,o,e)}break;case 5:var l=t.return;try{ou(t)}catch(e){_s(t,l,e)}}}catch(e){_s(t,t.return,e)}if(t===e){Zi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Zi=i;break}Zi=t.return}}var xu,_u=Math.ceil,Cu=w.ReactCurrentDispatcher,Lu=w.ReactCurrentOwner,Nu=w.ReactCurrentBatchConfig,Ou=0,Pu=null,Tu=null,Ru=0,ju=0,zu=xa(0),Fu=0,Iu=null,Au=0,Du=0,Uu=0,Mu=null,Bu=null,$u=0,Wu=1/0,Vu=null,Hu=!1,Qu=null,qu=null,Gu=!1,Ku=null,Yu=0,Xu=0,Ju=null,Zu=-1,es=0;function ts(){return 0!=(6&Ou)?Xe():-1!==Zu?Zu:Zu=Xe()}function ns(e){return 0==(1&e.mode)?1:0!=(2&Ou)&&0!==Ru?Ru&-Ru:null!==vo.transition?(0===es&&(es=mt()),es):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function rs(e,t,n,r){if(50<Xu)throw Xu=0,Ju=null,Error(o(185));yt(e,n,r),0!=(2&Ou)&&e===Pu||(e===Pu&&(0==(2&Ou)&&(Du|=n),4===Fu&&us(e,Ru)),as(e,r),1===n&&0===Ou&&0==(1&t.mode)&&(Wu=Xe()+500,Ua&&$a()))}function as(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,u=a[l];-1===u?0!=(i&n)&&0==(i&r)||(a[l]=pt(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var r=dt(e,e===Pu?Ru:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Ua=!0,Ba(e)}(ss.bind(null,e)):Ba(ss.bind(null,e)),la((function(){0==(6&Ou)&&$a()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ps(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Zu=-1,es=0,0!=(6&Ou))throw Error(o(327));var n=e.callbackNode;if(Es()&&e.callbackNode!==n)return null;var r=dt(e,e===Pu?Ru:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=ys(e,r);else{t=r;var a=Ou;Ou|=2;var l=ms();for(Pu===e&&Ru===t||(Vu=null,Wu=Xe()+500,ps(e,t));;)try{bs();break}catch(t){hs(e,t)}ko(),Cu.current=l,Ou=a,null!==Tu?t=0:(Pu=null,Ru=0,t=Fu)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=ls(e,a)),1===t)throw n=Iu,ps(e,0),us(e,r),as(e,Xe()),n;if(6===t)us(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!ir(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=ys(e,r))&&0!==(l=ht(e))&&(r=l,t=ls(e,l)),1===t))throw n=Iu,ps(e,0),us(e,r),as(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ks(e,Bu,Vu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=$u+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ts(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ks.bind(null,e,Bu,Vu),t);break}ks(e,Bu,Vu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*_u(r/1960))-r)){e.timeoutHandle=ra(ks.bind(null,e,Bu,Vu),r);break}ks(e,Bu,Vu);break;default:throw Error(o(329))}}}return as(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function ls(e,t){var n=Mu;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=ys(e,t))&&(t=Bu,Bu=n,null!==t&&is(t)),e}function is(e){null===Bu?Bu=e:Bu.push.apply(Bu,e)}function us(e,t){for(t&=~Uu,t&=~Du,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function ss(e){if(0!=(6&Ou))throw Error(o(327));Es();var t=dt(e,0);if(0==(1&t))return as(e,Xe()),null;var n=ys(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ls(e,r))}if(1===n)throw n=Iu,ps(e,0),us(e,t),as(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ks(e,Bu,Vu),as(e,Xe()),null}function cs(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Wu=Xe()+500,Ua&&$a())}}function fs(e){null!==Ku&&0===Ku.tag&&0==(6&Ou)&&Es();var t=Ou;Ou|=1;var n=Nu.transition,r=bt;try{if(Nu.transition=null,bt=1,e)return e()}finally{bt=r,Nu.transition=n,0==(6&(Ou=t))&&$a()}}function ds(){ju=zu.current,_a(zu)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&ja();break;case 3:ol(),_a(Oa),_a(Na),fl();break;case 5:il(r);break;case 4:ol();break;case 13:case 19:_a(ul);break;case 10:Eo(r.type._context);break;case 22:case 23:ds()}n=n.return}if(Pu=e,Tu=e=zs(e.current,null),Ru=ju=t,Fu=0,Iu=null,Uu=Du=Au=0,Bu=Mu=null,null!==Lo){for(t=0;t<Lo.length;t++)if(null!==(r=(n=Lo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}n.pending=r}Lo=null}return e}function hs(e,t){for(;;){var n=Tu;try{if(ko(),dl.current=li,gl){for(var r=ml.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}gl=!1}if(hl=0,yl=vl=ml=null,bl=!1,wl=0,Lu.current=null,null===n||null===n.return){Fu=1,Iu=t,Tu=null;break}e:{var l=e,i=n.return,u=n,s=t;if(t=Ru,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yi(i);if(null!==h){h.flags&=-257,gi(h,i,u,0,t),1&h.mode&&vi(l,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){vi(l,c,t),vs();break e}s=Error(o(426))}else if(ao&&1&u.mode){var y=yi(i);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gi(y,i,u,0,t),mo(ci(s,u));break e}}l=s=ci(s,u),4!==Fu&&(Fu=2),null===Mu?Mu=[l]:Mu.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,Ao(l,hi(0,s,t));break e;case 1:u=s;var g=l.type,b=l.stateNode;if(0==(128&l.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qu||!qu.has(b)))){l.flags|=65536,t&=-t,l.lanes|=t,Ao(l,mi(l,u,t));break e}}l=l.return}while(null!==l)}Ss(n)}catch(e){t=e,Tu===n&&null!==n&&(Tu=n=n.return);continue}break}}function ms(){var e=Cu.current;return Cu.current=li,null===e?li:e}function vs(){0!==Fu&&3!==Fu&&2!==Fu||(Fu=4),null===Pu||0==(268435455&Au)&&0==(268435455&Du)||us(Pu,Ru)}function ys(e,t){var n=Ou;Ou|=2;var r=ms();for(Pu===e&&Ru===t||(Vu=null,ps(e,t));;)try{gs();break}catch(t){hs(e,t)}if(ko(),Ou=n,Cu.current=r,null!==Tu)throw Error(o(261));return Pu=null,Ru=0,Fu}function gs(){for(;null!==Tu;)ws(Tu)}function bs(){for(;null!==Tu&&!Ke();)ws(Tu)}function ws(e){var t=xu(e.alternate,e,ju);e.memoizedProps=e.pendingProps,null===t?Ss(e):Tu=t,Lu.current=null}function Ss(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Gi(n,t,ju)))return void(Tu=n)}else{if(null!==(n=Ki(n,t)))return n.flags&=32767,void(Tu=n);if(null===e)return Fu=6,void(Tu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tu=t);Tu=t=e}while(null!==t);0===Fu&&(Fu=5)}function ks(e,t,n){var r=bt,a=Nu.transition;try{Nu.transition=null,bt=1,function(e,t,n,r){do{Es()}while(null!==Ku);if(0!=(6&Ou))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,l),e===Pu&&(Tu=Pu=null,Ru=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Gu||(Gu=!0,Ps(tt,(function(){return Es(),null}))),l=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||l){l=Nu.transition,Nu.transition=null;var i=bt;bt=1;var u=Ou;Ou|=4,Lu.current=null,function(e,t){if(ea=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,Zi=t;null!==Zi;)if(e=(t=Zi).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zi=e;else for(;null!==Zi;){t=Zi;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:yo(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){_s(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zi=e;break}Zi=t.return}m=nu,nu=!1}(e,n),yu(n,e),hr(ta),Vt=!!ea,ta=ea=null,e.current=n,bu(n,e,a),Ye(),Ou=u,bt=i,Nu.transition=l}else e.current=n;if(Gu&&(Gu=!1,Ku=e,Yu=a),0===(l=e.pendingLanes)&&(qu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),as(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Hu)throw Hu=!1,e=Qu,Qu=null,e;0!=(1&Yu)&&0!==e.tag&&Es(),0!=(1&(l=e.pendingLanes))?e===Ju?Xu++:(Xu=0,Ju=e):Xu=0,$a()}(e,t,n,r)}finally{Nu.transition=a,bt=r}return null}function Es(){if(null!==Ku){var e=wt(Yu),t=Nu.transition,n=bt;try{if(Nu.transition=null,bt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Yu=0,0!=(6&Ou))throw Error(o(331));var a=Ou;for(Ou|=4,Zi=e.current;null!==Zi;){var l=Zi,i=l.child;if(0!=(16&Zi.flags)){var u=l.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Zi=c;null!==Zi;){var f=Zi;switch(f.tag){case 0:case 11:case 15:ru(8,f,l)}var d=f.child;if(null!==d)d.return=f,Zi=d;else for(;null!==Zi;){var p=(f=Zi).sibling,h=f.return;if(lu(f),f===c){Zi=null;break}if(null!==p){p.return=h,Zi=p;break}Zi=h}}}var m=l.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Zi=l}}if(0!=(2064&l.subtreeFlags)&&null!==i)i.return=l,Zi=i;else e:for(;null!==Zi;){if(0!=(2048&(l=Zi).flags))switch(l.tag){case 0:case 11:case 15:ru(9,l,l.return)}var g=l.sibling;if(null!==g){g.return=l.return,Zi=g;break e}Zi=l.return}}var b=e.current;for(Zi=b;null!==Zi;){var w=(i=Zi).child;if(0!=(2064&i.subtreeFlags)&&null!==w)w.return=i,Zi=w;else e:for(i=b;null!==Zi;){if(0!=(2048&(u=Zi).flags))try{switch(u.tag){case 0:case 11:case 15:au(9,u)}}catch(e){_s(u,u.return,e)}if(u===i){Zi=null;break e}var S=u.sibling;if(null!==S){S.return=u.return,Zi=S;break e}Zi=u.return}}if(Ou=a,$a(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Nu.transition=t}}return!1}function xs(e,t,n){e=Fo(e,t=hi(0,t=ci(n,t),1),1),t=ts(),null!==e&&(yt(e,1,t),as(e,t))}function _s(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){t=Fo(t,e=mi(t,e=ci(n,e),1),1),e=ts(),null!==t&&(yt(t,1,e),as(t,e));break}}t=t.return}}function Cs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ts(),e.pingedLanes|=e.suspendedLanes&n,Pu===e&&(Ru&n)===n&&(4===Fu||3===Fu&&(130023424&Ru)===Ru&&500>Xe()-$u?ps(e,0):Uu|=n),as(e,t)}function Ls(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=ts();null!==(e=Po(e,t))&&(yt(e,t,n),as(e,n))}function Ns(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ls(e,n)}function Os(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Ls(e,n)}function Ps(e,t){return qe(e,t)}function Ts(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rs(e,t,n,r){return new Ts(e,t,n,r)}function js(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zs(e,t){var n=e.alternate;return null===n?((n=Rs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fs(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)js(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case E:return Is(n.children,a,l,t);case x:i=8,a|=8;break;case _:return(e=Rs(12,n,t,2|a)).elementType=_,e.lanes=l,e;case O:return(e=Rs(13,n,t,a)).elementType=O,e.lanes=l,e;case P:return(e=Rs(19,n,t,a)).elementType=P,e.lanes=l,e;case j:return As(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:i=10;break e;case L:i=9;break e;case N:i=11;break e;case T:i=14;break e;case R:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Rs(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Is(e,t,n,r){return(e=Rs(7,e,r,t)).lanes=n,e}function As(e,t,n,r){return(e=Rs(22,e,r,t)).elementType=j,e.lanes=n,e.stateNode={isHidden:!1},e}function Ds(e,t,n){return(e=Rs(6,e,null,t)).lanes=n,e}function Us(e,t,n){return(t=Rs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ms(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Bs(e,t,n,r,a,o,l,i,u){return e=new Ms(e,t,n,i,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Rs(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ro(o),e}function $s(e){if(!e)return La;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ra(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ra(n))return Fa(e,n,t)}return t}function Ws(e,t,n,r,a,o,l,i,u){return(e=Bs(n,r,!0,e,0,o,0,i,u)).context=$s(null),n=e.current,(o=zo(r=ts(),a=ns(n))).callback=null!=t?t:null,Fo(n,o,a),e.current.lanes=a,yt(e,a,r),as(e,r),e}function Vs(e,t,n,r){var a=t.current,o=ts(),l=ns(a);return n=$s(n),null===t.context?t.context=n:t.pendingContext=n,(t=zo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Fo(a,t,l))&&(rs(e,a,l,o),Io(e,a,l)),l}function Hs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qs(e,t){Qs(e,t),(e=e.alternate)&&Qs(e,t)}xu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oa.current)wi=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wi=!1,function(e,t,n){switch(t.tag){case 3:Pi(t),ho();break;case 5:ll(t);break;case 1:Ra(t.type)&&Ia(t);break;case 4:al(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ca(go,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ca(ul,1&ul.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Di(e,t,n):(Ca(ul,1&ul.current),null!==(e=Hi(e,t,n))?e.sibling:null);Ca(ul,1&ul.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ca(ul,ul.current),r)break;return null;case 22:case 23:return t.lanes=0,_i(e,t,n)}return Hi(e,t,n)}(e,t,n);wi=0!=(131072&e.flags)}else wi=!1,ao&&0!=(1048576&t.flags)&&Za(t,Qa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vi(e,t),e=t.pendingProps;var a=Ta(t,Na.current);_o(t,n),a=xl(null,t,r,e,a,n);var l=_l();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ra(r)?(l=!0,Ia(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Ro(t),a.updater=$o,t.stateNode=a,a._reactInternals=t,Qo(t,r,e,n),t=Oi(null,t,r,!0,l,n)):(t.tag=0,ao&&l&&eo(t),Si(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vi(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return js(e)?1:0;if(null!=e){if((e=e.$$typeof)===N)return 11;if(e===T)return 14}return 2}(r),e=yo(r,e),a){case 0:t=Li(null,t,r,e,n);break e;case 1:t=Ni(null,t,r,e,n);break e;case 11:t=ki(null,t,r,e,n);break e;case 14:t=Ei(null,t,r,yo(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Li(e,t,r,a=t.elementType===r?a:yo(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ni(e,t,r,a=t.elementType===r?a:yo(r,a),n);case 3:e:{if(Pi(t),null===e)throw Error(o(387));r=t.pendingProps,a=(l=t.memoizedState).element,jo(e,t),Do(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Ti(e,t,r,n,a=ci(Error(o(423)),t));break e}if(r!==a){t=Ti(e,t,r,n,a=ci(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Jo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=Hi(e,t,n);break e}Si(e,t,r,n)}t=t.child}return t;case 5:return ll(t),null===e&&so(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,na(r,a)?i=null:null!==l&&na(r,l)&&(t.flags|=32),Ci(e,t),Si(e,t,i,n),t.child;case 6:return null===e&&so(t),null;case 13:return Di(e,t,n);case 4:return al(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xo(t,null,r,n):Si(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,ki(e,t,r,a=t.elementType===r?a:yo(r,a),n);case 7:return Si(e,t,t.pendingProps,n),t.child;case 8:case 12:return Si(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value,Ca(go,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===a.children&&!Oa.current){t=Hi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){i=l.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===l.tag){(s=zo(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),xo(l.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),xo(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}Si(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,_o(t,n),r=r(a=Co(a)),t.flags|=1,Si(e,t,r,n),t.child;case 14:return a=yo(r=t.type,t.pendingProps),Ei(e,t,r,a=yo(r.type,a),n);case 15:return xi(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:yo(r,a),Vi(e,t),t.tag=1,Ra(r)?(e=!0,Ia(t)):e=!1,_o(t,n),Vo(t,r,a),Qo(t,r,a,n),Oi(null,t,r,!0,e,n);case 19:return Wi(e,t,n);case 22:return _i(e,t,n)}throw Error(o(156,t.tag))};var Gs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Ys(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function ec(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=Hs(l);i.call(e)}}Vs(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Hs(l);o.call(e)}}var l=Ws(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=l,e[ha]=l.current,$r(8===e.nodeType?e.parentNode:e),fs(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=Hs(u);i.call(e)}}var u=Bs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[ha]=u.current,$r(8===e.nodeType?e.parentNode:e),fs((function(){Vs(t,u,n,r)})),u}(n,t,e,a,r);return Hs(l)}Ys.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Vs(e,t,null,null)},Ys.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fs((function(){Vs(null,e,null,null)})),t[ha]=null}},Ys.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<jt.length&&0!==t&&t<jt[n].priority;n++);jt.splice(n,0,e),0===n&&At(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),as(t,Xe()),0==(6&Ou)&&(Wu=Xe()+500,$a()))}break;case 13:fs((function(){var t=Po(e,1);if(null!==t){var n=ts();rs(t,e,1,n)}})),qs(e,1)}},kt=function(e){if(13===e.tag){var t=Po(e,134217728);null!==t&&rs(t,e,134217728,ts()),qs(e,134217728)}},Et=function(e){if(13===e.tag){var t=ns(e),n=Po(e,t);null!==n&&rs(n,e,t,ts()),qs(e,t)}},xt=function(){return bt},_t=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Sa(r);if(!a)throw Error(o(90));q(r),J(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ne=cs,Oe=fs;var tc={usingClientEntryPoint:!1,Events:[ba,wa,Sa,Ce,Le,cs]},nc={findFiberByHostInstance:ga,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(o(299));var n=!1,r="",a=Gs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Bs(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,$r(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fs(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",i=Gs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,a,0,l,i),e[ha]=t.current,$r(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ys(t)},t.render=function(e,t,n){if(!Js(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(o(40));return!!e._reactRootContainer&&(fs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=cs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,E={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var a,o={},l=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)k.call(t,a)&&!x.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:E.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var L=/\/+/g;function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return l=l(u=e),e=""===o?"."+N(u,0):o,S(l)?(a="",null!=e&&(a=e.replace(L,"$&/")+"/"),O(l,t,a,"",(function(e){return e}))):null!=l&&(C(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(L,"$&/")+"/")+e)),t.push(l)),1;if(u=0,o=""===o?".":o+":",S(e))for(var s=0;s<e.length;s++){var c=o+N(i=e[s],s);u+=O(i,t,a,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=O(i=i.value,t,a,c=o+N(i,s++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,t,n){if(null==e)return e;var r=[],a=0;return O(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},j={transition:null},z={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:j,ReactCurrentOwner:E};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=l,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=E.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!x.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:l,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=j.transition;j.transition={};try{e()}finally{j.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,j(k);else{var t=r(c);null!==t&&z(S,t.startTime-e)}}function k(e,n){m=!1,v&&(v=!1,g(C),C=-1),h=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!O());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var i=l(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?d.callback=i:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&z(S,f.startTime-n),u=!1}return u}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,x=!1,_=null,C=-1,L=5,N=-1;function O(){return!(t.unstable_now()-N<L)}function P(){if(null!==_){var e=t.unstable_now();N=e;var n=!0;try{n=_(!0,e)}finally{n?E():(x=!1,_=null)}}else x=!1}if("function"==typeof b)E=function(){b(P)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,R=T.port2;T.port1.onmessage=P,E=function(){R.postMessage(null)}}else E=function(){y(P,0)};function j(e){_=e,x||(x=!0,E())}function z(e,n){C=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,j(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(v?(g(C),C=-1):v=!0,z(S,o-l))):(e.sortIndex=i,n(s,e),m||h||(m=!0,j(k))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e](o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,a.d(o,l),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{"use strict";a.d(o,{I:()=>it});var e,t=a(294),n=a.t(t,2),r=a(745);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function u(e,t){if(!1===e||null==e)throw new Error(t)}function s(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function f(e,t,n,r){return void 0===n&&(n=null),l({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?p(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function p(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var h;function m(e,t,n){void 0===n&&(n="/");let r=O(("string"==typeof t?p(t):t).pathname||"/",n);if(null==r)return null;let a=v(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=C(a[e],N(r));return o}function v(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(u(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=j([r,l.relativePath]),s=n.concat(l);e.children&&e.children.length>0&&(u(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),v(e.children,t,s,i)),(null!=e.path||e.index)&&t.push({path:i,score:_(i,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of y(e.path))a(e,t,n);else a(e,t)})),t}function y(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=y(r.join("/")),i=[];return i.push(...l.map((e=>""===e?o:[o,e].join("/")))),a&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(h||(h={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const g=/^:\w+$/,b=3,w=2,S=1,k=10,E=-2,x=e=>"*"===e;function _(e,t){let n=e.split("/"),r=n.length;return n.some(x)&&(r+=E),t&&(r+=w),n.filter((e=>!x(e))).reduce(((e,t)=>e+(g.test(t)?b:""===t?S:k)),r)}function C(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let l=n[e],i=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",s=L({path:l.relativePath,caseSensitive:l.caseSensitive,end:i},u);if(!s)return null;Object.assign(r,s.params);let c=l.route;o.push({params:r,pathname:j([a,s.pathname]),pathnameBase:z(j([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=j([a,s.pathnameBase]))}return o}function L(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),s("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return s(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(i[n]||"",t),e}),{}),pathname:o,pathnameBase:l,pattern:e}}function N(e){try{return decodeURI(e)}catch(t){return s(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function O(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function P(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function T(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function R(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=p(e):(a=l({},e),u(!a.pathname||!a.pathname.includes("?"),P("?","pathname","search",a)),u(!a.pathname||!a.pathname.includes("#"),P("#","pathname","hash",a)),u(!a.search||!a.search.includes("#"),P("#","search","hash",a)));let o,i=""===e||""===a.pathname,s=i?"/":a.pathname;if(r||null==s)o=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?p(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:F(r),hash:I(a)}}(a,o),f=s&&"/"!==s&&s.endsWith("/"),d=(i||"."===s)&&n.endsWith("/");return c.pathname.endsWith("/")||!f&&!d||(c.pathname+="/"),c}const j=e=>e.join("/").replace(/\/\/+/g,"/"),z=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),F=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",I=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const A=["post","put","patch","delete"],D=(new Set(A),["get",...A]);function U(){return U=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},U.apply(this,arguments)}new Set(D),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const M=t.createContext(null),B=t.createContext(null),$=t.createContext(null),W=t.createContext(null),V=t.createContext({outlet:null,matches:[],isDataRoute:!1}),H=t.createContext(null);function Q(){return null!=t.useContext(W)}function q(){return Q()||u(!1),t.useContext(W).location}function G(e){t.useContext($).static||t.useLayoutEffect(e)}function K(){let{isDataRoute:e}=t.useContext(V);return e?function(){let{router:e}=function(e){let n=t.useContext(M);return n||u(!1),n}(ne.UseNavigateStable),n=oe(re.UseNavigateStable),r=t.useRef(!1);return G((()=>{r.current=!0})),t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,U({fromRouteId:n},a)))}),[e,n])}():function(){Q()||u(!1);let e=t.useContext(M),{basename:n,navigator:r}=t.useContext($),{matches:a}=t.useContext(V),{pathname:o}=q(),l=JSON.stringify(T(a).map((e=>e.pathnameBase))),i=t.useRef(!1);return G((()=>{i.current=!0})),t.useCallback((function(t,a){if(void 0===a&&(a={}),!i.current)return;if("number"==typeof t)return void r.go(t);let u=R(t,JSON.parse(l),o,"path"===a.relative);null==e&&"/"!==n&&(u.pathname="/"===u.pathname?n:j([n,u.pathname])),(a.replace?r.replace:r.push)(u,a.state,a)}),[n,r,l,o,e])}()}function Y(e,n){let{relative:r}=void 0===n?{}:n,{matches:a}=t.useContext(V),{pathname:o}=q(),l=JSON.stringify(T(a).map((e=>e.pathnameBase)));return t.useMemo((()=>R(e,JSON.parse(l),o,"path"===r)),[e,l,o,r])}function X(n,r,a){Q()||u(!1);let{navigator:o}=t.useContext($),{matches:l}=t.useContext(V),i=l[l.length-1],s=i?i.params:{},c=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let f,d=q();if(r){var h;let e="string"==typeof r?p(r):r;"/"===c||(null==(h=e.pathname)?void 0:h.startsWith(c))||u(!1),f=e}else f=d;let v=f.pathname||"/",y=m(n,{pathname:"/"===c?v:v.slice(c.length)||"/"}),g=function(e,n,r){var a;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var o;if(null==(o=r)||!o.errors)return null;e=r.matches}let l=e,i=null==(a=r)?void 0:a.errors;if(null!=i){let e=l.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||u(!1),l=l.slice(0,Math.min(l.length,e+1))}return l.reduceRight(((e,a,o)=>{let u=a.route.id?null==i?void 0:i[a.route.id]:null,s=null;r&&(s=a.route.errorElement||Z);let c=n.concat(l.slice(0,o+1)),f=()=>{let n;return n=u?s:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(te,{match:a,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(ee,{location:r.location,revalidation:r.revalidation,component:s,error:u,children:f(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):f()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:j([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:j([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,a);return r&&g?t.createElement(W.Provider,{value:{location:U({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:e.Pop}},g):g}function J(){let e=function(){var e;let n=t.useContext(H),r=function(e){let n=t.useContext(B);return n||u(!1),n}(re.UseRouteError),a=oe(re.UseRouteError);return n||(null==(e=r.errors)?void 0:e[a])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const Z=t.createElement(J,null);class ee extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(V.Provider,{value:this.props.routeContext},t.createElement(H.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function te(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(M);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(V.Provider,{value:n},a)}var ne,re,ae;function oe(e){let n=function(e){let n=t.useContext(V);return n||u(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||u(!1),r.route.id}function le(e){u(!1)}function ie(n){let{basename:r="/",children:a=null,location:o,navigationType:l=e.Pop,navigator:i,static:s=!1}=n;Q()&&u(!1);let c=r.replace(/^\/*/,"/"),f=t.useMemo((()=>({basename:c,navigator:i,static:s})),[c,i,s]);"string"==typeof o&&(o=p(o));let{pathname:d="/",search:h="",hash:m="",state:v=null,key:y="default"}=o,g=t.useMemo((()=>{let e=O(d,c);return null==e?null:{location:{pathname:e,search:h,hash:m,state:v,key:y},navigationType:l}}),[c,d,h,m,v,y,l]);return null==g?null:t.createElement($.Provider,{value:f},t.createElement(W.Provider,{children:a,value:g}))}function ue(e){let{children:t,location:n}=e;return X(se(t),n)}function se(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,se(e.props.children,o));e.type!==le&&u(!1),e.props.index&&e.props.children&&u(!1);let l={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(l.children=se(e.props.children,o)),r.push(l)})),r}function ce(){return ce=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ce.apply(this,arguments)}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate"}(ne||(ne={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId"}(re||(re={})),n.startTransition,function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(ae||(ae={})),new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const fe=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],de=n.startTransition;function pe(n){let{basename:r,children:a,future:o,window:s}=n,p=t.useRef();var h;null==p.current&&(p.current=(void 0===(h={window:s,v5Compat:!0})&&(h={}),function(t,n,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:s=!1}=a,p=o.history,h=e.Pop,m=null,v=y();function y(){return(p.state||{idx:null}).idx}function g(){h=e.Pop;let t=y(),n=null==t?null:t-v;v=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:d(e);return u(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,p.replaceState(l({},p.state,{idx:v}),""));let w={get action(){return h},get location(){return t(o,p)},listen(e){if(m)throw new Error("A history only accepts one active listener");return o.addEventListener(i,g),m=e,()=>{o.removeEventListener(i,g),m=null}},createHref:e=>n(o,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let a=f(w.location,t,n);r&&r(a,t),v=y()+1;let l=c(a,v),i=w.createHref(a);try{p.pushState(l,"",i)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(i)}s&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let a=f(w.location,t,n);r&&r(a,t),v=y();let o=c(a,v),l=w.createHref(a);p.replaceState(o,"",l),s&&m&&m({action:h,location:w.location,delta:0})},go:e=>p.go(e)};return w}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return f("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:d(t)}),null,h)));let m=p.current,[v,y]=t.useState({action:m.action,location:m.location}),{v7_startTransition:g}=o||{},b=t.useCallback((e=>{g&&de?de((()=>y(e))):y(e)}),[y,g]);return t.useLayoutEffect((()=>m.listen(b)),[m,b]),t.createElement(ie,{basename:r,children:a,location:v.location,navigationType:v.action,navigator:m})}const he="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,me=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ve=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:l,replace:i,state:s,target:c,to:f,preventScrollReset:p}=e,h=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,fe),{basename:m}=t.useContext($),v=!1;if("string"==typeof f&&me.test(f)&&(r=f,he))try{let e=new URL(window.location.href),t=f.startsWith("//")?new URL(e.protocol+f):new URL(f),n=O(t.pathname,m);t.origin===e.origin&&null!=n?f=n+t.search+t.hash:v=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;Q()||u(!1);let{basename:a,navigator:o}=t.useContext($),{hash:l,pathname:i,search:s}=Y(e,{relative:r}),c=i;return"/"!==a&&(c="/"===i?a:j([a,i])),o.createHref({pathname:c,search:s,hash:l})}(f,{relative:o}),g=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:l,relative:i}=void 0===n?{}:n,u=K(),s=q(),c=Y(e,{relative:i});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:d(s)===d(c);u(e,{replace:n,state:o,preventScrollReset:l,relative:i})}}),[s,u,c,a,o,r,e,l,i])}(f,{replace:i,state:s,target:c,preventScrollReset:p,relative:o});return t.createElement("a",ce({},h,{href:r||y,onClick:v||l?a:function(e){a&&a(e),e.defaultPrevented||g(e)},ref:n,target:c}))}));var ye,ge;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"})(ye||(ye={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ge||(ge={}));var be=a(669),we=a.n(be);const Se=function(e){var n="lds-ellipsis ";e.className&&(n+=e.className);var r=t.createElement("div",{className:n},t.createElement("div",{className:"lds-ellipsis--".concat(e.color)}),t.createElement("div",{className:"lds-ellipsis--".concat(e.color)}),t.createElement("div",{className:"lds-ellipsis--".concat(e.color)}),t.createElement("div",{className:"lds-ellipsis--".concat(e.color)}));return e.center?t.createElement("div",{className:"u-text-center"},r):r},ke=function(e){var t,n,r,a,o,l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default",i=document.querySelector("#js--alert");if(!i){var u,s=document.createElement("div"),c=document.createElement("p"),f=document.createElement("button"),d=document.createElement("span");s.setAttribute("class","alert-snackbar alert-snackbar--close"),s.setAttribute("id","js--alert"),f.setAttribute("type","button"),d.innerHTML="&#10005",f.appendChild(d),s.appendChild(c),s.appendChild(f),null===(u=document.querySelector("body"))||void 0===u||u.appendChild(s),i=document.querySelector("#js--alert")}var p,h,m=document.querySelector("#js--alert p"),v=document.querySelector("#js--alert button");null===(t=i)||void 0===t||t.classList.remove("alert-snackbar--error"),null===(n=i)||void 0===n||n.classList.remove("alert-snackbar--success"),null===(r=i)||void 0===r||r.classList.remove("alert-snackbar--open"),null===(a=i)||void 0===a||a.classList.remove("alert-snackbar--close"),null===(o=i)||void 0===o||o.classList.add("alert-snackbar--open"),"success"===l&&(null===(p=i)||void 0===p||p.classList.add("alert-snackbar--success")),"error"===l&&(null===(h=i)||void 0===h||h.classList.add("alert-snackbar--error")),m&&(m.innerHTML=e);var y=setTimeout((function(){var e,t,n,r;null===(e=i)||void 0===e||e.classList.add("alert-snackbar--close"),null===(t=i)||void 0===t||t.classList.remove("alert-snackbar--error"),null===(n=i)||void 0===n||n.classList.remove("alert-snackbar--success"),null===(r=i)||void 0===r||r.classList.remove("alert-snackbar--open")}),5e3);null==v||v.addEventListener("click",(function(){var e,t,n,r;clearTimeout(y),null===(e=i)||void 0===e||e.classList.add("alert-snackbar--close"),null===(t=i)||void 0===t||t.classList.remove("alert-snackbar--error"),null===(n=i)||void 0===n||n.classList.remove("alert-snackbar--success"),null===(r=i)||void 0===r||r.classList.remove("alert-snackbar--open")}))},Ee={error:{auth:{badLoginInfo:"Username or password is incorrect."},post:{},user:{},default:"Sorry an unexpected error occurred. Please try again later."},success:{auth:{loggedOut:"You were successfully logged out!",loggedIn:"You were successfully logged in!"},post:{created:"Your post was created successfully!"},user:{updated:"Your info was updated successfully!"}}};function xe(e){return xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xe(e)}function _e(){_e=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,a){var o=t&&t.prototype instanceof d?t:d,l=Object.create(o.prototype),i=new _(a||[]);return r(l,"_invoke",{value:S(e,n,i)}),l}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function h(){}var m={};u(m,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(C([])));y&&y!==t&&n.call(y,o)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function a(r,o,l,i){var u=c(e[r],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==xe(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){a("next",e,l,i)}),(function(e){a("throw",e,l,i)})):t.resolve(f).then((function(e){s.value=e,l(s)}),(function(e){return a("throw",e,l,i)}))}i(u.arg)}var o;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){a(e,n,t,r)}))}return o=o?o.then(r,r):r()}})}function S(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return{value:void 0,done:!0}}for(n.method=a,n.arg=o;;){var l=n.delegate;if(l){var i=k(l,n);if(i){if(i===f)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function k(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var a=c(r,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,f;var o=a.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function C(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:L}}function L(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,i,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,l,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var l=new w(s(t,n,r,a),o);return e.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},b(g),u(g,i,"Generator"),u(g,o,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=C,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return l.type="throw",l.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],l=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var i=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(i&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(i){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Ce(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function Le(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ne(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ne(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Oe=function(){var e=Le((0,t.useState)([]),2),n=e[0],r=e[1],a=Le((0,t.useState)(!1),2),o=a[0],l=a[1],i=function(){var e,t=(e=_e().mark((function e(){var t,n;return _e().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return l(!0),e.prev=1,e.next=4,we().get("/api/posts");case 4:t=e.sent,n=t.data,r(n),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),ke(Ee.error.default,"error");case 12:l(!1);case 13:case"end":return e.stop()}}),e,null,[[1,9]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function l(e){Ce(o,r,a,l,i,"next",e)}function i(e){Ce(o,r,a,l,i,"throw",e)}l(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,t.useEffect)((function(){i()}),[]),o?t.createElement("div",{className:"u-text-center u-margin-top-3"},t.createElement(Se,{color:"gray"})):t.createElement("div",{className:"posts-container"},n.map((function(e){return t.createElement("div",{className:"post",key:e.id},t.createElement("h1",null,e.title),t.createElement("p",null,e.body),t.createElement("span",{className:"post__author"},"By ",e.author))})))};function Pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Te=function(e){var n,r,a,o=(r=(0,t.useState)(null===(n=e.value)||void 0===n?void 0:n.toString()),a=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(r,a)||function(e,t){if(e){if("string"==typeof e)return Pe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pe(e,t):void 0}}(r,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=o[0],i=o[1],u=(0,t.useRef)(null);(0,t.useEffect)((function(){e.value?i(e.value.toString()):i("")}),[e.value]),(0,t.useEffect)((function(){e.onChange&&"string"==typeof l&&e.onChange(l)}),[l]);var s="form-text";switch(e.size){case"big":s+=" form-text--big";break;case"small":s+=" form-text--small"}e.rounded&&(s+=" form-text--rounded"),e.success&&!e.disabled&&(s+=" form-text--success"),e.error&&!e.disabled&&(s+=" form-text--error"),e.disabled&&(s+=" form-text--disabled");var c=!0;return"boolean"==typeof e.shouldDivideNumberByThree&&(c=e.shouldDivideNumberByThree),e.requiredWithError&&!l&&(s+=" form-text--error"),e.lined&&(s+=" form-text-lined"),t.createElement(t.Fragment,null,t.createElement("div",{className:s},e.placeholder&&!e.lined&&t.createElement("label",{className:"form__label",onClick:function(){var e;null===(e=u.current)||void 0===e||e.focus()}},e.label),t.createElement("div",{className:"form-text__input-container"},t.createElement("input",{ref:u,className:"form-text__input",id:e.id,disabled:e.disabled,value:"number"===e.type&&l&&c?Number(l).toLocaleString():l,required:e.required,autoFocus:e.autoFocus,autoComplete:e.autoComplete||"",placeholder:e.placeholder,onChange:function(t){var n=t.target.value;"number"===e.type?(n=n.replace(/,/g,""),(Number(n)||0===Number(n))&&i(n)):i(n)},onBlur:function(t){var n=t.target.value;i(n),e.onBlur&&e.onBlur(n)},type:"password"===e.type?"password":"text"})),!e.placeholder&&t.createElement("label",{className:"form-text__label ".concat(l?"form-text__label--top":""),onClick:function(){var e;null===(e=u.current)||void 0===e||e.focus()}},e.label)),t.createElement("div",{className:"form-text__footer"},e.error&&!e.disabled&&t.createElement("span",{className:"input-error"},t.createElement("i",{className:"fa fa-exclamation-circle"}),e.error)))},Re=function(e){var n,r="button";switch(e.size){case"big":r+=" button-big";break;case"small":r+=" button-small"}return e.color,e.outlined?r+=" button-blue-outlined":r+=" button-blue",e.rounded&&(r+=" button-rounded"),e.block&&(r+=" button-block"),r+=" "+e.className,"blue"===e.color&&(n="blue"),e.outlined||(n="light"),t.createElement("button",{id:e.id,style:e.style,onClick:e.onClick,className:r,type:e.type?e.type:"button",disabled:!!e.loading||e.disabled},e.children,e.loading&&t.createElement(Se,{className:"u-margin-left-03",color:n}))};function je(e){return je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},je(e)}function ze(){ze=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,a){var o=t&&t.prototype instanceof d?t:d,l=Object.create(o.prototype),i=new _(a||[]);return r(l,"_invoke",{value:S(e,n,i)}),l}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function h(){}var m={};u(m,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(C([])));y&&y!==t&&n.call(y,o)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function a(r,o,l,i){var u=c(e[r],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==je(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){a("next",e,l,i)}),(function(e){a("throw",e,l,i)})):t.resolve(f).then((function(e){s.value=e,l(s)}),(function(e){return a("throw",e,l,i)}))}i(u.arg)}var o;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){a(e,n,t,r)}))}return o=o?o.then(r,r):r()}})}function S(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return{value:void 0,done:!0}}for(n.method=a,n.arg=o;;){var l=n.delegate;if(l){var i=k(l,n);if(i){if(i===f)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function k(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var a=c(r,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,f;var o=a.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function C(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:L}}function L(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,i,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,l,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var l=new w(s(t,n,r,a),o);return e.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},b(g),u(g,i,"Generator"),u(g,o,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=C,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return l.type="throw",l.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],l=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var i=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(i&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(i){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Fe(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function Ie(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ae(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const De=function(){var e=Ie((0,t.useState)(""),2),n=e[0],r=e[1],a=Ie((0,t.useState)(""),2),o=a[0],l=a[1],i=Ie((0,t.useState)(!1),2),u=i[0],s=i[1],c=(0,t.useContext)(it),f=(c.loggedIn,c.setLoggedIn),d=c.setSection,p=K(),h=function(){var e,t=(e=ze().mark((function e(t){return ze().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),s(!0),e.prev=2,e.next=5,we().post("/api/login",{username:n,password:o});case 5:f(!0),p("/profile"),d("/profile"),ke(Ee.success.auth.loggedIn,"success"),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(2),e.t0.response&&401===e.t0.response.status?ke(Ee.error.auth.badLoginInfo,"error"):ke(Ee.error.default,"error");case 14:s(!1);case 15:case"end":return e.stop()}}),e,null,[[2,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function l(e){Fe(o,r,a,l,i,"next",e)}function i(e){Fe(o,r,a,l,i,"throw",e)}l(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement("div",{className:"login-container"},t.createElement("form",{onSubmit:h},t.createElement("div",{className:"form-group"},t.createElement(Te,{type:"text",label:"Username",value:n,onChange:function(e){r(e)}})),t.createElement("div",{className:"form-group"},t.createElement(Te,{type:"password",label:"Password",value:o,onChange:function(e){l(e)}})),t.createElement("div",{className:"form-group u-flex-text-right"},t.createElement(Re,{color:"blue",type:"submit",loading:u},"Login"))))};function Ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Me=function(e){var n,r,a,o=(r=(0,t.useState)(null===(n=e.value)||void 0===n?void 0:n.toString()),a=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(r,a)||function(e,t){if(e){if("string"==typeof e)return Ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ue(e,t):void 0}}(r,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=o[0],i=o[1],u=(0,t.useRef)(null);(0,t.useEffect)((function(){e.value?i(e.value.toString()):i("")}),[e.value]),(0,t.useEffect)((function(){e.onChange&&"string"==typeof l&&e.onChange(l)}),[l]);var s="form-text form-text--textarea";switch(e.size){case"big":s+=" form-text--big";break;case"small":s+=" form-text--small"}return e.rounded&&(s+=" form-text--rounded"),e.error&&(s+=" form-text--error"),t.createElement(t.Fragment,null,t.createElement("div",{className:s},e.placeholder&&t.createElement("label",{className:"form__label",onClick:function(){var e;null===(e=u.current)||void 0===e||e.focus()}},e.label),t.createElement("div",{className:"form-text__input-container"},t.createElement("textarea",{rows:e.rows,ref:u,id:e.id,className:"form-text__input",placeholder:e.placeholder,value:l,required:e.required,onChange:function(e){var t=e.target.value;i(t)},onBlur:function(t){e.onBlur&&e.onBlur(t.target.value)}})),!e.placeholder&&t.createElement("label",{className:"form-text__label ".concat(l?"form-text__label--top":""),onClick:function(){var e;null===(e=u.current)||void 0===e||e.focus()}},e.label)),t.createElement("div",{className:"form-text__footer"},e.error&&t.createElement("span",{className:"input-error"},t.createElement("i",{className:"fa fa-exclamation-circle"}),e.error)))};function Be(e){return Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Be(e)}function $e(){$e=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,a){var o=t&&t.prototype instanceof d?t:d,l=Object.create(o.prototype),i=new _(a||[]);return r(l,"_invoke",{value:S(e,n,i)}),l}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function h(){}var m={};u(m,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(C([])));y&&y!==t&&n.call(y,o)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function a(r,o,l,i){var u=c(e[r],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==Be(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){a("next",e,l,i)}),(function(e){a("throw",e,l,i)})):t.resolve(f).then((function(e){s.value=e,l(s)}),(function(e){return a("throw",e,l,i)}))}i(u.arg)}var o;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){a(e,n,t,r)}))}return o=o?o.then(r,r):r()}})}function S(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return{value:void 0,done:!0}}for(n.method=a,n.arg=o;;){var l=n.delegate;if(l){var i=k(l,n);if(i){if(i===f)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function k(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var a=c(r,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,f;var o=a.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function C(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:L}}function L(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,i,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,l,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var l=new w(s(t,n,r,a),o);return e.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},b(g),u(g,i,"Generator"),u(g,o,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=C,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return l.type="throw",l.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],l=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var i=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(i&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(i){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function We(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function Ve(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return He(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?He(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function He(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Qe=function(){var e=Ve((0,t.useState)(""),2),n=e[0],r=e[1],a=Ve((0,t.useState)(""),2),o=a[0],l=a[1],i=Ve((0,t.useState)(!1),2),u=i[0],s=i[1],c=(0,t.useContext)(it).setSection,f=K(),d=function(){var e,t=(e=$e().mark((function e(t){return $e().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),s(!0),e.prev=2,e.next=5,we().post("/api/posts",{title:n,body:o});case 5:f("/"),c("/"),ke(Ee.success.post.created,"success"),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(2),ke(Ee.error.default,"error");case 13:s(!1);case 14:case"end":return e.stop()}}),e,null,[[2,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function l(e){We(o,r,a,l,i,"next",e)}function i(e){We(o,r,a,l,i,"throw",e)}l(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement("div",{className:"new-post-container"},t.createElement("form",{onSubmit:d},t.createElement("div",{className:"form-group"},t.createElement(Te,{required:!0,type:"text",label:"Title",value:n,onChange:function(e){r(e)}})),t.createElement("div",{className:"form-group"},t.createElement(Me,{label:"Body",required:!0,rows:5,value:o,onChange:function(e){l(e)}})),t.createElement("div",{className:"form-group u-flex-text-right"},t.createElement(Re,{type:"submit",color:"blue",loading:u,disabled:!o.length||!n.length},"Create"))))};function qe(e){return qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qe(e)}function Ge(){Ge=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,a){var o=t&&t.prototype instanceof d?t:d,l=Object.create(o.prototype),i=new _(a||[]);return r(l,"_invoke",{value:S(e,n,i)}),l}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function h(){}var m={};u(m,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(C([])));y&&y!==t&&n.call(y,o)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function a(r,o,l,i){var u=c(e[r],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==qe(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){a("next",e,l,i)}),(function(e){a("throw",e,l,i)})):t.resolve(f).then((function(e){s.value=e,l(s)}),(function(e){return a("throw",e,l,i)}))}i(u.arg)}var o;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){a(e,n,t,r)}))}return o=o?o.then(r,r):r()}})}function S(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return{value:void 0,done:!0}}for(n.method=a,n.arg=o;;){var l=n.delegate;if(l){var i=k(l,n);if(i){if(i===f)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function k(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var a=c(r,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,f;var o=a.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function C(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:L}}function L(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,i,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,l,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var l=new w(s(t,n,r,a),o);return e.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},b(g),u(g,i,"Generator"),u(g,o,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=C,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return l.type="throw",l.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],l=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var i=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(i&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(i){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Ke(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function Ye(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function l(e){Ke(o,r,a,l,i,"next",e)}function i(e){Ke(o,r,a,l,i,"throw",e)}l(void 0)}))}}function Xe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Je(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Je(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Je(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ze=function(){var e=Xe((0,t.useState)(""),2),n=e[0],r=e[1],a=Xe((0,t.useState)(""),2),o=a[0],l=a[1],i=Xe((0,t.useState)(""),2),u=i[0],s=i[1],c=Xe((0,t.useState)(!1),2),f=c[0],d=c[1],p=Xe((0,t.useState)(!1),2),h=p[0],m=p[1],v=function(){var e=Ye(Ge().mark((function e(){var t,n;return Ge().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return d(!0),e.prev=1,e.next=4,we().get("/api/user");case 4:t=e.sent,n=t.data,r(n.name),l(n.username),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),ke(Ee.error.default,"error");case 13:d(!1);case 14:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}();(0,t.useEffect)((function(){v()}),[]);var y=function(){var e=Ye(Ge().mark((function e(t){return Ge().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),m(!0),e.prev=2,e.next=5,we().put("/api/user",{name:n,username:o,password:u});case 5:ke(Ee.success.user.updated,"success"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),ke(Ee.error.default,"error");case 11:m(!1);case 12:case"end":return e.stop()}}),e,null,[[2,8]])})));return function(t){return e.apply(this,arguments)}}();return f?t.createElement("div",{className:"u-text-center u-margin-top-3"},t.createElement(Se,{color:"gray"})):t.createElement("div",{className:"profile-container"},t.createElement("form",{onSubmit:y},t.createElement("div",{className:"form-group"},t.createElement(Te,{type:"text",label:"Name",value:n,required:!0,onChange:function(e){r(e)}})),t.createElement("div",{className:"form-group"},t.createElement(Te,{type:"text",label:"Username",required:!0,value:o,onChange:function(e){l(e)}})),t.createElement("div",{className:"form-group"},t.createElement(Te,{type:"password",label:"Password",value:u,onChange:function(e){s(e)}})),t.createElement("div",{className:"form-group u-flex-text-right"},t.createElement(Re,{color:"blue",type:"submit",loading:h},"Save"))))};function et(e){return et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},et(e)}function tt(){tt=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,a){var o=t&&t.prototype instanceof d?t:d,l=Object.create(o.prototype),i=new _(a||[]);return r(l,"_invoke",{value:S(e,n,i)}),l}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function h(){}var m={};u(m,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(C([])));y&&y!==t&&n.call(y,o)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function a(r,o,l,i){var u=c(e[r],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==et(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){a("next",e,l,i)}),(function(e){a("throw",e,l,i)})):t.resolve(f).then((function(e){s.value=e,l(s)}),(function(e){return a("throw",e,l,i)}))}i(u.arg)}var o;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){a(e,n,t,r)}))}return o=o?o.then(r,r):r()}})}function S(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return{value:void 0,done:!0}}for(n.method=a,n.arg=o;;){var l=n.delegate;if(l){var i=k(l,n);if(i){if(i===f)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function k(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var a=c(r,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,f;var o=a.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function C(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:L}}function L(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,i,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,l,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var l=new w(s(t,n,r,a),o);return e.isGeneratorFunction(n)?l:l.next().then((function(e){return e.done?e.value:l.next()}))},b(g),u(g,i,"Generator"),u(g,o,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=C,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return l.type="throw",l.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],l=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var i=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(i&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(i){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(l)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function nt(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function rt(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function l(e){nt(o,r,a,l,i,"next",e)}function i(e){nt(o,r,a,l,i,"throw",e)}l(void 0)}))}}const at=function(){var e=(0,t.useContext)(it),n=e.loggedIn,r=e.setLoggedIn,a=e.section,o=e.setSection,l=K(),i=function(){var e=rt(tt().mark((function e(){return tt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,we().get("/api/user");case 3:r(!0),e.next=9;break;case 6:e.prev=6,e.t0=e.catch(0),r(!1);case 9:case"end":return e.stop()}}),e,null,[[0,6]])})));return function(){return e.apply(this,arguments)}}();(0,t.useEffect)((function(){null===n&&i()}),[n]),(0,t.useEffect)((function(){o(window.location.pathname)}),[a]);var u=function(){var e=rt(tt().mark((function e(){return tt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,we().delete("/api/logout");case 3:r(!1),o("/"),ke(Ee.success.auth.loggedOut,"success"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),ke(Ee.error.default,"error");case 11:case"end":return e.stop()}}),e,null,[[0,8]])})));return function(){return e.apply(this,arguments)}}();return t.createElement("div",{className:"header"},t.createElement("div",{className:"header__left"},t.createElement(ve,{className:"header__link header__link--home",to:"/",onClick:function(){o("/")}},"Home")),t.createElement("div",{className:"header__right"},"/login"!==a&&!n&&t.createElement(ve,{className:"header__link header__link--login",to:"/login",onClick:function(){o("/login")}},"Login"),"/new-post"!==a&&n&&t.createElement(Re,{size:"small",color:"blue",onClick:function(){o("/new-post"),l("/new-post")}},"Create a Post"),"/profile"!==a&&n&&t.createElement(ve,{to:"/profile",className:"header__link header__link--profile",onClick:function(){o("/profile")}},"Profile"),n&&t.createElement(ve,{className:"header__link header__link--logout",to:"/",onClick:function(){u()}},"Logout")))};function ot(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return lt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?lt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var it=(0,t.createContext)(null);function ut(){var e=ot((0,t.useState)(null),2),n=e[0],r=e[1],a=ot((0,t.useState)("/"),2),o=a[0],l=a[1];return t.createElement(it.Provider,{value:{loggedIn:n,setLoggedIn:r,section:o,setSection:l}},t.createElement(pe,null,t.createElement(at,null),t.createElement(ue,null,t.createElement(le,{path:"/",element:t.createElement(Oe,null)}),t.createElement(le,{path:"/login",element:t.createElement(De,null)}),t.createElement(le,{path:"/new-post",element:t.createElement(Qe,null)}),t.createElement(le,{path:"/profile",element:t.createElement(Ze,null)}))))}r.createRoot(document.getElementById("root")).render(t.createElement(ut,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFBLGNBQUNtTixHQUFNLEtBQ0xuTixFQUFBQSxjQUFDb04sR0FBTSxNQUNQcE4sRUFBQUEsY0FBQ3pELEdBQU0sS0FDTHlELEVBQUFBLGNBQUNsRSxHQUFLLENBQUM5OUMsS0FBSyxJQUFJc29CLFFBQVMwNUIsRUFBQUEsY0FBQ3FOLEdBQUksUUFDOUJyTixFQUFBQSxjQUFDbEUsR0FBSyxDQUFDOTlDLEtBQUssU0FBU3NvQixRQUFTMDVCLEVBQUFBLGNBQUNzTixHQUFLLFFBQ3BDdE4sRUFBQUEsY0FBQ2xFLEdBQUssQ0FBQzk5QyxLQUFLLFlBQVlzb0IsUUFBUzA1QixFQUFBQSxjQUFDdU4sR0FBTyxRQUN6Q3ZOLEVBQUFBLGNBQUNsRSxHQUFLLENBQUM5OUMsS0FBSyxXQUFXc29CLFFBQVMwNUIsRUFBQUEsY0FBQ3dOLEdBQU8sVUFLbEQsQ0FFYUMsRUFBQUEsV0FBb0JsdkQsU0FBU212RCxlQUFlLFNBQ3BEOWtELE9BQU9vM0MsRUFBQUEsY0FBQ2tOLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50L3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0ByZW1peC1ydW4vcm91dGVyL2Rpc3Qvcm91dGVyLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL3NyYy9yZXVzYWJsZS9JbmxpbmVMb2FkaW5nLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9zcmMvbGliL2FsZXJ0LmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9zcmMvbGliL3Rva2Vucy5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vc3JjL2NvbXBvbmVudHMvSG9tZS5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vc3JjL3JldXNhYmxlL0lucHV0LmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9zcmMvcmV1c2FibGUvQnV0dG9uLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy9Mb2dpbi5qcyIsIndlYnBhY2s6Ly9wb3N0ZXItY2xpZW50Ly4vc3JjL3JldXNhYmxlL1RleHRhcmVhLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy9OZXdQb3N0LmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy9Qcm9maWxlLmpzIiwid2VicGFjazovL3Bvc3Rlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vcG9zdGVyLWNsaWVudC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG52YXIgcGFyc2VQcm90b2NvbCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpICYmIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBmdW5jdGlvbihjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IChjYW5jZWwgJiYgY2FuY2VsLnR5cGUpID8gbmV3IENhbmNlbGVkRXJyb3IoKSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgWyAnaHR0cCcsICdodHRwcycsICdmaWxlJyBdLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcbmF4aW9zLnRvRm9ybURhdGEgPSByZXF1aXJlKCcuL2hlbHBlcnMvdG9Gb3JtRGF0YScpO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2xpYi9jb3JlL0F4aW9zRXJyb3InKTtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVEKTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi9idWlsZEZ1bGxQYXRoJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxudmFyIHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xudmFyIGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGZ1bmN0aW9uKGNvZGUpIHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IGZ1bmN0aW9uKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykge1xuICB2YXIgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvc0Vycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2JlZm9yZVJlZGlyZWN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9BeGlvc0Vycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuL3RyYW5zaXRpb25hbCcpO1xudmFyIHRvRm9ybURhdGEgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB2YXIgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXTtcblxuICAgIHZhciBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgKGlzT2JqZWN0UGF5bG9hZCAmJiBjb250ZW50VHlwZSA9PT0gJ211bHRpcGFydC9mb3JtLWRhdGEnKSkge1xuICAgICAgdmFyIF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuICAgICAgcmV0dXJuIHRvRm9ybURhdGEoaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSwgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFBheWxvYWQgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiByZXF1aXJlKCcuL2Vudi9Gb3JtRGF0YScpXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjcuMlwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5tb2R1bGUuZXhwb3J0cyA9IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIHZhciBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgRm9ybURhdGEoKTtcblxuICB2YXIgc3RhY2sgPSBbXTtcblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGQoZGF0YSwgcGFyZW50S2V5KSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoZGF0YSkgfHwgdXRpbHMuaXNBcnJheShkYXRhKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2YoZGF0YSkgIT09IC0xKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gJyArIHBhcmVudEtleSk7XG4gICAgICB9XG5cbiAgICAgIHN0YWNrLnB1c2goZGF0YSk7XG5cbiAgICAgIHV0aWxzLmZvckVhY2goZGF0YSwgZnVuY3Rpb24gZWFjaCh2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICh1dGlscy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgdmFyIGZ1bGxLZXkgPSBwYXJlbnRLZXkgPyBwYXJlbnRLZXkgKyAnLicgKyBrZXkgOiBrZXk7XG4gICAgICAgIHZhciBhcnI7XG5cbiAgICAgICAgaWYgKHZhbHVlICYmICFwYXJlbnRLZXkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgIXV0aWxzLmlzVW5kZWZpbmVkKGVsKSAmJiBmb3JtRGF0YS5hcHBlbmQoZnVsbEtleSwgY29udmVydFZhbHVlKGVsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBidWlsZCh2YWx1ZSwgZnVsbEtleSk7XG4gICAgICB9KTtcblxuICAgICAgc3RhY2sucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChwYXJlbnRLZXksIGNvbnZlcnRWYWx1ZShkYXRhKSk7XG4gICAgfVxuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Gb3JtRGF0YTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudmFyIGtpbmRPZiA9IChmdW5jdGlvbihjYWNoZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odGhpbmcpIHtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xuICB9O1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmZ1bmN0aW9uIGtpbmRPZlRlc3QodHlwZSkge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gaXNLaW5kT2YodGhpbmcpIHtcbiAgICByZXR1cm4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHRoaW5nKSB7XG4gIHZhciBwYXR0ZXJuID0gJ1tvYmplY3QgRm9ybURhdGFdJztcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8XG4gICAgdG9TdHJpbmcuY2FsbCh0aGluZykgPT09IHBhdHRlcm4gfHxcbiAgICAoaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gcGF0dGVybilcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKi9cblxuZnVuY3Rpb24gaW5oZXJpdHMoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZmlsdGVyXVxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiB0b0ZsYXRPYmplY3Qoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIpIHtcbiAgdmFyIHByb3BzO1xuICB2YXIgaTtcbiAgdmFyIHByb3A7XG4gIHZhciBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICghbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qXG4gKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICB2YXIgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0XG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSh0aGluZykge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgdmFyIGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmIChpc1VuZGVmaW5lZChpKSkgcmV0dXJuIG51bGw7XG4gIHZhciBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbnZhciBpc1R5cGVkQXJyYXkgPSAoZnVuY3Rpb24oVHlwZWRBcnJheSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTSxcbiAgaW5oZXJpdHM6IGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3Q6IHRvRmxhdE9iamVjdCxcbiAga2luZE9mOiBraW5kT2YsXG4gIGtpbmRPZlRlc3Q6IGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoOiBlbmRzV2l0aCxcbiAgdG9BcnJheTogdG9BcnJheSxcbiAgaXNUeXBlZEFycmF5OiBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3Q6IGlzRmlsZUxpc3Rcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuNy4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxuICovXG52YXIgQWN0aW9uO1xuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXG4gICAqIEEgUE9QIGluZGljYXRlcyBhIGNoYW5nZSB0byBhbiBhcmJpdHJhcnkgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2hcbiAgICogYXMgYSBiYWNrIG9yIGZvcndhcmQgbmF2aWdhdGlvbi4gSXQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIGRpcmVjdGlvbiBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgaXMgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBuZXdseSBjcmVhdGVkIGhpc3Rvcnkgb2JqZWN0cy5cbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcbmNvbnN0IFBvcFN0YXRlRXZlbnRUeXBlID0gXCJwb3BzdGF0ZVwiO1xuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVudHJpZXM7IC8vIERlY2xhcmUgc28gd2UgY2FuIGFjY2VzcyBmcm9tIGNyZWF0ZU1lbW9yeUxvY2F0aW9uXG4gIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoKGVudHJ5LCBpbmRleCkgPT4gY3JlYXRlTWVtb3J5TG9jYXRpb24oZW50cnksIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiA/IG51bGwgOiBlbnRyeS5zdGF0ZSwgaW5kZXggPT09IDAgPyBcImRlZmF1bHRcIiA6IHVuZGVmaW5lZCkpO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4KTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSwga2V5KSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiBcIiArIEpTT04uc3RyaW5naWZ5KHRvKSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRDdXJyZW50TG9jYXRpb24oKTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlVVJMKHRvKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChjcmVhdGVIcmVmKHRvKSwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICAgIH0sXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIGxldCBwYXRoID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgXCJcIixcbiAgICAgICAgc2VhcmNoOiBwYXRoLnNlYXJjaCB8fCBcIlwiLFxuICAgICAgICBoYXNoOiBwYXRoLmhhc2ggfHwgXCJcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LFxuICAgIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gaHJlZiArIFwiI1wiICsgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0bykpO1xuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVIYXNoTG9jYXRpb24sIGNyZWF0ZUhhc2hIcmVmLCB2YWxpZGF0ZUhhc2hMb2NhdGlvbiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihjdXJyZW50LCB0bywgc3RhdGUsIGtleSkge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gbnVsbDtcbiAgfVxuICBsZXQgbG9jYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCJcbiAgfSwgdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogdG8gJiYgdG8ua2V5IHx8IGtleSB8fCBjcmVhdGVLZXkoKVxuICB9KTtcbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoX3JlZikge1xuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gX3JlZjtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09IFwiP1wiKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSBcIj9cIiA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSBcIiNcIikgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09IFwiI1wiID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGhuYW1lO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBzdHJpbmcgVVJMIHBhdGggaW50byBpdHMgc2VwYXJhdGUgcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB7fTtcbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguaGFzaCA9IHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICB9XG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cbiAgICBpZiAocGF0aCkge1xuICAgICAgcGFyc2VkUGF0aC5wYXRobmFtZSA9IHBhdGg7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuZnVuY3Rpb24gZ2V0VXJsQmFzZWRIaXN0b3J5KGdldExvY2F0aW9uLCBjcmVhdGVIcmVmLCB2YWxpZGF0ZUxvY2F0aW9uLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcbiAgbGV0IGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZVxuICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2hcbiAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLlxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCBcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRJbmRleCgpIHtcbiAgICBsZXQgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHtcbiAgICAgIGlkeDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHN0YXRlLmlkeDtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVQb3AoKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBsZXQgbmV4dEluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgZGVsdGEgPSBuZXh0SW5kZXggPT0gbnVsbCA/IG51bGwgOiBuZXh0SW5kZXggLSBpbmRleDtcbiAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCkgKyAxO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuICAgIHRyeSB7XG4gICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElmIHRoZSBleGNlcHRpb24gaXMgYmVjYXVzZSBgc3RhdGVgIGNhbid0IGJlIHNlcmlhbGl6ZWQsIGxldCB0aGF0IHRocm93XG4gICAgICAvLyBvdXR3YXJkcyBqdXN0IGxpa2UgYSByZXBsYWNlIGNhbGwgd291bGQgc28gdGhlIGRldiBrbm93cyB0aGUgY2F1c2VcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL25hdi1oaXN0b3J5LWFwaXMuaHRtbCNzaGFyZWQtaGlzdG9yeS1wdXNoL3JlcGxhY2Utc3RhdGUtc3RlcHNcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N0cnVjdHVyZWQtZGF0YS5odG1sI3N0cnVjdHVyZWRzZXJpYWxpemVpbnRlcm5hbFxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmIGVycm9yLm5hbWUgPT09IFwiRGF0YUNsb25lRXJyb3JcIikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgIC8vIHdheSB0byB3YXJuIHRoZW0gYWJvdXQgaXQgc2luY2UgdGhlIHBhZ2Ugd2lsbCByZWZyZXNoLi4uXG4gICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgfVxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVVSTCh0bykge1xuICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gaXMgXCJudWxsXCIgKHRoZSBsaXRlcmFsIHN0cmluZyB2YWx1ZSkgaW4gRmlyZWZveFxuICAgIC8vIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgbm90YWJseSB3aGVuIHNlcnZpbmcgZnJvbSBhIGxvY2FsIEhUTUwgZmlsZVxuICAgIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gIT09IFwibnVsbFwiID8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGxldCBocmVmID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgICBpbnZhcmlhbnQoYmFzZSwgXCJObyB3aW5kb3cubG9jYXRpb24uKG9yaWdpbnxocmVmKSBhdmFpbGFibGUgdG8gY3JlYXRlIFVSTCBmb3IgaHJlZjogXCIgKyBocmVmKTtcbiAgICByZXR1cm4gbmV3IFVSTChocmVmLCBiYXNlKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpO1xuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBoaXN0b3J5IG9ubHkgYWNjZXB0cyBvbmUgYWN0aXZlIGxpc3RlbmVyXCIpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmKHRvKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHJlZih3aW5kb3csIHRvKTtcbiAgICB9LFxuICAgIGNyZWF0ZVVSTCxcbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgLy8gRW5jb2RlIGEgTG9jYXRpb24gdGhlIHNhbWUgd2F5IHdpbmRvdy5sb2NhdGlvbiB3b3VsZFxuICAgICAgbGV0IHVybCA9IGNyZWF0ZVVSTCh0byk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG4gICAgcHVzaCxcbiAgICByZXBsYWNlLFxuICAgIGdvKG4pIHtcbiAgICAgIHJldHVybiBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vLyNlbmRyZWdpb25cblxudmFyIFJlc3VsdFR5cGU7XG4oZnVuY3Rpb24gKFJlc3VsdFR5cGUpIHtcbiAgUmVzdWx0VHlwZVtcImRhdGFcIl0gPSBcImRhdGFcIjtcbiAgUmVzdWx0VHlwZVtcImRlZmVycmVkXCJdID0gXCJkZWZlcnJlZFwiO1xuICBSZXN1bHRUeXBlW1wicmVkaXJlY3RcIl0gPSBcInJlZGlyZWN0XCI7XG4gIFJlc3VsdFR5cGVbXCJlcnJvclwiXSA9IFwiZXJyb3JcIjtcbn0pKFJlc3VsdFR5cGUgfHwgKFJlc3VsdFR5cGUgPSB7fSkpO1xuY29uc3QgaW1tdXRhYmxlUm91dGVLZXlzID0gbmV3IFNldChbXCJsYXp5XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcInBhdGhcIiwgXCJpZFwiLCBcImluZGV4XCIsIFwiY2hpbGRyZW5cIl0pO1xuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn1cbi8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSBzbyB3ZSBhcmUgd29ya2luZ1xuLy8gc29sZWx5IHdpdGggQWdub3N0aWNEYXRhUm91dGVPYmplY3QncyB3aXRoaW4gdGhlIFJvdXRlclxuZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgcGFyZW50UGF0aCwgbWFuaWZlc3QpIHtcbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBbXTtcbiAgfVxuICBpZiAobWFuaWZlc3QgPT09IHZvaWQgMCkge1xuICAgIG1hbmlmZXN0ID0ge307XG4gIH1cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghbWFuaWZlc3RbaWRdLCBcIkZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFxcXCJcIiArIGlkICsgXCJcXFwiLiAgUm91dGUgXCIgKyBcImlkJ3MgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUgd2l0aGluIERhdGEgUm91dGVyIHVzYWdlc1wiKTtcbiAgICBpZiAoaXNJbmRleFJvdXRlKHJvdXRlKSkge1xuICAgICAgbGV0IGluZGV4Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksIHtcbiAgICAgICAgaWRcbiAgICAgIH0pO1xuICAgICAgbWFuaWZlc3RbaWRdID0gaW5kZXhSb3V0ZTtcbiAgICAgIHJldHVybiBpbmRleFJvdXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGF0aE9yTGF5b3V0Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgbWFuaWZlc3RbaWRdID0gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgICBpZiAocm91dGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcGF0aE9yTGF5b3V0Um91dGUuY2hpbGRyZW4gPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHRyZWVQYXRoLCBtYW5pZmVzdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlbmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCBsb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgbGV0IHBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIiwgYmFzZW5hbWUpO1xuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG4gIGZvciAobGV0IGkgPSAwOyBtYXRjaGVzID09IG51bGwgJiYgaSA8IGJyYW5jaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgbWF0Y2hlcyA9IG1hdGNoUm91dGVCcmFuY2goYnJhbmNoZXNbaV0sXG4gICAgLy8gSW5jb21pbmcgcGF0aG5hbWVzIGFyZSBnZW5lcmFsbHkgZW5jb2RlZCBmcm9tIGVpdGhlciB3aW5kb3cubG9jYXRpb25cbiAgICAvLyBvciBmcm9tIHJvdXRlci5uYXZpZ2F0ZSwgYnV0IHdlIHdhbnQgdG8gbWF0Y2ggYWdhaW5zdCB0aGUgdW5lbmNvZGVkXG4gICAgLy8gcGF0aHMgaW4gdGhlIHJvdXRlIGRlZmluaXRpb25zLiAgTWVtb3J5IHJvdXRlciBsb2NhdGlvbnMgd29uJ3QgYmVcbiAgICAvLyBlbmNvZGVkIGhlcmUgYnV0IHRoZXJlIGFsc28gc2hvdWxkbid0IGJlIGFueXRoaW5nIHRvIGRlY29kZSBzbyB0aGlzXG4gICAgLy8gc2hvdWxkIGJlIGEgc2FmZSBvcGVyYXRpb24uICBUaGlzIGF2b2lkcyBuZWVkaW5nIG1hdGNoUm91dGVzIHRvIGJlXG4gICAgLy8gaGlzdG9yeS1hd2FyZS5cbiAgICBzYWZlbHlEZWNvZGVVUkkocGF0aG5hbWUpKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRzTWV0YSA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50c01ldGEgPSBbXTtcbiAgfVxuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFwiXCI7XG4gIH1cbiAgbGV0IGZsYXR0ZW5Sb3V0ZSA9IChyb3V0ZSwgaW5kZXgsIHJlbGF0aXZlUGF0aCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByZWxhdGl2ZVBhdGggPT09IHVuZGVmaW5lZCA/IHJvdXRlLnBhdGggfHwgXCJcIiA6IHJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIGludmFyaWFudChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuICAgIGxldCBwYXRoID0gam9pblBhdGhzKFtwYXJlbnRQYXRoLCBtZXRhLnJlbGF0aXZlUGF0aF0pO1xuICAgIGxldCByb3V0ZXNNZXRhID0gcGFyZW50c01ldGEuY29uY2F0KG1ldGEpO1xuICAgIC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH1cbiAgICAvLyBSb3V0ZXMgd2l0aG91dCBhIHBhdGggc2hvdWxkbid0IGV2ZXIgbWF0Y2ggYnkgdGhlbXNlbHZlcyB1bmxlc3MgdGhleSBhcmVcbiAgICAvLyBpbmRleCByb3V0ZXMsIHNvIGRvbid0IGFkZCB0aGVtIHRvIHRoZSBsaXN0IG9mIHBvc3NpYmxlIGJyYW5jaGVzLlxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJyYW5jaGVzLnB1c2goe1xuICAgICAgcGF0aCxcbiAgICAgIHNjb3JlOiBjb21wdXRlU2NvcmUocGF0aCwgcm91dGUuaW5kZXgpLFxuICAgICAgcm91dGVzTWV0YVxuICAgIH0pO1xuICB9O1xuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9yb3V0ZSRwYXRoO1xuICAgIC8vIGNvYXJzZS1ncmFpbiBjaGVjayBmb3Igb3B0aW9uYWwgcGFyYW1zXG4gICAgaWYgKHJvdXRlLnBhdGggPT09IFwiXCIgfHwgISgoX3JvdXRlJHBhdGggPSByb3V0ZS5wYXRoKSAhPSBudWxsICYmIF9yb3V0ZSRwYXRoLmluY2x1ZGVzKFwiP1wiKSkpIHtcbiAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBleHBsb2RlZCBvZiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyb3V0ZS5wYXRoKSkge1xuICAgICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4LCBleHBsb2RlZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuLyoqXG4gKiBDb21wdXRlcyBhbGwgY29tYmluYXRpb25zIG9mIG9wdGlvbmFsIHBhdGggc2VnbWVudHMgZm9yIGEgZ2l2ZW4gcGF0aCxcbiAqIGV4Y2x1ZGluZyBjb21iaW5hdGlvbnMgdGhhdCBhcmUgYW1iaWd1b3VzIGFuZCBvZiBsb3dlciBwcmlvcml0eS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYC9vbmUvOnR3bz8vdGhyZWUvOmZvdXI/LzpmaXZlP2AgZXhwbG9kZXMgdG86XG4gKiAtIGAvb25lL3RocmVlYFxuICogLSBgL29uZS86dHdvL3RocmVlYFxuICogLSBgL29uZS90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyLzpmaXZlYFxuICovXG5mdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7XG4gIC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcbiAgbGV0IGlzT3B0aW9uYWwgPSBmaXJzdC5lbmRzV2l0aChcIj9cIik7XG4gIC8vIENvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWlyZWQgc2VnbWVudDogYGZvbz9gIC0+IGBmb29gXG4gIGxldCByZXF1aXJlZCA9IGZpcnN0LnJlcGxhY2UoL1xcPyQvLCBcIlwiKTtcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW50ZXByZXQgZW1wdHkgc3RyaW5nIGFzIG9taXR0aW5nIGFuIG9wdGlvbmFsIHNlZ21lbnRcbiAgICAvLyBgW1wib25lXCIsIFwiXCIsIFwidGhyZWVcIl1gIGNvcnJlc3BvbmRzIHRvIG9taXR0aW5nIGA6dHdvYCBmcm9tIGAvb25lLzp0d28/L3RocmVlYCAtPiBgL29uZS90aHJlZWBcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFtyZXF1aXJlZCwgXCJcIl0gOiBbcmVxdWlyZWRdO1xuICB9XG4gIGxldCByZXN0RXhwbG9kZWQgPSBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyZXN0LmpvaW4oXCIvXCIpKTtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICAvLyBBbGwgY2hpbGQgcGF0aHMgd2l0aCB0aGUgcHJlZml4LiAgRG8gdGhpcyBmb3IgYWxsIGNoaWxkcmVuIGJlZm9yZSB0aGVcbiAgLy8gb3B0aW9uYWwgdmVyc2lvbiBmb3IgYWxsIGNoaWxkcmVuIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlcyBfZWFybGllcl9cbiAgLy8gdGhlbiAvOm9uZS4gIEJ5IGFsd2F5cyBpbmNsdWRpbmcgdGhlIHBhcmVudCBhcyByZXF1aXJlZCBfZm9yIGFsbCBjaGlsZHJlbl9cbiAgLy8gZmlyc3QsIHdlIGF2b2lkIHRoaXMgaXNzdWVcbiAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkLm1hcChzdWJwYXRoID0+IHN1YnBhdGggPT09IFwiXCIgPyByZXF1aXJlZCA6IFtyZXF1aXJlZCwgc3VicGF0aF0uam9pbihcIi9cIikpKTtcbiAgLy8gVGhlbiBpZiB0aGlzIGlzIGFuIG9wdGlvbmFsIHZhbHVlLCBhZGQgYWxsIGNoaWxkIHZlcnNpb25zIHdpdGhvdXRcbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9XG4gIC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcbiAgcmV0dXJuIHJlc3VsdC5tYXAoZXhwbG9kZWQgPT4gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSAmJiBleHBsb2RlZCA9PT0gXCJcIiA/IFwiL1wiIDogZXhwbG9kZWQpO1xufVxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5jb25zdCBpc1NwbGF0ID0gcyA9PiBzID09PSBcIipcIjtcbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG4gIGlmIChpbmRleCkge1xuICAgIGluaXRpYWxTY29yZSArPSBpbmRleFJvdXRlVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID9cbiAgLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDpcbiAgLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2goYnJhbmNoLCBwYXRobmFtZSkge1xuICBsZXQge1xuICAgIHJvdXRlc01ldGFcbiAgfSA9IGJyYW5jaDtcbiAgbGV0IG1hdGNoZWRQYXJhbXMgPSB7fTtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCB3aXRoIHBhcmFtcyBpbnRlcnBvbGF0ZWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9nZW5lcmF0ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChvcmlnaW5hbFBhdGgsIHBhcmFtcykge1xuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuICBsZXQgcGF0aCA9IG9yaWdpbmFsUGF0aDtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpICYmIHBhdGggIT09IFwiKlwiICYmICFwYXRoLmVuZHNXaXRoKFwiLypcIikpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIik7XG4gIH1cbiAgLy8gZW5zdXJlIGAvYCBpcyBhZGRlZCBhdCB0aGUgYmVnaW5uaW5nIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlXG4gIGNvbnN0IHByZWZpeCA9IHBhdGguc3RhcnRzV2l0aChcIi9cIikgPyBcIi9cIiA6IFwiXCI7XG4gIGNvbnN0IHN0cmluZ2lmeSA9IHAgPT4gcCA9PSBudWxsID8gXCJcIiA6IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8gcCA6IFN0cmluZyhwKTtcbiAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KC9cXC8rLykubWFwKChzZWdtZW50LCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICBjb25zdCBpc0xhc3RTZWdtZW50ID0gaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgLy8gb25seSBhcHBseSB0aGUgc3BsYXQgaWYgaXQncyB0aGUgbGFzdCBzZWdtZW50XG4gICAgaWYgKGlzTGFzdFNlZ21lbnQgJiYgc2VnbWVudCA9PT0gXCIqXCIpIHtcbiAgICAgIGNvbnN0IHN0YXIgPSBcIipcIjtcbiAgICAgIC8vIEFwcGx5IHRoZSBzcGxhdFxuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbXNbc3Rhcl0pO1xuICAgIH1cbiAgICBjb25zdCBrZXlNYXRjaCA9IHNlZ21lbnQubWF0Y2goL146KFxcdyspKFxcPz8pJC8pO1xuICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgY29uc3QgWywga2V5LCBvcHRpb25hbF0gPSBrZXlNYXRjaDtcbiAgICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuICAgICAgaW52YXJpYW50KG9wdGlvbmFsID09PSBcIj9cIiB8fCBwYXJhbSAhPSBudWxsLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnkocGFyYW0pO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHNcbiAgICByZXR1cm4gc2VnbWVudC5yZXBsYWNlKC9cXD8kL2csIFwiXCIpO1xuICB9KVxuICAvLyBSZW1vdmUgZW1wdHkgc2VnbWVudHNcbiAgLmZpbHRlcihzZWdtZW50ID0+ICEhc2VnbWVudCk7XG4gIHJldHVybiBwcmVmaXggKyBzZWdtZW50cy5qb2luKFwiL1wiKTtcbn1cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHtcbiAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgIGVuZDogdHJ1ZVxuICAgIH07XG4gIH1cbiAgbGV0IFttYXRjaGVyLCBwYXJhbU5hbWVzXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IHBhcmFtTmFtZXMucmVkdWNlKChtZW1vLCBwYXJhbU5hbWUsIGluZGV4KSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgIH1cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoLCBjYXNlU2Vuc2l0aXZlLCBlbmQpIHtcbiAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgfVxuICBpZiAoZW5kID09PSB2b2lkIDApIHtcbiAgICBlbmQgPSB0cnVlO1xuICB9XG4gIHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIi8oW15cXFxcL10rKVwiO1xuICB9KTtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKFwiKlwiKTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIGlmIChlbmQpIHtcbiAgICAvLyBXaGVuIG1hdGNoaW5nIHRvIHRoZSBlbmQsIGlnbm9yZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgcmVnZXhwU291cmNlICs9IFwiXFxcXC8qJFwiO1xuICB9IGVsc2UgaWYgKHBhdGggIT09IFwiXCIgJiYgcGF0aCAhPT0gXCIvXCIpIHtcbiAgICAvLyBJZiBvdXIgcGF0aCBpcyBub24tZW1wdHkgYW5kIGNvbnRhaW5zIGFueXRoaW5nIGJleW9uZCBhbiBpbml0aWFsIHNsYXNoLFxuICAgIC8vIHRoZW4gd2UgaGF2ZSBfc29tZV8gZm9ybSBvZiBwYXRoIGluIG91ciByZWdleCBzbyB3ZSBzaG91bGQgZXhwZWN0IHRvXG4gICAgLy8gbWF0Y2ggb25seSBpZiB3ZSBmaW5kIHRoZSBlbmQgb2YgdGhpcyBwYXRoIHNlZ21lbnQuICBMb29rIGZvciBhbiBvcHRpb25hbFxuICAgIC8vIG5vbi1jYXB0dXJlZCB0cmFpbGluZyBzbGFzaCAodG8gbWF0Y2ggYSBwb3J0aW9uIG9mIHRoZSBVUkwpIG9yIHRoZSBlbmRcbiAgICAvLyBvZiB0aGUgcGF0aCAoaWYgd2UndmUgbWF0Y2hlZCB0byB0aGUgZW5kKS4gIFdlIHVzZWQgdG8gZG8gdGhpcyB3aXRoIGFcbiAgICAvLyB3b3JkIGJvdW5kYXJ5IGJ1dCB0aGF0IGdpdmVzIGZhbHNlIHBvc2l0aXZlcyBvbiByb3V0ZXMgbGlrZVxuICAgIC8vIC91c2VyLXByZWZlcmVuY2VzIHNpbmNlIGAtYCBjb3VudHMgYXMgYSB3b3JkIGJvdW5kYXJ5LlxuICAgIHJlZ2V4cFNvdXJjZSArPSBcIig/Oig/PVxcXFwvfCQpKVwiO1xuICB9IGVsc2UgO1xuICBsZXQgbWF0Y2hlciA9IG5ldyBSZWdFeHAocmVnZXhwU291cmNlLCBjYXNlU2Vuc2l0aXZlID8gdW5kZWZpbmVkIDogXCJpXCIpO1xuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtTmFtZXNdO1xufVxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLCBwYXJhbU5hbWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSB2YWx1ZSBmb3IgdGhlIFVSTCBwYXJhbSBcXFwiXCIgKyBwYXJhbU5hbWUgKyBcIlxcXCIgd2lsbCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlXCIgKyAoXCIgdGhlIHN0cmluZyBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBpcyBhIG1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseVwiKSArIChcIiBkdWUgdG8gYSBiYWQgcGVyY2VudCBlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gV2Ugd2FudCB0byBsZWF2ZSB0cmFpbGluZyBzbGFzaCBiZWhhdmlvciBpbiB0aGUgdXNlcidzIGNvbnRyb2wsIHNvIGlmIHRoZXlcbiAgLy8gc3BlY2lmeSBhIGJhc2VuYW1lIHdpdGggYSB0cmFpbGluZyBzbGFzaCwgd2Ugc2hvdWxkIHN1cHBvcnQgaXRcbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwYXRobmFtZS5zbGljZShzdGFydEluZGV4KSB8fCBcIi9cIjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL3Jlc29sdmUtcGF0aFxuICovXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihjaGFyLCBmaWVsZCwgZGVzdCwgcGF0aCkge1xuICByZXR1cm4gXCJDYW5ub3QgaW5jbHVkZSBhICdcIiArIGNoYXIgKyBcIicgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIFwiICsgKFwiYHRvLlwiICsgZmllbGQgKyBcImAgZmllbGQgW1wiICsgSlNPTi5zdHJpbmdpZnkocGF0aCkgKyBcIl0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBcIikgKyAoXCJgdG8uXCIgKyBkZXN0ICsgXCJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIFwiKSArIFwiYSBzdHJpbmcgaW4gPExpbmsgdG89XFxcIi4uLlxcXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5cIjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIG1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IGluZGV4ID09PSAwIHx8IG1hdGNoLnJvdXRlLnBhdGggJiYgbWF0Y2gucm91dGUucGF0aC5sZW5ndGggPiAwKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSwgaXNQYXRoUmVsYXRpdmUpIHtcbiAgaWYgKGlzUGF0aFJlbGF0aXZlID09PSB2b2lkIDApIHtcbiAgICBpc1BhdGhSZWxhdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGxldCB0bztcbiAgaWYgKHR5cGVvZiB0b0FyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRvID0gcGFyc2VQYXRoKHRvQXJnKTtcbiAgfSBlbHNlIHtcbiAgICB0byA9IF9leHRlbmRzKHt9LCB0b0FyZyk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCI/XCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiP1wiLCBcInBhdGhuYW1lXCIsIFwic2VhcmNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInBhdGhuYW1lXCIsIFwiaGFzaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8uc2VhcmNoIHx8ICF0by5zZWFyY2guaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInNlYXJjaFwiLCBcImhhc2hcIiwgdG8pKTtcbiAgfVxuICBsZXQgaXNFbXB0eVBhdGggPSB0b0FyZyA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIjtcbiAgbGV0IHRvUGF0aG5hbWUgPSBpc0VtcHR5UGF0aCA/IFwiL1wiIDogdG8ucGF0aG5hbWU7XG4gIGxldCBmcm9tO1xuICAvLyBSb3V0aW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBhdGhuYW1lIGlmIGV4cGxpY2l0bHkgcmVxdWVzdGVkLlxuICAvL1xuICAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG4gIGlmIChpc1BhdGhSZWxhdGl2ZSB8fCB0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcbiAgICBpZiAodG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgICAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuICAgICAgdG8ucGF0aG5hbWUgPSB0b1NlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSBcIi4uXCIgc2VnbWVudHMgdGhhbiBwYXJlbnQgcm91dGVzLCByZXNvbHZlIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHJvb3QgLyBVUkwuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pO1xuICAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuICBsZXQgaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoID0gdG9QYXRobmFtZSAmJiB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgLy8gT3IgaWYgdGhpcyB3YXMgYSBsaW5rIHRvIHRoZSBjdXJyZW50IHBhdGggd2hpY2ggaGFzIGEgdHJhaWxpbmcgc2xhc2hcbiAgbGV0IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoID0gKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG8pIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuY29uc3QganNvbiA9IGZ1bmN0aW9uIGpzb24oZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG4gIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG5jbGFzcyBBYm9ydGVkRGVmZXJyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBEZWZlcnJlZERhdGEge1xuICBjb25zdHJ1Y3RvcihkYXRhLCByZXNwb25zZUluaXQpIHtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5kZWZlcnJlZEtleXMgPSBbXTtcbiAgICBpbnZhcmlhbnQoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSwgXCJkZWZlcigpIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzXCIpO1xuICAgIC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuICAgIGxldCByZWplY3Q7XG4gICAgdGhpcy5hYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBvbkFib3J0ID0gKCkgPT4gcmVqZWN0KG5ldyBBYm9ydGVkRGVmZXJyZWRFcnJvcihcIkRlZmVycmVkIGRhdGEgYWJvcnRlZFwiKSk7XG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5jb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5kYXRhID0gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChhY2MsIF9yZWYpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB0aGlzLnRyYWNrUHJvbWlzZShrZXksIHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIEFsbCBpbmNvbWluZyB2YWx1ZXMgd2VyZSByZXNvbHZlZFxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuICB0cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5kZWZlcnJlZEtleXMucHVzaChrZXkpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuYWRkKGtleSk7XG4gICAgLy8gV2Ugc3RvcmUgYSBsaXR0bGUgd3JhcHBlciBwcm9taXNlIHRoYXQgd2lsbCBiZSBleHRlbmRlZCB3aXRoXG4gICAgLy8gX2RhdGEvX2Vycm9yIHByb3BzIHVwb24gcmVzb2x2ZS9yZWplY3RcbiAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmFjZShbdmFsdWUsIHRoaXMuYWJvcnRQcm9taXNlXSkudGhlbihkYXRhID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBudWxsLCBkYXRhKSwgZXJyb3IgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yKSk7XG4gICAgLy8gUmVnaXN0ZXIgcmVqZWN0aW9uIGxpc3RlbmVycyB0byBhdm9pZCB1bmNhdWdodCBwcm9taXNlIHJlamVjdGlvbnMgb25cbiAgICAvLyBlcnJvcnMgb3IgYWJvcnRlZCBkZWZlcnJlZCB2YWx1ZXNcbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHt9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoa2V5KTtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBOb3RoaW5nIGxlZnQgdG8gYWJvcnQhXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBlbWl0KGFib3J0ZWQsIHNldHRsZWRLZXkpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKGFib3J0ZWQsIHNldHRsZWRLZXkpKTtcbiAgfVxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrKSk7XG4gICAgdGhpcy5lbWl0KHRydWUpO1xuICB9XG4gIGFzeW5jIHJlc29sdmVEYXRhKHNpZ25hbCkge1xuICAgIGxldCBhYm9ydGVkID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICBhYm9ydGVkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICAgICAgaWYgKGFib3J0ZWQgfHwgdGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXNvbHZlKGFib3J0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cbiAgZ2V0IGRvbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ0tleXNTZXQuc2l6ZSA9PT0gMDtcbiAgfVxuICBnZXQgdW53cmFwcGVkRGF0YSgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5kYXRhICE9PSBudWxsICYmIHRoaXMuZG9uZSwgXCJDYW4gb25seSB1bndyYXAgZGF0YSBvbiBpbml0aWFsaXplZCBhbmQgc2V0dGxlZCBkZWZlcnJlZHNcIik7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkucmVkdWNlKChhY2MsIF9yZWYyKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjI7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICB9XG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxufVxuZnVuY3Rpb24gaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlICYmIHZhbHVlLl90cmFja2VkID09PSB0cnVlO1xufVxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG4gIHJldHVybiB2YWx1ZS5fZGF0YTtcbn1cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEsIHJlc3BvbnNlSW5pdCk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuY29uc3QgcmVkaXJlY3QgPSBmdW5jdGlvbiByZWRpcmVjdCh1cmwsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSAzMDI7XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG4gIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVzcG9uc2VJbml0ID0ge1xuICAgICAgc3RhdHVzOiByZXNwb25zZUluaXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZUluaXQuc3RhdHVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVzcG9uc2VJbml0LnN0YXR1cyA9IDMwMjtcbiAgfVxuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcbiAgaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCB1cmwpO1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKiBVdGlsaXR5IGNsYXNzIHdlIHVzZSB0byBob2xkIGF1dG8tdW53cmFwcGVkIDR4eC81eHggUmVzcG9uc2UgYm9kaWVzXG4gKi9cbmNsYXNzIEVycm9yUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGludGVybmFsKSB7XG4gICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHtcbiAgICAgIGludGVybmFsID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9IHN0YXR1c1RleHQgfHwgXCJcIjtcbiAgICB0aGlzLmludGVybmFsID0gaW50ZXJuYWw7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgdGhpcy5lcnJvciA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3duIGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5mdW5jdGlvbiBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikge1xuICByZXR1cm4gZXJyb3IgIT0gbnVsbCAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBlcnJvci5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBlcnJvci5pbnRlcm5hbCA9PT0gXCJib29sZWFuXCIgJiYgXCJkYXRhXCIgaW4gZXJyb3I7XG59XG5cbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzQXJyID0gW1wicG9zdFwiLCBcInB1dFwiLCBcInBhdGNoXCIsIFwiZGVsZXRlXCJdO1xuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkTXV0YXRpb25NZXRob2RzQXJyKTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIgPSBbXCJnZXRcIiwgLi4udmFsaWRNdXRhdGlvbk1ldGhvZHNBcnJdO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kcyA9IG5ldyBTZXQodmFsaWRSZXF1ZXN0TWV0aG9kc0Fycik7XG5jb25zdCByZWRpcmVjdFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdKTtcbmNvbnN0IHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwNywgMzA4XSk7XG5jb25zdCBJRExFX05BVklHQVRJT04gPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgbG9jYXRpb246IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gIGpzb246IHVuZGVmaW5lZCxcbiAgdGV4dDogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9GRVRDSEVSID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGRhdGE6IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gIGpzb246IHVuZGVmaW5lZCxcbiAgdGV4dDogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9CTE9DS0VSID0ge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIixcbiAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICByZXNldDogdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkXG59O1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuY29uc3QgZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gIGhhc0Vycm9yQm91bmRhcnk6IEJvb2xlYW4ocm91dGUuaGFzRXJyb3JCb3VuZGFyeSlcbn0pO1xuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVJvdXRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogQ3JlYXRlIGEgcm91dGVyIGFuZCBsaXN0ZW4gdG8gaGlzdG9yeSBQT1AgbmF2aWdhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVyKGluaXQpIHtcbiAgY29uc3Qgcm91dGVyV2luZG93ID0gaW5pdC53aW5kb3cgPyBpbml0LndpbmRvdyA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiByb3V0ZXJXaW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4gIGNvbnN0IGlzU2VydmVyID0gIWlzQnJvd3NlcjtcbiAgaW52YXJpYW50KGluaXQucm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlUm91dGVyXCIpO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAoaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBpbml0Lm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChpbml0LmRldGVjdEVycm9yQm91bmRhcnkpIHtcbiAgICAvLyBJZiB0aGV5IGFyZSBzdGlsbCB1c2luZyB0aGUgZGVwcmVjYXRlZCB2ZXJzaW9uLCB3cmFwIGl0IHdpdGggdGhlIG5ldyBBUElcbiAgICBsZXQgZGV0ZWN0RXJyb3JCb3VuZGFyeSA9IGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeTtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZGV0ZWN0RXJyb3JCb3VuZGFyeShyb3V0ZSlcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9XG4gIC8vIFJvdXRlcyBrZXllZCBieSBJRFxuICBsZXQgbWFuaWZlc3QgPSB7fTtcbiAgLy8gUm91dGVzIGluIHRyZWUgZm9ybWF0IGZvciBtYXRjaGluZ1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMoaW5pdC5yb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIGxldCBpbkZsaWdodERhdGFSb3V0ZXM7XG4gIGxldCBiYXNlbmFtZSA9IGluaXQuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIC8vIENvbmZpZyBkcml2ZW4gYmVoYXZpb3IgZmxhZ3NcbiAgbGV0IGZ1dHVyZSA9IF9leHRlbmRzKHtcbiAgICB2N19ub3JtYWxpemVGb3JtTWV0aG9kOiBmYWxzZSxcbiAgICB2N19wcmVwZW5kQmFzZW5hbWU6IGZhbHNlXG4gIH0sIGluaXQuZnV0dXJlKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdFxuICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnMgPSBudWxsO1xuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZVxuICAgIH0pO1xuICAgIGxldCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcm91dGVcbiAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuICBsZXQgaW5pdGlhbGl6ZWQgPVxuICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gIC8vIGZ1bmN0aW9ucyBhcm91bmQgc3RpbGwgdGhlbiB3ZSdsbCBuZWVkIHRvIHJ1biB0aGVtIGluIGluaXRpYWxpemUoKVxuICAhaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubGF6eSkgJiYgKFxuICAvLyBBbmQgd2UgaGF2ZSB0byBlaXRoZXIgaGF2ZSBubyBsb2FkZXJzIG9yIGhhdmUgYmVlbiBwcm92aWRlZCBoeWRyYXRpb25EYXRhXG4gICFpbml0aWFsTWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5sb2FkZXIpIHx8IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsKTtcbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07XG4gIC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuICBsZXQgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyO1xuICAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdG9yKClcbiAgLy8gIC0gWC1SZW1peC1SZXZhbGlkYXRlIChmcm9tIHJlZGlyZWN0KVxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcbiAgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdFxuICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZFxuICAvLyBuYXZpZ2F0aW9uXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9IC0xO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCBkYXRhIHJlbG9hZHMgYXMgYSByZXN1bHQgb2YgdGhlaXIgYWN0aW9uc1xuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpO1xuICAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcCgpO1xuICAvLyBTdG9yZSBEZWZlcnJlZERhdGEgaW5zdGFuY2VzIGZvciBhY3RpdmUgcm91dGUgbWF0Y2hlcy4gIFdoZW4gYVxuICAvLyByb3V0ZSBsb2FkZXIgcmV0dXJucyBkZWZlcigpIHdlIHN0aWNrIG9uZSBpbiBoZXJlLiAgVGhlbiwgd2hlbiBhIG5lc3RlZFxuICAvLyBwcm9taXNlIHJlc29sdmVzIHdlIHVwZGF0ZSBsb2FkZXJEYXRhLiAgSWYgYSBuZXcgbmF2aWdhdGlvbiBzdGFydHMgd2VcbiAgLy8gY2FuY2VsIGFjdGl2ZSBkZWZlcnJlZHMgZm9yIGVsaW1pbmF0ZWQgcm91dGVzLlxuICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAvLyBTdG9yZSBibG9ja2VyIGZ1bmN0aW9ucyBpbiBhIHNlcGFyYXRlIE1hcCBvdXRzaWRlIG9mIHJvdXRlciBzdGF0ZSBzaW5jZVxuICAvLyB3ZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBVSSBzdGF0ZSBpZiB0aGV5IGNoYW5nZVxuICBsZXQgYmxvY2tlckZ1bmN0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gRmxhZyB0byBpZ25vcmUgdGhlIG5leHQgaGlzdG9yeSB1cGRhdGUsIHNvIHdlIGNhbiByZXZlcnQgdGhlIFVSTCBjaGFuZ2Ugb25cbiAgLy8gYSBQT1AgbmF2aWdhdGlvbiB0aGF0IHdhcyBibG9ja2VkIGJ5IHRoZSB1c2VyIHdpdGhvdXQgdG91Y2hpbmcgcm91dGVyIHN0YXRlXG4gIGxldCBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAvLyBJbml0aWFsaXplIHRoZSByb3V0ZXIsIGFsbCBzaWRlIGVmZmVjdHMgc2hvdWxkIGJlIGtpY2tlZCBvZmYgZnJvbSBoZXJlLlxuICAvLyBJbXBsZW1lbnRlZCBhcyBhIEZsdWVudCBBUEkgZm9yIGVhc2Ugb2Y6XG4gIC8vICAgbGV0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcihpbml0KS5pbml0aWFsaXplKCk7XG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlXG4gICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhY3Rpb246IGhpc3RvcnlBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSA9IF9yZWY7XG4gICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgIC8vIGJsb2NrZWQgUE9QIG5hdmlnYXRpb25cbiAgICAgIGlmIChpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSkge1xuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3YXJuaW5nKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA9PT0gMCB8fCBkZWx0YSAhPSBudWxsLCBcIllvdSBhcmUgdHJ5aW5nIHRvIHVzZSBhIGJsb2NrZXIgb24gYSBQT1AgbmF2aWdhdGlvbiB0byBhIGxvY2F0aW9uIFwiICsgXCJ0aGF0IHdhcyBub3QgY3JlYXRlZCBieSBAcmVtaXgtcnVuL3JvdXRlci4gVGhpcyB3aWxsIGZhaWwgc2lsZW50bHkgaW4gXCIgKyBcInByb2R1Y3Rpb24uIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSB0aGUgcm91dGVyIFwiICsgXCJ2aWEgYHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZWAvYHdpbmRvdy5sb2NhdGlvbi5oYXNoYCBpbnN0ZWFkIG9mIHVzaW5nIFwiICsgXCJyb3V0ZXIgbmF2aWdhdGlvbiBBUElzLiAgVGhpcyBjYW4gYWxzbyBoYXBwZW4gaWYgeW91IGFyZSB1c2luZyBcIiArIFwiY3JlYXRlSGFzaFJvdXRlciBhbmQgdGhlIHVzZXIgbWFudWFsbHkgY2hhbmdlcyB0aGUgVVJMLlwiKTtcbiAgICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaGlzdG9yeUFjdGlvblxuICAgICAgfSk7XG4gICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIFVSTCB0byBtYXRjaCB0aGUgY3VycmVudCBVSSwgYnV0IGRvbid0IHVwZGF0ZSByb3V0ZXIgc3RhdGVcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSB0cnVlO1xuICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbG9jYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gUmUtZG8gdGhlIHNhbWUgUE9QIG5hdmlnYXRpb24gd2UganVzdCBibG9ja2VkXG4gICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgICBibG9ja2Vyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbik7XG4gICAgfSk7XG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIC8vIE5vdGUgd2UgZG9uJ3QgZG8gYW55IGhhbmRsaW5nIG9mIGxhenkgaGVyZS4gIEZvciBTUEEncyBpdCdsbCBnZXQgaGFuZGxlZFxuICAgIC8vIGluIHRoZSBub3JtYWwgbmF2aWdhdGlvbiBmbG93LiAgRm9yIFNTUiBpdCdzIGV4cGVjdGVkIHRoYXQgbGF6eSBtb2R1bGVzIGFyZVxuICAgIC8vIHJlc29sdmVkIHByaW9yIHRvIHJvdXRlciBjcmVhdGlvbiBzaW5jZSB3ZSBjYW4ndCBnbyBpbnRvIGEgZmFsbGJhY2tFbGVtZW50XG4gICAgLy8gVUkgZm9yIFNTUidkIGFwcHNcbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG4gIC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuICBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh1bmxpc3Rlbkhpc3RvcnkpIHtcbiAgICAgIHVubGlzdGVuSGlzdG9yeSgpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9XG4gIC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShuZXdTdGF0ZSkge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoc3RhdGUpKTtcbiAgfVxuICAvLyBDb21wbGV0ZSBhIG5hdmlnYXRpb24gcmV0dXJuaW5nIHRoZSBzdGF0ZS5uYXZpZ2F0aW9uIGJhY2sgdG8gdGhlIElETEVfTkFWSUdBVElPTlxuICAvLyBhbmQgc2V0dGluZyBzdGF0ZS5baGlzdG9yeUFjdGlvbi9sb2NhdGlvbi9tYXRjaGVzXSB0byB0aGUgbmV3IHJvdXRlLlxuICAvLyAtIExvY2F0aW9uIGlzIGEgcmVxdWlyZWQgcGFyYW1cbiAgLy8gLSBOYXZpZ2F0aW9uIHdpbGwgYWx3YXlzIGJlIHNldCB0byBJRExFX05BVklHQVRJT05cbiAgLy8gLSBDYW4gcGFzcyBhbnkgb3RoZXIgc3RhdGUgaW4gbmV3U3RhdGVcbiAgZnVuY3Rpb24gY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZSkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG4gICAgLy8gRGVkdWNlIGlmIHdlJ3JlIGluIGEgbG9hZGluZy9hY3Rpb25SZWxvYWQgc3RhdGU6XG4gICAgLy8gLSBXZSBoYXZlIGNvbW1pdHRlZCBhY3Rpb25EYXRhIGluIHRoZSBzdG9yZVxuICAgIC8vIC0gVGhlIGN1cnJlbnQgbmF2aWdhdGlvbiB3YXMgYSBtdXRhdGlvbiBzdWJtaXNzaW9uXG4gICAgLy8gLSBXZSdyZSBwYXN0IHRoZSBzdWJtaXR0aW5nIHN0YXRlIGFuZCBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlXG4gICAgLy8gLSBUaGUgbG9jYXRpb24gYmVpbmcgbG9hZGVkIGlzIG5vdCB0aGUgcmVzdWx0IG9mIGEgcmVkaXJlY3RcbiAgICBsZXQgaXNBY3Rpb25SZWxvYWQgPSBzdGF0ZS5hY3Rpb25EYXRhICE9IG51bGwgJiYgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmICgoX2xvY2F0aW9uJHN0YXRlID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGxldCBhY3Rpb25EYXRhO1xuICAgIGlmIChuZXdTdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV3U3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICBhY3Rpb25EYXRhID0gbmV3U3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVtcHR5IGFjdGlvbkRhdGEgLT4gY2xlYXIgcHJpb3IgYWN0aW9uRGF0YSBkdWUgdG8gYW4gYWN0aW9uIGVycm9yXG4gICAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb25SZWxvYWQpIHtcbiAgICAgIC8vIEtlZXAgdGhlIGN1cnJlbnQgZGF0YSBpZiB3ZSdyZSB3cmFwcGluZyB1cCB0aGUgYWN0aW9uIHJlbG9hZFxuICAgICAgYWN0aW9uRGF0YSA9IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENsZWFyIGFjdGlvbkRhdGEgb24gYW55IG90aGVyIGNvbXBsZXRlZCBuYXZpZ2F0aW9uc1xuICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBwcmVzZXJ2ZSBhbnkgZXhpc3RpbmcgbG9hZGVyRGF0YSBmcm9tIHJlLXVzZWQgcm91dGVzXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8gbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sIG5ld1N0YXRlLmVycm9ycykgOiBzdGF0ZS5sb2FkZXJEYXRhO1xuICAgIC8vIE9uIGEgc3VjY2Vzc2Z1bCBuYXZpZ2F0aW9uIHdlIGNhbiBhc3N1bWUgd2UgZ290IHRocm91Z2ggYWxsIGJsb2NrZXJzXG4gICAgLy8gc28gd2UgY2FuIHN0YXJ0IGZyZXNoXG4gICAgbGV0IGJsb2NrZXJzID0gc3RhdGUuYmxvY2tlcnM7XG4gICAgaWYgKGJsb2NrZXJzLnNpemUgPiAwKSB7XG4gICAgICBibG9ja2VycyA9IG5ldyBNYXAoYmxvY2tlcnMpO1xuICAgICAgYmxvY2tlcnMuZm9yRWFjaCgoXywgaykgPT4gYmxvY2tlcnMuc2V0KGssIElETEVfQkxPQ0tFUikpO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcmVzcGVjdCB0aGUgdXNlciBmbGFnLiAgT3RoZXJ3aXNlIGRvbid0IHJlc2V0IG9uIG11dGF0aW9uXG4gICAgLy8gc3VibWlzc2lvbiBuYXZpZ2F0aW9ucyB1bmxlc3MgdGhleSByZWRpcmVjdFxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIHx8IHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiAoKF9sb2NhdGlvbiRzdGF0ZTIgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZTIuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGlmIChpbkZsaWdodERhdGFSb3V0ZXMpIHtcbiAgICAgIGRhdGFSb3V0ZXMgPSBpbkZsaWdodERhdGFSb3V0ZXM7XG4gICAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH1cbiAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7fSwgbmV3U3RhdGUsIHtcbiAgICAgIGFjdGlvbkRhdGEsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgaGlzdG9yeUFjdGlvbjogcGVuZGluZ0FjdGlvbixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgaW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IHN0YXRlLm1hdGNoZXMpLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgYmxvY2tlcnNcbiAgICB9KSk7XG4gICAgLy8gUmVzZXQgc3RhdGVmdWwgbmF2aWdhdGlvbiB2YXJzXG4gICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdO1xuICAgIGNhbmNlbGxlZEZldGNoZXJMb2FkcyA9IFtdO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBuYXZpZ2F0aW9uIGV2ZW50LCB3aGljaCBjYW4gZWl0aGVyIGJlIGEgbnVtZXJpY2FsIFBPUCBvciBhIFBVU0hcbiAgLy8gcmVwbGFjZSB3aXRoIGFuIG9wdGlvbmFsIHN1Ym1pc3Npb25cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUodG8sIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpbml0Lmhpc3RvcnkuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVUbyhzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcywgYmFzZW5hbWUsIGZ1dHVyZS52N19wcmVwZW5kQmFzZW5hbWUsIHRvLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZyb21Sb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIGZhbHNlLCBub3JtYWxpemVkUGF0aCwgb3B0cyk7XG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTtcbiAgICAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcbiAgICBuZXh0TG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSk7XG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGlmICh1c2VyUmVwbGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH0gZWxzZSBpZiAodXNlclJlcGxhY2UgPT09IGZhbHNlKSA7IGVsc2UgaWYgKHN1Ym1pc3Npb24gIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkgJiYgc3VibWlzc2lvbi5mb3JtQWN0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgLy8gQnkgZGVmYXVsdCBvbiBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiB3ZSBSRVBMQUNFIHNvIHRoYXRcbiAgICAgIC8vIHVzZXJzIGRvbid0IGhhdmUgdG8gZG91YmxlLWNsaWNrIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgdG8gdGhlIHByaW9yXG4gICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZVxuICAgICAgLy8gYWN0aW9uL2xvYWRlciB0aGlzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIHJlZGlyZWN0IHdpbGwgYmUgYSBQVVNIXG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfVxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBvcHRzICYmIFwicHJldmVudFNjcm9sbFJlc2V0XCIgaW4gb3B0cyA/IG9wdHMucHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIDogdW5kZWZpbmVkO1xuICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgICBpZiAoYmxvY2tlcktleSkge1xuICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuICAgICAgICAgIG5hdmlnYXRlKHRvLCBvcHRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbmV4dExvY2F0aW9uLCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgLy8gU2VuZCB0aHJvdWdoIHRoZSBmb3JtRGF0YSBzZXJpYWxpemF0aW9uIGVycm9yIGlmIHdlIGhhdmUgb25lIHNvIHdlIGNhblxuICAgICAgLy8gcmVuZGVyIGF0IHRoZSByaWdodCBlcnJvciBib3VuZGFyeSBhZnRlciB3ZSBtYXRjaCByb3V0ZXNcbiAgICAgIHBlbmRpbmdFcnJvcjogZXJyb3IsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZXBsYWNlOiBvcHRzICYmIG9wdHMucmVwbGFjZVxuICAgIH0pO1xuICB9XG4gIC8vIFJldmFsaWRhdGUgYWxsIGN1cnJlbnQgbG9hZGVycy4gIElmIGEgbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzcyBvciBpZiB0aGlzXG4gIC8vIGlzIGludGVycnVwdGVkIGJ5IGEgbmF2aWdhdGlvbiwgYWxsb3cgdGhpcyB0byBcInN1Y2NlZWRcIiBieSBjYWxsaW5nIGFsbFxuICAvLyBsb2FkZXJzIGR1cmluZyB0aGUgbmV4dCBsb2FkZXIgcm91bmRcbiAgZnVuY3Rpb24gcmV2YWxpZGF0ZSgpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIHJldmFsaWRhdGlvbjogXCJsb2FkaW5nXCJcbiAgICB9KTtcbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgc3VibWl0dGluZyBhbiBhY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uLCB3ZSdsbCBqdXN0IGxldCB0aGUgZm9sbG93IHVwIGxvYWRlciBleGVjdXRpb24gY2FsbCBhbGwgbG9hZGVyc1xuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcInN1Ym1pdHRpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgc3RhcnROYXZpZ2F0aW9uKHBlbmRpbmdBY3Rpb24gfHwgc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgfSk7XG4gIH1cbiAgLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgb3B0cykge1xuICAgIC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyBuYXZpZ2F0aW9ucyBhbmQgc3RhcnQgYSBuZXcgb25lLiBVbnNldCBhbnkgb25nb2luZ1xuICAgIC8vIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9ucyB1bmxlc3MgdG9sZCBvdGhlcndpc2UsIHNpbmNlIHdlIHdhbnQgdGhpc1xuICAgIC8vIG5ldyBuYXZpZ2F0aW9uIHRvIHVwZGF0ZSBoaXN0b3J5IG5vcm1hbGx5XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgcGVuZGluZ0FjdGlvbiA9IGhpc3RvcnlBY3Rpb247XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlO1xuICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgbmF2aWdhdGlvbixcbiAgICAvLyBhbmQgdHJhY2sgd2hldGhlciB3ZSBzaG91bGQgcmVzZXQgc2Nyb2xsIG9uIGNvbXBsZXRpb25cbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpO1xuICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiBpdCdzIG9ubHkgYSBoYXNoIGNoYW5nZSBhbmQgbm90IGEgcmV2YWxpZGF0aW9uIG9yXG4gICAgLy8gbXV0YXRpb24gc3VibWlzc2lvbi5cbiAgICAvL1xuICAgIC8vIElnbm9yZSBvbiBpbml0aWFsIHBhZ2UgbG9hZHMgYmVjYXVzZSBzaW5jZSB0aGUgaW5pdGlhbCBsb2FkIHdpbGwgYWx3YXlzXG4gICAgLy8gYmUgXCJzYW1lIGhhc2hcIi4gIEZvciBleGFtcGxlLCBvbiAvcGFnZSNoYXNoIGFuZCBzdWJtaXQgYSA8Rm9ybSBtZXRob2Q9XCJwb3N0XCI+XG4gICAgLy8gd2hpY2ggd2lsbCBkZWZhdWx0IHRvIGEgbmF2aWdhdGlvbiB0byAvcGFnZVxuICAgIGlmIChzdGF0ZS5pbml0aWFsaXplZCAmJiAhaXNSZXZhbGlkYXRpb25SZXF1aXJlZCAmJiBpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikgJiYgIShvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgY29udHJvbGxlci9SZXF1ZXN0IGZvciB0aGlzIG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGxvY2F0aW9uLCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbik7XG4gICAgbGV0IHBlbmRpbmdBY3Rpb25EYXRhO1xuICAgIGxldCBwZW5kaW5nRXJyb3I7XG4gICAgaWYgKG9wdHMgJiYgb3B0cy5wZW5kaW5nRXJyb3IpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nRXJyb3IsIGl0IG1lYW5zIHRoZSB1c2VyIGF0dGVtcHRlZCBhIEdFVCBzdWJtaXNzaW9uXG4gICAgICAvLyB3aXRoIGJpbmFyeSBGb3JtRGF0YSBzbyBhc3NpZ24gaGVyZSBhbmQgc2tpcCB0byBoYW5kbGVMb2FkZXJzLiAgVGhhdFxuICAgICAgLy8gd2F5IHdlIGhhbmRsZSBjYWxsaW5nIGxvYWRlcnMgYWJvdmUgdGhlIGJvdW5kYXJ5IGV0Yy4gIEl0J3Mgbm90IHJlYWxseVxuICAgICAgLy8gZGlmZmVyZW50IGZyb20gYW4gYWN0aW9uRXJyb3IgaW4gdGhhdCBzZW5zZS5cbiAgICAgIHBlbmRpbmdFcnJvciA9IHtcbiAgICAgICAgW2ZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcykucm91dGUuaWRdOiBvcHRzLnBlbmRpbmdFcnJvclxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICAvLyBDYWxsIGFjdGlvbiBpZiB3ZSByZWNlaXZlZCBhbiBhY3Rpb24gc3VibWlzc2lvblxuICAgICAgbGV0IGFjdGlvbk91dHB1dCA9IGF3YWl0IGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgb3B0cy5zdWJtaXNzaW9uLCBtYXRjaGVzLCB7XG4gICAgICAgIHJlcGxhY2U6IG9wdHMucmVwbGFjZVxuICAgICAgfSk7XG4gICAgICBpZiAoYWN0aW9uT3V0cHV0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25EYXRhO1xuICAgICAgcGVuZGluZ0Vycm9yID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25FcnJvcjtcbiAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbik7XG4gICAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2FsbCBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIHNob3J0Q2lyY3VpdGVkLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBhd2FpdCBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBsb2FkaW5nTmF2aWdhdGlvbiwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5mZXRjaGVyU3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO1xuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBub3cgdGhhdCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZlxuICAgIC8vIHdlIHNob3J0IGNpcmN1aXRlZCBiZWNhdXNlIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciB3aWxsIGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBtYXRjaGVzXG4gICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgIH0gOiB7fSwge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGVcbiAgLy8gcmVkaXJlY3RzL2Vycm9yc1xuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBuYXZpZ2F0aW9uID0gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIG5hdmlnYXRpb25cbiAgICB9KTtcbiAgICAvLyBDYWxsIG91ciBhY3Rpb24gYW5kIGdldCB0aGUgcmVzdWx0XG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgYWN0aW9uTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpO1xuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVwbGFjZTtcbiAgICAgIGlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7XG4gICAgICAgIHJlcGxhY2UgPSBvcHRzLnJlcGxhY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZXhwbGljaXR5IGluZGljYXRlIHJlcGxhY2UgYmVoYXZpb3IsIHJlcGxhY2UgaWZcbiAgICAgICAgLy8gd2UgcmVkaXJlY3RlZCB0byB0aGUgZXhhY3Qgc2FtZSBsb2NhdGlvbiB3ZSdyZSBjdXJyZW50bHkgYXQgdG8gYXZvaWRcbiAgICAgICAgLy8gZG91YmxlIGJhY2stYnV0dG9uc1xuICAgICAgICByZXBsYWNlID0gcmVzdWx0LmxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQsIHtcbiAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cbiAgICAgIGlmICgob3B0cyAmJiBvcHRzLnJlcGxhY2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFNlbmQgYmFjayBhbiBlbXB0eSBvYmplY3Qgd2UgY2FuIHVzZSB0byBjbGVhciBvdXQgYW55IHByaW9yIGFjdGlvbkRhdGFcbiAgICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHt9LFxuICAgICAgICBwZW5kaW5nQWN0aW9uRXJyb3I6IHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIGZldGNoZXJTdWJtaXNzaW9uLCByZXBsYWNlLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7XG4gICAgLy8gRmlndXJlIG91dCB0aGUgcmlnaHQgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIHVzZSBmb3IgZGF0YSBsb2FkaW5nXG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3ZlcnJpZGVOYXZpZ2F0aW9uIHx8IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPSBzdWJtaXNzaW9uIHx8IGZldGNoZXJTdWJtaXNzaW9uIHx8IGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihsb2FkaW5nTmF2aWdhdGlvbik7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIGFjdGl2ZVN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO1xuICAgIC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcbiAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocm91dGVJZCA9PiAhKG1hdGNoZXMgJiYgbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpIHx8IG1hdGNoZXNUb0xvYWQgJiYgbWF0Y2hlc1RvTG9hZC5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbFxuICAgICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICAgIGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHVwZGF0ZWRGZXRjaGVycyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGEgPSBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgICAgfSA6IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgIH1cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKHJmLmtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHJmLmtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICAvLyBGZXRjaGVycyB1c2UgYW4gaW5kZXBlbmRlbnQgQWJvcnRDb250cm9sbGVyIHNvIHRoYXQgYWJvcnRpbmcgYSBmZXRjaGVyXG4gICAgICAgIC8vICh2aWEgZGVsZXRlRmV0Y2hlcikgZG9lcyBub3QgYWJvcnQgdGhlIHRyaWdnZXJpbmcgbmF2aWdhdGlvbiB0aGF0XG4gICAgICAgIC8vIHRyaWdnZXJlZCB0aGUgcmV2YWxpZGF0aW9uXG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gUHJveHkgbmF2aWdhdGlvbiBhYm9ydCB0aHJvdWdoIHRvIHJldmFsaWRhdGlvbiBmZXRjaGVyc1xuICAgIGxldCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMgPSAoKSA9PiByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKGYgPT4gYWJvcnRGZXRjaGVyKGYua2V5KSk7XG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUocmYua2V5KSk7XG4gICAgLy8gSWYgYW55IGxvYWRlcnMgcmV0dXJuZWQgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHBlbmRpbmdFcnJvciwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRlZmVycmVkRGF0YSwgcm91dGVJZCkgPT4ge1xuICAgICAgZGVmZXJyZWREYXRhLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgLy8gTm90ZTogTm8gbmVlZCB0byB1cGRhdGVTdGF0ZSBoZXJlIHNpbmNlIHRoZSBUcmFja2VkUHJvbWlzZSBvblxuICAgICAgICAvLyBsb2FkZXJEYXRhIGlzIHN0YWJsZSBhY3Jvc3MgcmVzb2x2ZS9yZWplY3RcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgaW5zdGFuY2UgaWYgd2Ugd2VyZSBhYm9ydGVkIG9yIGlmIHByb21pc2VzIGhhdmUgc2V0dGxlZFxuICAgICAgICBpZiAoYWJvcnRlZCB8fCBkZWZlcnJlZERhdGEuZG9uZSkge1xuICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKTtcbiAgICBsZXQgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPSB1cGRhdGVkRmV0Y2hlcnMgfHwgZGlkQWJvcnRGZXRjaExvYWRzIHx8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDA7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBzaG91bGRVcGRhdGVGZXRjaGVycyA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcihrZXkpIHtcbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgaHJlZiwgcm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbm9ybWFsaXplZFBhdGgsIGJhc2VuYW1lKTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBub3JtYWxpemVkUGF0aFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIHRydWUsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgbWF0Y2hlZCBmZXRjaGVyLnN1Ym1pdCgpLCBhbmQgdGhlbiBoYW5kbGUgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGFuZCByZXZhbGlkYXRpb25cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhbWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3Mgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICBsZXQgZmV0Y2hlciA9IGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlcik7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lKTtcbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3Ugb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgbGV0IGxvYWRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbik7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIGFjdGlvblJlc3VsdCwge1xuICAgICAgICBzdWJtaXNzaW9uLFxuICAgICAgICBpc0ZldGNoQWN0aW9uUmVkaXJlY3Q6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGFjdGlvblJlc3VsdC5lcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBTdGFydCB0aGUgZGF0YSBsb2FkIGZvciBjdXJyZW50IG1hdGNoZXMsIG9yIHRoZSBuZXh0IGxvY2F0aW9uIGlmIHdlJ3JlXG4gICAgLy8gaW4gdGhlIG1pZGRsZSBvZiBhIG5hdmlnYXRpb25cbiAgICBsZXQgbmV4dExvY2F0aW9uID0gc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiB8fCBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgcmV2YWxpZGF0aW9uUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbmV4dExvY2F0aW9uLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbWF0Y2hlcyA9IHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiID8gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIGJhc2VuYW1lKSA6IHN0YXRlLm1hdGNoZXM7XG4gICAgaW52YXJpYW50KG1hdGNoZXMsIFwiRGlkbid0IGZpbmQgYW55IG1hdGNoZXMgYWZ0ZXIgZmV0Y2hlciBhY3Rpb25cIik7XG4gICAgbGV0IGxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGZldGNoUmVsb2FkSWRzLnNldChrZXksIGxvYWRJZCk7XG4gICAgbGV0IGxvYWRGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRGZXRjaGVyKTtcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoaW5pdC5oaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbmV4dExvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHtcbiAgICAgIFttYXRjaC5yb3V0ZS5pZF06IGFjdGlvblJlc3VsdC5kYXRhXG4gICAgfSwgdW5kZWZpbmVkIC8vIE5vIG5lZWQgdG8gc2VuZCB0aHJvdWdoIGVycm9ycyBzaW5jZSB3ZSBzaG9ydCBjaXJjdWl0IGFib3ZlXG4gICAgKTtcbiAgICAvLyBQdXQgYWxsIHJldmFsaWRhdGluZyBmZXRjaGVycyBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlLCBleGNlcHQgZm9yIHRoZVxuICAgIC8vIGN1cnJlbnQgZmV0Y2hlciB3aGljaCB3ZSB3YW50IHRvIGtlZXAgaW4gaXQncyBjdXJyZW50IGxvYWRpbmcgc3RhdGUgd2hpY2hcbiAgICAvLyBjb250YWlucyBpdCdzIGFjdGlvbiBzdWJtaXNzaW9uIGluZm8gKyBhY3Rpb24gZGF0YVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZpbHRlcihyZiA9PiByZi5rZXkgIT09IGtleSkuZm9yRWFjaChyZiA9PiB7XG4gICAgICBsZXQgc3RhbGVLZXkgPSByZi5rZXk7XG4gICAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHN0YWxlS2V5KTtcbiAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIodW5kZWZpbmVkLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoc3RhbGVLZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKHN0YWxlS2V5KSkge1xuICAgICAgICBhYm9ydEZldGNoZXIoc3RhbGVLZXkpO1xuICAgICAgfVxuICAgICAgaWYgKHJmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQoc3RhbGVLZXksIHJmLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICAgIGxldCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMgPSAoKSA9PiByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGFib3J0RmV0Y2hlcihyZi5rZXkpKTtcbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIGxldCB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgcmV2YWxpZGF0aW9uUmVxdWVzdCk7XG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIHN0YXRlLm1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHVuZGVmaW5lZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFNpbmNlIHdlIGxldCByZXZhbGlkYXRpb25zIGNvbXBsZXRlIGV2ZW4gaWYgdGhlIHN1Ym1pdHRpbmcgZmV0Y2hlciB3YXNcbiAgICAvLyBkZWxldGVkLCBvbmx5IHB1dCBpdCBiYWNrIHRvIGlkbGUgaWYgaXQgaGFzbid0IGJlZW4gZGVsZXRlZFxuICAgIGlmIChzdGF0ZS5mZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTtcbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycylcbiAgICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyB8fCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDYWxsIHRoZSBtYXRjaGVkIGxvYWRlciBmb3IgZmV0Y2hlci5sb2FkKCksIGhhbmRsaW5nIHJlZGlyZWN0cywgZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbikge1xuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBsb2FkaW5nIHN0YXRlXG4gICAgbGV0IGxvYWRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaFxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpO1xuICAgIC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSAoYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIGZldGNoUmVxdWVzdC5zaWduYWwsIHRydWUpKSB8fCByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgLy8gVE9ETzogSW4gcmVtaXgsIHRoaXMgd291bGQgcmVzZXQgdG8gSURMRV9OQVZJR0FUSU9OIGlmIGl0IHdhcyBhIGNhdGNoIC1cbiAgICAgIC8vIGRvIHdlIG5lZWQgdG8gYmVoYXZlIGFueSBkaWZmZXJlbnRseSB3aXRoIG91ciBub24tcmVkaXJlY3QgZXJyb3JzP1xuICAgICAgLy8gV2hhdCBpZiBpdCB3YXMgYSBub24tcmVkaXJlY3QgUmVzcG9uc2U/XG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgLy8gUHV0IHRoZSBmZXRjaGVyIGJhY2sgaW50byBhbiBpZGxlIHN0YXRlXG4gICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpO1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LCBfdGVtcCkge1xuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdFxuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCByZWRpcmVjdExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHJlZGlyZWN0LmxvY2F0aW9uLCAvLyBUT0RPOiBUaGlzIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgZ2V0IHJpZCBvZiB1c2VUcmFuc2l0aW9uIGluIFJlbWl4IHYyXG4gICAgX2V4dGVuZHMoe1xuICAgICAgX2lzUmVkaXJlY3Q6IHRydWVcbiAgICB9LCBpc0ZldGNoQWN0aW9uUmVkaXJlY3QgPyB7XG4gICAgICBfaXNGZXRjaEFjdGlvblJlZGlyZWN0OiB0cnVlXG4gICAgfSA6IHt9KSk7XG4gICAgaW52YXJpYW50KHJlZGlyZWN0TG9jYXRpb24sIFwiRXhwZWN0ZWQgYSBsb2NhdGlvbiBvbiB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvblwiKTtcbiAgICAvLyBDaGVjayBpZiB0aGlzIGFuIGFic29sdXRlIGV4dGVybmFsIHJlZGlyZWN0IHRoYXQgZ29lcyB0byBhIG5ldyBvcmlnaW5cbiAgICBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QocmVkaXJlY3QubG9jYXRpb24pICYmIGlzQnJvd3Nlcikge1xuICAgICAgbGV0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgbGV0IGlzRGlmZmVyZW50QmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICBpZiAocm91dGVyV2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gdXJsLm9yaWdpbiB8fCBpc0RpZmZlcmVudEJhc2VuYW1lKSB7XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLnJlcGxhY2UocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5hc3NpZ24ocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIGFib3J0IG9uIHJlZGlyZWN0cywgc2luY2Ugd2UgZG9uJ3QgZGV0ZWN0IHRoZVxuICAgIC8vIHJlZGlyZWN0IHVudGlsIHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIHNldHRsZWRcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGxldCByZWRpcmVjdEhpc3RvcnlBY3Rpb24gPSByZXBsYWNlID09PSB0cnVlID8gQWN0aW9uLlJlcGxhY2UgOiBBY3Rpb24uUHVzaDtcbiAgICAvLyBVc2UgdGhlIGluY29taW5nIHN1Ym1pc3Npb24gaWYgcHJvdmlkZWQsIGZhbGxiYWNrIG9uIHRoZSBhY3RpdmUgb25lIGluXG4gICAgLy8gc3RhdGUubmF2aWdhdGlvblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbik7XG4gICAgLy8gSWYgdGhpcyB3YXMgYSAzMDcvMzA4IHN1Ym1pc3Npb24gd2Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgSFRUUCBtZXRob2QgYW5kXG4gICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cbiAgICBpZiAocmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5zdGF0dXMpICYmIGFjdGl2ZVN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChhY3RpdmVTdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBhY3RpdmVTdWJtaXNzaW9uLCB7XG4gICAgICAgICAgZm9ybUFjdGlvbjogcmVkaXJlY3QubG9jYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc0ZldGNoQWN0aW9uUmVkaXJlY3QpIHtcbiAgICAgIC8vIEZvciBhIGZldGNoIGFjdGlvbiByZWRpcmVjdCwgd2Uga2ljayBvZmYgYSBuZXcgbG9hZGluZyBuYXZpZ2F0aW9uXG4gICAgICAvLyB3aXRob3V0IHRoZSBmZXRjaGVyIHN1Ym1pc3Npb24sIGJ1dCB3ZSBzZW5kIGl0IGFsb25nIGZvciBzaG91bGRSZXZhbGlkYXRlXG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogZ2V0TG9hZGluZ05hdmlnYXRpb24ocmVkaXJlY3RMb2NhdGlvbiksXG4gICAgICAgIGZldGNoZXJTdWJtaXNzaW9uOiBhY3RpdmVTdWJtaXNzaW9uLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgc3VibWlzc2lvbiwgd2Ugd2lsbCBwcmVzZXJ2ZSBpdCB0aHJvdWdoIHRoZSByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgb3ZlcnJpZGVOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24ocmVkaXJlY3RMb2NhdGlvbiwgYWN0aXZlU3VibWlzc2lvbik7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbixcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIC8vIENhbGwgYWxsIG5hdmlnYXRpb24gbG9hZGVycyBhbmQgcmV2YWxpZGF0aW5nIGZldGNoZXIgbG9hZGVycyBpbiBwYXJhbGxlbCxcbiAgICAvLyB0aGVuIHNsaWNlIG9mZiB0aGUgcmVzdWx0cyBpbnRvIHNlcGFyYXRlIGFycmF5cyBzbyB3ZSBjYW4gaGFuZGxlIHRoZW1cbiAgICAvLyBhY2NvcmRpbmdseVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpKSwgLi4uZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4ge1xuICAgICAgaWYgKGYubWF0Y2hlcyAmJiBmLm1hdGNoICYmIGYuY29udHJvbGxlcikge1xuICAgICAgICByZXR1cm4gY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgZi5wYXRoLCBmLmNvbnRyb2xsZXIuc2lnbmFsKSwgZi5tYXRjaCwgZi5tYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZXJyb3IgPSB7XG4gICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBmLnBhdGhcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfSldKTtcbiAgICBsZXQgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UobWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBsb2FkZXJSZXN1bHRzLm1hcCgoKSA9PiByZXF1ZXN0LnNpZ25hbCksIGZhbHNlLCBzdGF0ZS5sb2FkZXJEYXRhKSwgcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5tYXRjaCksIGZldGNoZXJSZXN1bHRzLCBmZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiBmLmNvbnRyb2xsZXIgPyBmLmNvbnRyb2xsZXIuc2lnbmFsIDogbnVsbCksIHRydWUpXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIC8vIENhbmNlbCBwZW5kaW5nIHJvdXRlLWxldmVsIGRlZmVycmVkcyBhbmQgbWFyayBjYW5jZWxsZWQgcm91dGVzIGZvclxuICAgIC8vIHJldmFsaWRhdGlvblxuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnB1c2goLi4uY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpO1xuICAgIC8vIEFib3J0IGluLWZsaWdodCBmZXRjaGVyIGxvYWRzXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKSB7XG4gICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBlcnJvcnM6IHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvclxuICAgICAgfSxcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAvLyBEb24ndCBhYm9ydCB0aGUgY29udHJvbGxlciBpZiB0aGlzIGlzIGEgZGVsZXRpb24gb2YgYSBmZXRjaGVyLnN1Ym1pdCgpXG4gICAgLy8gaW4gaXQncyBsb2FkaW5nIHBoYXNlIHNpbmNlIC0gd2UgZG9uJ3Qgd2FudCB0byBhYm9ydCB0aGUgY29ycmVzcG9uZGluZ1xuICAgIC8vIHJldmFsaWRhdGlvbiBhbmQgd2FudCB0aGVtIHRvIGNvbXBsZXRlIGFuZCBsYW5kXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkgJiYgIShmZXRjaGVyICYmIGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGZldGNoUmVsb2FkSWRzLmhhcyhrZXkpKSkge1xuICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGZldGNoIGNvbnRyb2xsZXI6IFwiICsga2V5KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBtYXJrRmV0Y2hlcnNEb25lKGtleXMpIHtcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgICAgbGV0IGZldGNoZXIgPSBnZXRGZXRjaGVyKGtleSk7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihmZXRjaGVyLmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCkge1xuICAgIGxldCBkb25lS2V5cyA9IFtdO1xuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkb25lS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIHVwZGF0ZWRGZXRjaGVycyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoZG9uZUtleXMpO1xuICAgIHJldHVybiB1cGRhdGVkRmV0Y2hlcnM7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRTdGFsZUZldGNoTG9hZHMobGFuZGVkSWQpIHtcbiAgICBsZXQgeWVldGVkS2V5cyA9IFtdO1xuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgICAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICB5ZWV0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKHllZXRlZEtleXMpO1xuICAgIHJldHVybiB5ZWV0ZWRLZXlzLmxlbmd0aCA+IDA7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0QmxvY2tlcihrZXksIGZuKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuZ2V0KGtleSkgIT09IGZuKSB7XG4gICAgICBibG9ja2VyRnVuY3Rpb25zLnNldChrZXksIGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrZXI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlQmxvY2tlcihrZXkpIHtcbiAgICBzdGF0ZS5ibG9ja2Vycy5kZWxldGUoa2V5KTtcbiAgICBibG9ja2VyRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xuICB9XG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gdXBkYXRlIGJsb2NrZXJzLCBlbnN1cmluZyB2YWxpZCBzdGF0ZSB0cmFuc2l0aW9uc1xuICBmdW5jdGlvbiB1cGRhdGVCbG9ja2VyKGtleSwgbmV3QmxvY2tlcikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIC8vIFBvb3IgbWFucyBzdGF0ZSBtYWNoaW5lIDopXG4gICAgLy8gaHR0cHM6Ly9tZXJtYWlkLmxpdmUvZWRpdCNwYWtvOmVOcVZrYzlPd3pBTXhsOGw4bm5qQVlyRXRESU9IRUJJZ3d2S0pUUmVHeTNfbERwSXFPMjdrNmF3TUcwWGNyTGxuejg3bndkb25FU29nS1hYQnVFNzlycTc1WFpPMy15SGRzMFJKVnV2NzBZclBsVXJDRWUySGZyT1JTM3J1YnFaZnVodHBnNUM5d2s1dFo0VktjUlVxODhxOVo4UlMwLTQ4Y0UxaUhKa0wwdWdiSHVGTHVzOUw2c3BaeThuWDlNUDJDTmRvbVZhcG9zcXUzZkdheVQ4VDgtakpRd2hlcG9fVXRwZ0JRYURFVW9tMDRkWmhBTjFhSkJEbFVLSkJ4RTFjZUIyU21qME1sbi1JQlc1QUZVMmR3VWlrdHRfMlFhcTJkQmZhS2RFdXA4NVVWN1lkLWRLamxua2FibDJQdnIwRFRrVHJlTVxuICAgIGludmFyaWFudChibG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiwgXCJJbnZhbGlkIGJsb2NrZXIgc3RhdGUgdHJhbnNpdGlvbjogXCIgKyBibG9ja2VyLnN0YXRlICsgXCIgLT4gXCIgKyBuZXdCbG9ja2VyLnN0YXRlKTtcbiAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICBibG9ja2Vycy5zZXQoa2V5LCBuZXdCbG9ja2VyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBibG9ja2Vyc1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNob3VsZEJsb2NrTmF2aWdhdGlvbihfcmVmMikge1xuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IF9yZWYyO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2Ugb255IHN1cHBvcnQgYSBzaW5nbGUgYWN0aXZlIGJsb2NrZXIgYXQgdGhlIG1vbWVudCBzaW5jZSB3ZSBkb24ndCBoYXZlXG4gICAgLy8gYW55IGNvbXBlbGxpbmcgdXNlIGNhc2VzIGZvciBtdWx0aS1ibG9ja2VyIHlldFxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPiAxKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkEgcm91dGVyIG9ubHkgc3VwcG9ydHMgb25lIGJsb2NrZXIgYXQgYSB0aW1lXCIpO1xuICAgIH1cbiAgICBsZXQgZW50cmllcyA9IEFycmF5LmZyb20oYmxvY2tlckZ1bmN0aW9ucy5lbnRyaWVzKCkpO1xuICAgIGxldCBbYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSA9IGVudHJpZXNbZW50cmllcy5sZW5ndGggLSAxXTtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KTtcbiAgICBpZiAoYmxvY2tlciAmJiBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIikge1xuICAgICAgLy8gSWYgdGhlIGJsb2NrZXIgaXMgY3VycmVudGx5IHByb2NlZWRpbmcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2tcbiAgICAgIC8vIGl0IGFuZCBjYW4gbGV0IHRoaXMgbmF2aWdhdGlvbiBjb250aW51ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBrbm93IHdlJ3JlIHVuYmxvY2tlZC9ibG9ja2VkIHNvIHdlIG5lZWQgdG8gY2hlY2sgdGhlXG4gICAgLy8gdXNlci1wcm92aWRlZCBibG9ja2VyIGZ1bmN0aW9uXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBibG9ja2VyS2V5O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocHJlZGljYXRlKSB7XG4gICAgbGV0IGNhbmNlbGxlZFJvdXRlSWRzID0gW107XG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRmZCwgcm91dGVJZCkgPT4ge1xuICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHJvdXRlSWQpKSB7XG4gICAgICAgIC8vIENhbmNlbCB0aGUgZGVmZXJyZWQgLSBidXQgZG8gbm90IHJlbW92ZSBmcm9tIGFjdGl2ZURlZmVycmVkcyBoZXJlIC1cbiAgICAgICAgLy8gd2UgcmVseSBvbiB0aGUgc3Vic2NyaWJlcnMgdG8gZG8gdGhhdCBzbyBvdXIgdGVzdHMgY2FuIGFzc2VydCBwcm9wZXJcbiAgICAgICAgLy8gY2xlYW51cCB2aWEgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzXG4gICAgICAgIGRmZC5jYW5jZWwoKTtcbiAgICAgICAgY2FuY2VsbGVkUm91dGVJZHMucHVzaChyb3V0ZUlkKTtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FuY2VsbGVkUm91dGVJZHM7XG4gIH1cbiAgLy8gT3B0IGluIHRvIGNhcHR1cmluZyBhbmQgcmVwb3J0aW5nIHNjcm9sbCBwb3NpdGlvbnMgZHVyaW5nIG5hdmlnYXRpb25zLFxuICAvLyB1c2VkIGJ5IHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuICBmdW5jdGlvbiBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbihwb3NpdGlvbnMsIGdldFBvc2l0aW9uLCBnZXRLZXkpIHtcbiAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IGdldFBvc2l0aW9uO1xuICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gZ2V0S2V5IHx8IG51bGw7XG4gICAgLy8gUGVyZm9ybSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24sIHNpbmNlIHdlIG1pc3MgdGhlIGJvYXQgb25cbiAgICAvLyB0aGUgaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGJlY2F1c2Ugd2UndmUgbm90IHlldCByZW5kZXJlZCA8U2Nyb2xsUmVzdG9yYXRpb24vPlxuICAgIC8vIGFuZCB0aGVyZWZvcmUgaGF2ZSBubyBzYXZlZFNjcm9sbFBvc2l0aW9ucyBhdmFpbGFibGVcbiAgICBpZiAoIWluaXRpYWxTY3JvbGxSZXN0b3JlZCAmJiBzdGF0ZS5uYXZpZ2F0aW9uID09PSBJRExFX05BVklHQVRJT04pIHtcbiAgICAgIGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IHRydWU7XG4gICAgICBsZXQgeSA9IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgICAgaWYgKHkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkobG9jYXRpb24sIG1hdGNoZXMubWFwKG0gPT4gY3JlYXRlVXNlTWF0Y2hlc01hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKSk7XG4gICAgICByZXR1cm4ga2V5IHx8IGxvY2F0aW9uLmtleTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2F0aW9uLmtleTtcbiAgfVxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBfaW50ZXJuYWxTZXRSb3V0ZXMobmV3Um91dGVzKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKG5ld1JvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgfVxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG4gICAgaW5pdGlhbGl6ZSxcbiAgICBzdWJzY3JpYmUsXG4gICAgZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24sXG4gICAgbmF2aWdhdGUsXG4gICAgZmV0Y2gsXG4gICAgcmV2YWxpZGF0ZSxcbiAgICAvLyBQYXNzdGhyb3VnaCB0byBoaXN0b3J5LWF3YXJlIGNyZWF0ZUhyZWYgdXNlZCBieSB1c2VIcmVmIHNvIHdlIGdldCBwcm9wZXJcbiAgICAvLyBoYXNoLWF3YXJlIFVSTHMgaW4gRE9NIHBhdGhzXG4gICAgY3JlYXRlSHJlZjogdG8gPT4gaW5pdC5oaXN0b3J5LmNyZWF0ZUhyZWYodG8pLFxuICAgIGVuY29kZUxvY2F0aW9uOiB0byA9PiBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24odG8pLFxuICAgIGdldEZldGNoZXIsXG4gICAgZGVsZXRlRmV0Y2hlcixcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzXG4gIH07XG4gIHJldHVybiByb3V0ZXI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wgPSBTeW1ib2woXCJkZWZlcnJlZFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIocm91dGVzLCBvcHRzKSB7XG4gIGludmFyaWFudChyb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVTdGF0aWNIYW5kbGVyXCIpO1xuICBsZXQgbWFuaWZlc3QgPSB7fTtcbiAgbGV0IGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgXCIvXCI7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBvcHRzLm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBvcHRzLmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICAvKipcbiAgICogVGhlIHF1ZXJ5KCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciBkb2N1bWVudCByZXF1ZXN0cywgaW4gd2hpY2ggd2Ugd2FudCB0b1xuICAgKiBjYWxsIGFuIG9wdGlvbmFsIGFjdGlvbiBhbmQgcG90ZW50aWFsbHkgbXVsdGlwbGUgbG9hZGVycyBmb3IgYWxsIG5lc3RlZFxuICAgKiByb3V0ZXMuICBJdCByZXR1cm5zIGEgU3RhdGljSGFuZGxlckNvbnRleHQgb2JqZWN0LCB3aGljaCBpcyB2ZXJ5IHNpbWlsYXJcbiAgICogdG8gdGhlIHJvdXRlciBzdGF0ZSAobG9jYXRpb24sIGxvYWRlckRhdGEsIGFjdGlvbkRhdGEsIGVycm9ycywgZXRjLikgYW5kXG4gICAqIGFsc28gYWRkcyBTU1Itc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgc3RhdHVzQ29kZSBhbmQgaGVhZGVyc1xuICAgKiBmcm9tIGFjdGlvbi9sb2FkZXJzIFJlc3BvbnNlcy5cbiAgICpcbiAgICogSXQgX3Nob3VsZF8gbmV2ZXIgdGhyb3cgYW5kIHNob3VsZCByZXBvcnQgYWxsIGVycm9ycyB0aHJvdWdoIHRoZVxuICAgKiByZXR1cm5lZCBjb250ZXh0LmVycm9ycyBvYmplY3QsIHByb3Blcmx5IGFzc29jaWF0aW5nIGVycm9ycyB0byB0aGVpciBlcnJvclxuICAgKiBib3VuZGFyeS4gIEFkZGl0aW9uYWxseSwgaXQgdHJhY2tzIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHdoaWNoIGNhbiBiZVxuICAgKiB1c2VkIHRvIGVtdWxhdGUgUmVhY3QgZXJyb3IgYm91bmRhcmllcyBkdXJpbmcgU1NyIGJ5IHBlcmZvcm1pbmcgYSBzZWNvbmRcbiAgICogcGFzcyBvbmx5IGRvd24gdG8gdGhlIGJvdW5kYXJ5SWQuXG4gICAqXG4gICAqIFRoZSBvbmUgZXhjZXB0aW9uIHdoZXJlIHdlIGRvIG5vdCByZXR1cm4gYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBpcyB3aGVuIGFcbiAgICogcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmV0dXJuZWQgb3IgdGhyb3duIGZyb20gYW55IGFjdGlvbi9sb2FkZXIuICBXZVxuICAgKiBwcm9wYWdhdGUgdGhhdCBvdXQgYW5kIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIHNvIHRoZSBIVFRQIHNlcnZlciBjYW5cbiAgICogcmV0dXJuIGl0IGRpcmVjdGx5LlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgYmFzZW5hbWVcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIgJiYgbWV0aG9kICE9PSBcIk9QVElPTlNcIikge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSByb3V0ZUlkID8gbWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgOiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoaXQgSSBkb24ndCB0aGluaz9cbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBtYXRjaCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHdlIGdvdCBiYWNrIHJlc3VsdC5lcnJvcnMsIHRoYXQgbWVhbnMgdGhlIGxvYWRlci9hY3Rpb24gdGhyZXdcbiAgICAgIC8vIF9zb21ldGhpbmdfIHRoYXQgd2Fzbid0IGEgUmVzcG9uc2UsIGJ1dCBpdCdzIG5vdCBndWFyYW50ZWVkL3JlcXVpcmVkXG4gICAgICAvLyB0byBiZSBhbiBgaW5zdGFuY2VvZiBFcnJvcmAgZWl0aGVyLCBzbyB3ZSBoYXZlIHRvIHVzZSB0aHJvdyBoZXJlIHRvXG4gICAgICAvLyBwcmVzZXJ2ZSB0aGUgXCJlcnJvclwiIHN0YXRlIG91dHNpZGUgb2YgcXVlcnlJbXBsLlxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cbiAgICBpZiAocmVzdWx0LmFjdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdC5hY3Rpb25EYXRhKVswXTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuICAgICAgbGV0IGRhdGEgPSBPYmplY3QudmFsdWVzKHJlc3VsdC5sb2FkZXJEYXRhKVswXTtcbiAgICAgIGlmICgoX3Jlc3VsdCRhY3RpdmVEZWZlcnJlID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkcykgIT0gbnVsbCAmJiBfcmVzdWx0JGFjdGl2ZURlZmVycmVbbWF0Y2gucm91dGUuaWRdKSB7XG4gICAgICAgIGRhdGFbVU5TQUZFX0RFRkVSUkVEX1NZTUJPTF0gPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gpIHtcbiAgICBpbnZhcmlhbnQocmVxdWVzdC5zaWduYWwsIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIik7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gpO1xuICAgICAgcmV0dXJuIGlzUmVzcG9uc2UocmVzdWx0KSA/IHJlc3VsdCA6IF9leHRlbmRzKHt9LCByZXN1bHQsIHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHRocmV3L3JldHVybmVkIGEgUmVzcG9uc2UgaW4gY2FsbExvYWRlck9yQWN0aW9uLCB3ZSB0aHJvd1xuICAgICAgLy8gaXQgdG8gYmFpbCBvdXQgYW5kIHRoZW4gcmV0dXJuIG9yIHRocm93IGhlcmUgYmFzZWQgb24gd2hldGhlciB0aGUgdXNlclxuICAgICAgLy8gcmV0dXJuZWQgb3IgdGhyZXdcbiAgICAgIGlmIChpc1F1ZXJ5Um91dGVSZXNwb25zZShlKSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yICYmICFpc1JlZGlyZWN0UmVzcG9uc2UoZS5yZXNwb25zZSkpIHtcbiAgICAgICAgICB0aHJvdyBlLnJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlLnJlc3BvbnNlO1xuICAgICAgfVxuICAgICAgLy8gUmVkaXJlY3RzIGFyZSBhbHdheXMgcmV0dXJuZWQgc2luY2UgdGhleSBkb24ndCBwcm9wYWdhdGUgdG8gY2F0Y2hcbiAgICAgIC8vIGJvdW5kYXJpZXNcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzcG9uc2UoZSkpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuICBhc3luYyBmdW5jdGlvbiBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgYWN0aW9uTWF0Y2gsIHJlcXVlc3RDb250ZXh0LCBpc1JvdXRlUmVxdWVzdCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvclxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIHJlcXVlc3QsIGFjdGlvbk1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwge1xuICAgICAgICBpc1N0YXRpY1JlcXVlc3Q6IHRydWUsXG4gICAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgICByZXF1ZXN0Q29udGV4dFxuICAgICAgfSk7XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBVaGhoaCAtIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgd2Ugc2hvdWxkIGFsd2F5cyB0aHJvdyB0aGVzZSBmcm9tXG4gICAgICAvLyBjYWxsTG9hZGVyT3JBY3Rpb24sIGJ1dCB0aGUgdHlwZSBuYXJyb3dpbmcgaGVyZSBrZWVwcyBUUyBoYXBweSBhbmQgd2VcbiAgICAgIC8vIGNhbiBnZXQgYmFjayBvbiB0aGUgXCJ0aHJvdyBhbGwgcmVkaXJlY3QgcmVzcG9uc2VzXCIgdHJhaW4gaGVyZSBzaG91bGRcbiAgICAgIC8vIHRoaXMgZXZlciBoYXBwZW4gOi9cbiAgICAgIHRocm93IG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiByZXN1bHQubG9jYXRpb25cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvclxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHNob3VsZCBvbmx5IGJlIG5vbi1SZXNwb25zZSB2YWx1ZXMgaWYgd2UgZ2V0IGhlcmUsIHNpbmNlXG4gICAgICAvLyBpc1JvdXRlUmVxdWVzdCBzaG91bGQgdGhyb3cgYW55IFJlc3BvbnNlIHJlY2VpdmVkIGluIGNhbGxMb2FkZXJPckFjdGlvblxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG4gICAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuZGVmaW5lZCwge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgfSk7XG4gICAgICAvLyBhY3Rpb24gc3RhdHVzIGNvZGVzIHRha2UgcHJlY2VkZW5jZSBvdmVyIGxvYWRlciBzdGF0dXMgY29kZXNcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICBsZXQgbG9hZGVyUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICByZWRpcmVjdDogcmVxdWVzdC5yZWRpcmVjdCxcbiAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWxcbiAgICB9KTtcbiAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEobG9hZGVyUmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwgcmVzdWx0LnN0YXR1c0NvZGUgPyB7XG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzQ29kZVxuICAgIH0gOiB7fSwge1xuICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfSxcbiAgICAgIGFjdGlvbkhlYWRlcnM6IF9leHRlbmRzKHt9LCByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH0gOiB7fSlcbiAgICB9KTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoLCBwZW5kaW5nQWN0aW9uRXJyb3IpIHtcbiAgICBsZXQgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeVJvdXRlKCkpXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0ICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubG9hZGVyKSAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxhenkpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlTWF0Y2gucm91dGUuaWRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVxdWVzdE1hdGNoZXMgPSByb3V0ZU1hdGNoID8gW3JvdXRlTWF0Y2hdIDogZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgT2JqZWN0LmtleXMocGVuZGluZ0FjdGlvbkVycm9yIHx8IHt9KVswXSk7XG4gICAgbGV0IG1hdGNoZXNUb0xvYWQgPSByZXF1ZXN0TWF0Y2hlcy5maWx0ZXIobSA9PiBtLnJvdXRlLmxvYWRlciB8fCBtLnJvdXRlLmxhenkpO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnkoKSlcbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChbLi4ubWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwge1xuICAgICAgaXNTdGF0aWNSZXF1ZXN0OiB0cnVlLFxuICAgICAgaXNSb3V0ZVJlcXVlc3QsXG4gICAgICByZXF1ZXN0Q29udGV4dFxuICAgIH0pKV0pO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZFwiKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgbGV0IGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gbWF0Y2gucm91dGUuaWQpKTtcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgaWYgKCFleGVjdXRlZExvYWRlcnMuaGFzKG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgICBjb250ZXh0LmxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcy5zaXplID4gMCA/IE9iamVjdC5mcm9tRW50cmllcyhhY3RpdmVEZWZlcnJlZHMuZW50cmllcygpKSA6IG51bGxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEdpdmVuIGFuIGV4aXN0aW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0IGFuZCBhbiBlcnJvciB0aHJvd24gYXQgcmVuZGVyIHRpbWUsXG4gKiBwcm92aWRlIGFuIHVwZGF0ZWQgU3RhdGljSGFuZGxlckNvbnRleHQgc3VpdGFibGUgZm9yIGEgc2Vjb25kIFNTUiByZW5kZXJcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSB7XG4gIHJldHVybiBvcHRzICE9IG51bGwgJiYgKFwiZm9ybURhdGFcIiBpbiBvcHRzICYmIG9wdHMuZm9ybURhdGEgIT0gbnVsbCB8fCBcImJvZHlcIiBpbiBvcHRzICYmIG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvKGxvY2F0aW9uLCBtYXRjaGVzLCBiYXNlbmFtZSwgcHJlcGVuZEJhc2VuYW1lLCB0bywgZnJvbVJvdXRlSWQsIHJlbGF0aXZlKSB7XG4gIGxldCBjb250ZXh0dWFsTWF0Y2hlcztcbiAgbGV0IGFjdGl2ZVJvdXRlTWF0Y2g7XG4gIGlmIChmcm9tUm91dGVJZCAhPSBudWxsICYmIHJlbGF0aXZlICE9PSBcInBhdGhcIikge1xuICAgIC8vIEdyYWIgbWF0Y2hlcyB1cCB0byB0aGUgY2FsbGluZyByb3V0ZSBzbyBvdXIgcm91dGUtcmVsYXRpdmUgbG9naWMgaXNcbiAgICAvLyByZWxhdGl2ZSB0byB0aGUgY29ycmVjdCBzb3VyY2Ugcm91dGUuICBXaGVuIHVzaW5nIHJlbGF0aXZlOnBhdGgsXG4gICAgLy8gZnJvbVJvdXRlSWQgaXMgaWdub3JlZCBzaW5jZSB0aGF0IGlzIGFsd2F5cyByZWxhdGl2ZSB0byB0aGUgY3VycmVudFxuICAgIC8vIGxvY2F0aW9uIHBhdGhcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IFtdO1xuICAgIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICAgIGNvbnRleHR1YWxNYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgaWYgKG1hdGNoLnJvdXRlLmlkID09PSBmcm9tUm91dGVJZCkge1xuICAgICAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBSZXNvbHZlIHRoZSByZWxhdGl2ZSBwYXRoXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvID8gdG8gOiBcIi5cIiwgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMoY29udGV4dHVhbE1hdGNoZXMpLm1hcChtID0+IG0ucGF0aG5hbWVCYXNlKSwgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuICAvLyBXaGVuIGB0b2AgaXMgbm90IHNwZWNpZmllZCB3ZSBpbmhlcml0IHNlYXJjaC9oYXNoIGZyb20gdGhlIGN1cnJlbnRcbiAgLy8gbG9jYXRpb24sIHVubGlrZSB3aGVuIHRvPVwiLlwiIGFuZCB3ZSBqdXN0IGluaGVyaXQgdGhlIHBhdGguXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgaWYgKHRvID09IG51bGwpIHtcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB9XG4gIC8vIEFkZCBhbiA/aW5kZXggcGFyYW0gZm9yIG1hdGNoZWQgaW5kZXggcm91dGVzIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKCh0byA9PSBudWxsIHx8IHRvID09PSBcIlwiIHx8IHRvID09PSBcIi5cIikgJiYgYWN0aXZlUm91dGVNYXRjaCAmJiBhY3RpdmVSb3V0ZU1hdGNoLnJvdXRlLmluZGV4ICYmICFoYXNOYWtlZEluZGV4UXVlcnkocGF0aC5zZWFyY2gpKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUuICBJZlxuICAvLyB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzXG4gIC8vIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoXG4gIC8vIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAocHJlcGVuZEJhc2VuYW1lICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gTm9ybWFsaXplIG5hdmlnYXRpb24gb3B0aW9ucyBieSBjb252ZXJ0aW5nIGZvcm1NZXRob2Q9R0VUIGZvcm1EYXRhIG9iamVjdHMgdG9cbi8vIFVSTFNlYXJjaFBhcmFtcyBzbyB0aGV5IGJlaGF2ZSBpZGVudGljYWxseSB0byBsaW5rcyB3aXRoIHF1ZXJ5IHBhcmFtc1xuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKG5vcm1hbGl6ZUZvcm1NZXRob2QsIGlzRmV0Y2hlciwgcGF0aCwgb3B0cykge1xuICAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgaWYgKCFvcHRzIHx8ICFpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9XG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH1cbiAgbGV0IGdldEludmFsaWRCb2R5RXJyb3IgPSAoKSA9PiAoe1xuICAgIHBhdGgsXG4gICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICB0eXBlOiBcImludmFsaWQtYm9keVwiXG4gICAgfSlcbiAgfSk7XG4gIC8vIENyZWF0ZSBhIFN1Ym1pc3Npb24gb24gbm9uLUdFVCBuYXZpZ2F0aW9uc1xuICBsZXQgcmF3Rm9ybU1ldGhvZCA9IG9wdHMuZm9ybU1ldGhvZCB8fCBcImdldFwiO1xuICBsZXQgZm9ybU1ldGhvZCA9IG5vcm1hbGl6ZUZvcm1NZXRob2QgPyByYXdGb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCkgOiByYXdGb3JtTWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIGxldCBmb3JtQWN0aW9uID0gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCk7XG4gIGlmIChvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gdGV4dCBvbmx5IHN1cHBvcnQgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0ID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IG9wdHMuYm9keSA6IG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhIHx8IG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNwbGFpbi10ZXh0LWZvcm0tZGF0YVxuICAgICAgQXJyYXkuZnJvbShvcHRzLmJvZHkuZW50cmllcygpKS5yZWR1Y2UoKGFjYywgX3JlZjMpID0+IHtcbiAgICAgICAgbGV0IFtuYW1lLCB2YWx1ZV0gPSBfcmVmMztcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBhY2MgKyBuYW1lICsgXCI9XCIgKyB2YWx1ZSArIFwiXFxuXCI7XG4gICAgICB9LCBcIlwiKSA6IFN0cmluZyhvcHRzLmJvZHkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgLy8ganNvbiBvbmx5IHN1cHBvcnRzIFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBsZXQganNvbiA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG9wdHMuYm9keSkgOiBvcHRzLmJvZHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGludmFyaWFudCh0eXBlb2YgRm9ybURhdGEgPT09IFwiZnVuY3Rpb25cIiwgXCJGb3JtRGF0YSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnRcIik7XG4gIGxldCBzZWFyY2hQYXJhbXM7XG4gIGxldCBmb3JtRGF0YTtcbiAgaWYgKG9wdHMuZm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuZm9ybURhdGE7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5ib2R5O1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgIHNlYXJjaFBhcmFtcyA9IG9wdHMuYm9keTtcbiAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5ID09IG51bGwpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgfVxuICB9XG4gIGxldCBzdWJtaXNzaW9uID0ge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgZm9ybURhdGEsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZFxuICB9O1xuICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfTtcbiAgfVxuICAvLyBGbGF0dGVuIHN1Ym1pc3Npb24gb250byBVUkxTZWFyY2hQYXJhbXMgZm9yIEdFVCBzdWJtaXNzaW9uc1xuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcbiAgLy8gT24gR0VUIG5hdmlnYXRpb24gc3VibWlzc2lvbnMgd2UgY2FuIGRyb3AgdGhlID9pbmRleCBwYXJhbSBmcm9tIHRoZVxuICAvLyByZXN1bHRpbmcgbG9jYXRpb24gc2luY2UgYWxsIGxvYWRlcnMgd2lsbCBydW4uICBCdXQgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnNcbiAgLy8gb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIHNvIHdlIG5lZWQgdG8gcHJlc2VydmUgYW55IGluY29taW5nID9pbmRleCBwYXJhbXNcbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG4gIHBhcnNlZFBhdGguc2VhcmNoID0gXCI/XCIgKyBzZWFyY2hQYXJhbXM7XG4gIHJldHVybiB7XG4gICAgcGF0aDogY3JlYXRlUGF0aChwYXJzZWRQYXRoKSxcbiAgICBzdWJtaXNzaW9uXG4gIH07XG59XG4vLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5mdW5jdGlvbiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKSB7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzO1xuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRhcnlNYXRjaGVzO1xufVxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChoaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICBsZXQgYWN0aW9uUmVzdWx0ID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdIDogcGVuZGluZ0FjdGlvbkRhdGEgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdBY3Rpb25EYXRhKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGN1cnJlbnRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdGF0ZS5sb2NhdGlvbik7XG4gIGxldCBuZXh0VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuICBsZXQgYm91bmRhcnlJZCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC5rZXlzKHBlbmRpbmdFcnJvcilbMF0gOiB1bmRlZmluZWQ7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKTtcbiAgbGV0IG5hdmlnYXRpb25NYXRjaGVzID0gYm91bmRhcnlNYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgaWYgKG1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIC8vIFdlIGhhdmVuJ3QgbG9hZGVkIHRoaXMgcm91dGUgeWV0IHNvIHdlIGRvbid0IGtub3cgaWYgaXQncyBnb3QgYSBsb2FkZXIhXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG1hdGNoLnJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBjYWxsIHRoZSBsb2FkZXIgb24gbmV3IHJvdXRlIGluc3RhbmNlcyBhbmQgcGVuZGluZyBkZWZlciBjYW5jZWxsYXRpb25zXG4gICAgaWYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZShpZCA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG4gICAgbGV0IGN1cnJlbnRSb3V0ZU1hdGNoID0gc3RhdGUubWF0Y2hlc1tpbmRleF07XG4gICAgbGV0IG5leHRSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgcmV0dXJuIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBjdXJyZW50UGFyYW1zOiBjdXJyZW50Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbmV4dFJvdXRlTWF0Y2gucGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6XG4gICAgICAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHx8XG4gICAgICAvLyBDbGlja2VkIHRoZSBzYW1lIGxpbmssIHJlc3VibWl0dGVkIGEgR0VUIGZvcm1cbiAgICAgIGN1cnJlbnRVcmwucGF0aG5hbWUgKyBjdXJyZW50VXJsLnNlYXJjaCA9PT0gbmV4dFVybC5wYXRobmFtZSArIG5leHRVcmwuc2VhcmNoIHx8XG4gICAgICAvLyBTZWFyY2ggcGFyYW1zIGFmZmVjdCBhbGwgbG9hZGVyc1xuICAgICAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpXG4gICAgfSkpO1xuICB9KTtcbiAgLy8gUGljayBmZXRjaGVyLmxvYWRzIHRoYXQgbmVlZCB0byBiZSByZXZhbGlkYXRlZFxuICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBbXTtcbiAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICAvLyBEb24ndCByZXZhbGlkYXRlIGlmIGZldGNoZXIgd29uJ3QgYmUgcHJlc2VudCBpbiB0aGUgc3Vic2VxdWVudCByZW5kZXJcbiAgICBpZiAoIW1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IGYucm91dGVJZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGZldGNoZXJNYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGYucGF0aCwgYmFzZW5hbWUpO1xuICAgIC8vIElmIHRoZSBmZXRjaGVyIHBhdGggbm8gbG9uZ2VyIG1hdGNoZXMsIHB1c2ggaXQgaW4gd2l0aCBudWxsIG1hdGNoZXMgc29cbiAgICAvLyB3ZSBjYW4gdHJpZ2dlciBhIDQwNCBpbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGFcbiAgICBpZiAoIWZldGNoZXJNYXRjaGVzKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogbnVsbCxcbiAgICAgICAgbWF0Y2g6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXZhbGlkYXRpbmcgZmV0Y2hlcnMgYXJlIGRlY291cGxlZCBmcm9tIHRoZSByb3V0ZSBtYXRjaGVzIHNpbmNlIHRoZXlcbiAgICAvLyBsb2FkIGZyb20gYSBzdGF0aWMgaHJlZi4gIFRoZXkgb25seSBzZXQgYGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlYCBvblxuICAgIC8vIGV4cGxpY2l0IHJldmFsaWRhdGlvbiBkdWUgdG8gc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICAgIC8vXG4gICAgLy8gVGhleSBhdXRvbWF0aWNhbGx5IHJldmFsaWRhdGUgd2l0aG91dCBldmVuIGNhbGxpbmcgc2hvdWxkUmV2YWxpZGF0ZSBpZjpcbiAgICAvLyAtIFRoZXkgd2VyZSBjYW5jZWxsZWRcbiAgICAvLyAtIFRoZXkncmUgaW4gdGhlIG1pZGRsZSBvZiB0aGVpciBmaXJzdCBsb2FkIGFuZCB0aGVyZWZvcmUgdGhpcyBpcyBzdGlsbFxuICAgIC8vICAgYW4gaW5pdGlhbCBsb2FkIGFuZCBub3QgYSByZXZhbGlkYXRpb25cbiAgICAvL1xuICAgIC8vIElmIG5laXRoZXIgb2YgdGhvc2UgaXMgdHJ1ZSwgdGhlbiB0aGV5IF9hbHdheXNfIGNoZWNrIHNob3VsZFJldmFsaWRhdGVcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIGxldCBpc1BlcmZvcm1pbmdJbml0aWFsTG9hZCA9IGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSAhPT0gXCJpZGxlXCIgJiYgZmV0Y2hlci5kYXRhID09PSB1bmRlZmluZWQgJiZcbiAgICAvLyBJZiBhIGZldGNoZXIubG9hZCByZWRpcmVjdGVkIHRoZW4gaXQnbGwgYmUgXCJsb2FkaW5nXCIgd2l0aG91dCBhbnkgZGF0YVxuICAgIC8vIHNvIGVuc3VyZSB3ZSdyZSBub3QgcHJvY2Vzc2luZyB0aGUgcmVkaXJlY3QgZnJvbSB0aGlzIGZldGNoZXJcbiAgICAhZmV0Y2hSZWRpcmVjdElkcy5oYXMoa2V5KTtcbiAgICBsZXQgZmV0Y2hlck1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2goZmV0Y2hlck1hdGNoZXMsIGYucGF0aCk7XG4gICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBjYW5jZWxsZWRGZXRjaGVyTG9hZHMuaW5jbHVkZXMoa2V5KSB8fCBpc1BlcmZvcm1pbmdJbml0aWFsTG9hZCB8fCBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IHN0YXRlLm1hdGNoZXNbc3RhdGUubWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBpc1JldmFsaWRhdGlvblJlcXVpcmVkXG4gICAgfSkpO1xuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogZmV0Y2hlck1hdGNoZXMsXG4gICAgICAgIG1hdGNoOiBmZXRjaGVyTWF0Y2gsXG4gICAgICAgIGNvbnRyb2xsZXI6IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuZnVuY3Rpb24gaXNOZXdMb2FkZXIoY3VycmVudExvYWRlckRhdGEsIGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGlzTmV3ID1cbiAgLy8gW2FdIC0+IFthLCBiXVxuICAhY3VycmVudE1hdGNoIHx8XG4gIC8vIFthLCBiXSAtPiBbYSwgY11cbiAgbWF0Y2gucm91dGUuaWQgIT09IGN1cnJlbnRNYXRjaC5yb3V0ZS5pZDtcbiAgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkYXRhIGZvciBhIHJlLXVzZWQgcm91dGUsIHBvdGVudGlhbGx5XG4gIC8vIGZyb20gYSBwcmlvciBlcnJvciBvciBmcm9tIGEgY2FuY2VsbGVkIHBlbmRpbmcgZGVmZXJyZWRcbiAgbGV0IGlzTWlzc2luZ0RhdGEgPSBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZDtcbiAgLy8gQWx3YXlzIGxvYWQgaWYgdGhpcyBpcyBhIG5ldC1uZXcgcm91dGUgb3Igd2UgZG9uJ3QgeWV0IGhhdmUgZGF0YVxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cbmZ1bmN0aW9uIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB7XG4gIGxldCBjdXJyZW50UGF0aCA9IGN1cnJlbnRNYXRjaC5yb3V0ZS5wYXRoO1xuICByZXR1cm4gKFxuICAgIC8vIHBhcmFtIGNoYW5nZSBmb3IgdGhpcyBtYXRjaCwgL3VzZXJzLzEyMyAtPiAvdXNlcnMvNDU2XG4gICAgY3VycmVudE1hdGNoLnBhdGhuYW1lICE9PSBtYXRjaC5wYXRobmFtZSB8fFxuICAgIC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAhPSBudWxsICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXVxuICApO1xufVxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihsb2FkZXJNYXRjaCwgYXJnKSB7XG4gIGlmIChsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShhcmcpO1xuICAgIGlmICh0eXBlb2Ygcm91dGVDaG9pY2UgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gcm91dGVDaG9pY2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG4vKipcbiAqIEV4ZWN1dGUgcm91dGUubGF6eSgpIG1ldGhvZHMgdG8gbGF6aWx5IGxvYWQgcm91dGUgbW9kdWxlcyAobG9hZGVyLCBhY3Rpb24sXG4gKiBzaG91bGRSZXZhbGlkYXRlKSBhbmQgdXBkYXRlIHRoZSByb3V0ZU1hbmlmZXN0IGluIHBsYWNlIHdoaWNoIHNoYXJlcyBvYmplY3RzXG4gKiB3aXRoIGRhdGFSb3V0ZXMgc28gdGhvc2UgZ2V0IHVwZGF0ZWQgYXMgd2VsbC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZExhenlSb3V0ZU1vZHVsZShyb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCkge1xuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGxhenlSb3V0ZSA9IGF3YWl0IHJvdXRlLmxhenkoKTtcbiAgLy8gSWYgdGhlIGxhenkgcm91dGUgZnVuY3Rpb24gd2FzIGV4ZWN1dGVkIGFuZCByZW1vdmVkIGJ5IGFub3RoZXIgcGFyYWxsZWxcbiAgLy8gY2FsbCB0aGVuIHdlIGNhbiByZXR1cm4gLSBmaXJzdCBsYXp5KCkgdG8gZmluaXNoIHdpbnMgYmVjYXVzZSB0aGUgcmV0dXJuXG4gIC8vIHZhbHVlIG9mIGxhenkgaXMgZXhwZWN0ZWQgdG8gYmUgc3RhdGljXG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcm91dGVUb1VwZGF0ZSA9IG1hbmlmZXN0W3JvdXRlLmlkXTtcbiAgaW52YXJpYW50KHJvdXRlVG9VcGRhdGUsIFwiTm8gcm91dGUgZm91bmQgaW4gbWFuaWZlc3RcIik7XG4gIC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG4gIGxldCByb3V0ZVVwZGF0ZXMgPSB7fTtcbiAgZm9yIChsZXQgbGF6eVJvdXRlUHJvcGVydHkgaW4gbGF6eVJvdXRlKSB7XG4gICAgbGV0IHN0YXRpY1JvdXRlVmFsdWUgPSByb3V0ZVRvVXBkYXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICBsZXQgaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkID0gc3RhdGljUm91dGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpc24ndCBzdGF0aWMgc2luY2UgaXQgc2hvdWxkIGFsd2F5cyBiZSB1cGRhdGVkIGJhc2VkXG4gICAgLy8gb24gdGhlIHJvdXRlIHVwZGF0ZXNcbiAgICBsYXp5Um91dGVQcm9wZXJ0eSAhPT0gXCJoYXNFcnJvckJvdW5kYXJ5XCI7XG4gICAgd2FybmluZyghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkLCBcIlJvdXRlIFxcXCJcIiArIHJvdXRlVG9VcGRhdGUuaWQgKyBcIlxcXCIgaGFzIGEgc3RhdGljIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIFwiICsgXCJkZWZpbmVkIGJ1dCBpdHMgbGF6eSBmdW5jdGlvbiBpcyBhbHNvIHJldHVybmluZyBhIHZhbHVlIGZvciB0aGlzIHByb3BlcnR5LiBcIiArIChcIlRoZSBsYXp5IHJvdXRlIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIHdpbGwgYmUgaWdub3JlZC5cIikpO1xuICAgIGlmICghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkICYmICFpbW11dGFibGVSb3V0ZUtleXMuaGFzKGxhenlSb3V0ZVByb3BlcnR5KSkge1xuICAgICAgcm91dGVVcGRhdGVzW2xhenlSb3V0ZVByb3BlcnR5XSA9IGxhenlSb3V0ZVtsYXp5Um91dGVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG4gIC8vIE11dGF0ZSB0aGUgcm91dGUgd2l0aCB0aGUgcHJvdmlkZWQgdXBkYXRlcy4gIERvIHRoaXMgZmlyc3Qgc28gd2UgcGFzc1xuICAvLyB0aGUgdXBkYXRlZCB2ZXJzaW9uIHRvIG1hcFJvdXRlUHJvcGVydGllc1xuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIHJvdXRlVXBkYXRlcyk7XG4gIC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCBfZXh0ZW5kcyh7fSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlVG9VcGRhdGUpLCB7XG4gICAgbGF6eTogdW5kZWZpbmVkXG4gIH0pKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgcmVzdWx0VHlwZTtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IG9uUmVqZWN0O1xuICBsZXQgcnVuSGFuZGxlciA9IGhhbmRsZXIgPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDtcbiAgICBsZXQgYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG4gICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtcyxcbiAgICAgIGNvbnRleHQ6IG9wdHMucmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gIH07XG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gUnVuIHN0YXRpY2FsbHkgZGVmaW5lZCBoYW5kbGVyIGluIHBhcmFsbGVsIHdpdGggbGF6eSgpXG4gICAgICAgIGxldCB2YWx1ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbcnVuSGFuZGxlcihoYW5kbGVyKSwgbG9hZExhenlSb3V0ZU1vZHVsZShtYXRjaC5yb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCldKTtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWVzWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTG9hZCBsYXp5IHJvdXRlIG1vZHVsZSwgdGhlbiBydW4gYW55IHJldHVybmVkIGhhbmRsZXJcbiAgICAgICAgYXdhaXQgbG9hZExhenlSb3V0ZU1vZHVsZShtYXRjaC5yb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCk7XG4gICAgICAgIGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAvLyBIYW5kbGVyIHN0aWxsIHJ1biBldmVuIGlmIHdlIGdvdCBpbnRlcnJ1cHRlZCB0byBtYWludGFpbiBjb25zaXN0ZW5jeVxuICAgICAgICAgIC8vIHdpdGggdW4tYWJvcnRhYmxlIGJlaGF2aW9yIG9mIGhhbmRsZXIgZXhlY3V0aW9uIG9uIG5vbi1sYXp5IG9yXG4gICAgICAgICAgLy8gcHJldmlvdXNseS1sYXp5LWxvYWRlZCByb3V0ZXNcbiAgICAgICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiYWN0aW9uXCIpIHtcbiAgICAgICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgICAgbGV0IHBhdGhuYW1lID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICAgICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgcm91dGVJZDogbWF0Y2gucm91dGUuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBsYXp5KCkgcm91dGUgaGFzIG5vIGxvYWRlciB0byBydW4uICBTaG9ydCBjaXJjdWl0IGhlcmUgc28gd2UgZG9uJ3RcbiAgICAgICAgICAvLyBoaXQgdGhlIGludmFyaWFudCBiZWxvdyB0aGF0IGVycm9ycyBvbiByZXR1cm5pbmcgdW5kZWZpbmVkLlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaGFuZGxlcikge1xuICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgbGV0IHBhdGhuYW1lID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9XG4gICAgaW52YXJpYW50KHJlc3VsdCAhPT0gdW5kZWZpbmVkLCBcIllvdSBkZWZpbmVkIFwiICsgKHR5cGUgPT09IFwiYWN0aW9uXCIgPyBcImFuIGFjdGlvblwiIDogXCJhIGxvYWRlclwiKSArIFwiIGZvciByb3V0ZSBcIiArIChcIlxcXCJcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJcXFwiIGJ1dCBkaWRuJ3QgcmV0dXJuIGFueXRoaW5nIGZyb20geW91ciBgXCIgKyB0eXBlICsgXCJgIFwiKSArIFwiZnVuY3Rpb24uIFBsZWFzZSByZXR1cm4gYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVzdWx0VHlwZSA9IFJlc3VsdFR5cGUuZXJyb3I7XG4gICAgcmVzdWx0ID0gZTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAob25SZWplY3QpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG4gICAgfVxuICB9XG4gIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgICAvLyBQcm9jZXNzIHJlZGlyZWN0c1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c0NvZGVzLmhhcyhzdGF0dXMpKSB7XG4gICAgICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgICAgIGludmFyaWFudChsb2NhdGlvbiwgXCJSZWRpcmVjdHMgcmV0dXJuZWQvdGhyb3duIGZyb20gbG9hZGVycy9hY3Rpb25zIG11c3QgaGF2ZSBhIExvY2F0aW9uIGhlYWRlclwiKTtcbiAgICAgIC8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiBpbnRlcm5hbCByZWRpcmVjdHNcbiAgICAgIGlmICghQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgICAgIGxvY2F0aW9uID0gbm9ybWFsaXplVG8obmV3IFVSTChyZXF1ZXN0LnVybCksIG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5pbmRleE9mKG1hdGNoKSArIDEpLCBiYXNlbmFtZSwgdHJ1ZSwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIGlmICghb3B0cy5pc1N0YXRpY1JlcXVlc3QpIHtcbiAgICAgICAgLy8gU3RyaXAgb2ZmIHRoZSBwcm90b2NvbCtvcmlnaW4gZm9yIHNhbWUtb3JpZ2luICsgc2FtZS1iYXNlbmFtZSBhYnNvbHV0ZVxuICAgICAgICAvLyByZWRpcmVjdHMuIElmIHRoaXMgaXMgYSBzdGF0aWMgcmVxdWVzdCwgd2UgY2FuIGxldCBpdCBnbyBiYWNrIHRvIHRoZVxuICAgICAgICAvLyBicm93c2VyIGFzLWlzXG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGxldCB1cmwgPSBsb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBsb2NhdGlvbikgOiBuZXcgVVJMKGxvY2F0aW9uKTtcbiAgICAgICAgbGV0IGlzU2FtZUJhc2VuYW1lID0gc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSAhPSBudWxsO1xuICAgICAgICBpZiAodXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgaXNTYW1lQmFzZW5hbWUpIHtcbiAgICAgICAgICBsb2NhdGlvbiA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2ggKyB1cmwuaGFzaDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcHJvY2VzcyByZWRpcmVjdHMgaW4gdGhlIHJvdXRlciBkdXJpbmcgc3RhdGljIHJlcXVlc3RzIHJlcXVlc3RzLlxuICAgICAgLy8gSW5zdGVhZCwgdGhyb3cgdGhlIFJlc3BvbnNlIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgaXQgd2l0aCBhbiBIVFRQXG4gICAgICAvLyByZWRpcmVjdC4gIFdlIGFsc28gdXBkYXRlIHRoZSBMb2NhdGlvbiBoZWFkZXIgaW4gcGxhY2UgaW4gdGhpcyBmbG93IHNvXG4gICAgICAvLyBiYXNlbmFtZSBhbmQgcmVsYXRpdmUgcm91dGluZyBpcyB0YWtlbiBpbnRvIGFjY291bnRcbiAgICAgIGlmIChvcHRzLmlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICByZXN1bHQuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUucmVkaXJlY3QsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIHJldmFsaWRhdGU6IHJlc3VsdC5oZWFkZXJzLmdldChcIlgtUmVtaXgtUmV2YWxpZGF0ZVwiKSAhPT0gbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFjayBkaXJlY3RseVxuICAgIC8vIHdpdGhvdXQgdW53cmFwcGluZy4gIFdlIGRvIHRoaXMgd2l0aCB0aGUgUXVlcnlSb3V0ZVJlc3BvbnNlIHdyYXBwZXJcbiAgICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGtub3cgd2hldGhlciBpdCB3YXMgcmV0dXJuZWQgb3IgdGhyb3duXG4gICAgaWYgKG9wdHMuaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gICAgICB0aHJvdyB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUgfHwgUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICByZXNwb25zZTogcmVzdWx0XG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGVudFR5cGUgPSByZXN1bHQuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7XG4gICAgLy8gQ2hlY2sgYmV0d2VlbiB3b3JkIGJvdW5kYXJpZXMgaW5zdGVhZCBvZiBzdGFydHNXaXRoKCkgZHVlIHRvIHRoZSBsYXN0XG4gICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIC9cXGJhcHBsaWNhdGlvblxcL2pzb25cXGIvLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgZGF0YSxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgIH07XG4gIH1cbiAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgIGVycm9yOiByZXN1bHRcbiAgICB9O1xuICB9XG4gIGlmIChpc0RlZmVycmVkRGF0YShyZXN1bHQpKSB7XG4gICAgdmFyIF9yZXN1bHQkaW5pdCwgX3Jlc3VsdCRpbml0MjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZCxcbiAgICAgIGRlZmVycmVkRGF0YTogcmVzdWx0LFxuICAgICAgc3RhdHVzQ29kZTogKF9yZXN1bHQkaW5pdCA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6ICgoX3Jlc3VsdCRpbml0MiA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0Mi5oZWFkZXJzKSAmJiBuZXcgSGVhZGVycyhyZXN1bHQuaW5pdC5oZWFkZXJzKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59XG4vLyBVdGlsaXR5IG1ldGhvZCBmb3IgY3JlYXRpbmcgdGhlIFJlcXVlc3QgaW5zdGFuY2VzIGZvciBsb2FkZXJzL2FjdGlvbnMgZHVyaW5nXG4vLyBjbGllbnQtc2lkZSBuYXZpZ2F0aW9ucyBhbmQgZmV0Y2hlcy4gIER1cmluZyBTU1Igd2Ugd2lsbCBhbHdheXMgaGF2ZSBhXG4vLyBSZXF1ZXN0IGluc3RhbmNlIGZyb20gdGhlIHN0YXRpYyBoYW5kbGVyIChxdWVyeS9xdWVyeVJvdXRlKVxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RyaXBIYXNoRnJvbVBhdGgobG9jYXRpb24pKS50b1N0cmluZygpO1xuICBsZXQgaW5pdCA9IHtcbiAgICBzaWduYWxcbiAgfTtcbiAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtRW5jVHlwZVxuICAgIH0gPSBzdWJtaXNzaW9uO1xuICAgIC8vIERpZG4ndCB0aGluayB3ZSBuZWVkZWQgdGhpcyBidXQgaXQgdHVybnMgb3V0IHVubGlrZSBvdGhlciBtZXRob2RzLCBwYXRjaFxuICAgIC8vIHdvbid0IGJlIHByb3Blcmx5IG5vcm1hbGl6ZWQgdG8gdXBwZXJjYXNlIGFuZCByZXN1bHRzIGluIGEgNDA1IGVycm9yLlxuICAgIC8vIFNlZTogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbWV0aG9kXG4gICAgaW5pdC5tZXRob2QgPSBmb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgaW5pdC5oZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBmb3JtRW5jVHlwZVxuICAgICAgfSk7XG4gICAgICBpbml0LmJvZHkgPSBKU09OLnN0cmluZ2lmeShzdWJtaXNzaW9uLmpzb24pO1xuICAgIH0gZWxzZSBpZiAoZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24udGV4dDtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICYmIHN1Ym1pc3Npb24uZm9ybURhdGEpIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoc3VibWlzc2lvbi5mb3JtRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi5mb3JtRGF0YTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5mdW5jdGlvbiBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhmb3JtRGF0YSkge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgZm9ybURhdGEuZW50cmllcygpKSB7XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjY29udmVydGluZy1hbi1lbnRyeS1saXN0LXRvLWEtbGlzdC1vZi1uYW1lLXZhbHVlLXBhaXJzXG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlIDogdmFsdWUubmFtZSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcykge1xuICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIHNlYXJjaFBhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIGFjdGl2ZURlZmVycmVkcykge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGEgPSB7fTtcbiAgbGV0IGVycm9ycyA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVycyA9IHt9O1xuICAvLyBQcm9jZXNzIGxvYWRlciByZXN1bHRzIGludG8gc3RhdGUubG9hZGVyRGF0YS9zdGF0ZS5lcnJvcnNcbiAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2hlc1RvTG9hZFtpbmRleF0ucm91dGUuaWQ7XG4gICAgaW52YXJpYW50KCFpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCksIFwiQ2Fubm90IGhhbmRsZSByZWRpcmVjdCByZXN1bHRzIGluIHByb2Nlc3NMb2FkZXJEYXRhXCIpO1xuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvclxuICAgICAgLy8gZXJyb3IgYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcbiAgICAgIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF07XG4gICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGVycm9ycyA9IGVycm9ycyB8fCB7fTtcbiAgICAgIC8vIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnlcbiAgICAgIGlmIChlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPT0gbnVsbCkge1xuICAgICAgICBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICAgIC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlXG4gICAgICBsb2FkZXJEYXRhW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kYXRhO1xuICAgICAgfVxuICAgICAgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgJiYgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiAhZm91bmRFcnJvcikge1xuICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICAvLyBJZiB3ZSBkaWRuJ3QgY29uc3VtZSB0aGUgcGVuZGluZyBhY3Rpb24gZXJyb3IgKGkuZS4sIGFsbCBsb2FkZXJzXG4gIC8vIHJlc29sdmVkKSwgdGhlbiBjb25zdW1lIGl0IGhlcmUuICBBbHNvIGNsZWFyIG91dCBhbnkgbG9hZGVyRGF0YSBmb3IgdGhlXG4gIC8vIHRocm93aW5nIHJvdXRlXG4gIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICBlcnJvcnMgPSBwZW5kaW5nRXJyb3I7XG4gICAgbG9hZGVyRGF0YVtPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUgfHwgMjAwLFxuICAgIGxvYWRlckhlYWRlcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIGxldCB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfSA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAvLyBQcm9jZXNzIHJlc3VsdHMgZnJvbSBvdXIgcmV2YWxpZGF0aW5nIGZldGNoZXJzXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgbWF0Y2gsXG4gICAgICBjb250cm9sbGVyXG4gICAgfSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW2luZGV4XTtcbiAgICBpbnZhcmlhbnQoZmV0Y2hlclJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBmZXRjaGVyUmVzdWx0c1tpbmRleF0gIT09IHVuZGVmaW5lZCwgXCJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdFwiKTtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNbaW5kZXhdO1xuICAgIC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG4gICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gTm90aGluZyB0byBkbyBmb3IgYWJvcnRlZCBmZXRjaGVyc1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWF0Y2gucm91dGUuaWQpO1xuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgfSBlbHNlIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgcmVkaXJlY3RzIHNob3VsZCBnZXQgcHJvY2Vzc2VkIGFib3ZlLCBidXQgd2VcbiAgICAgIC8vIGtlZXAgdGhpcyB0byB0eXBlIG5hcnJvdyB0byBhIHN1Y2Nlc3MgcmVzdWx0IGluIHRoZSBlbHNlXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgcmV2YWxpZGF0aW9uIHJlZGlyZWN0XCIpO1xuICAgIH0gZWxzZSBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGRlZmVycmVkIGRhdGEgc2hvdWxkIGJlIGF3YWl0ZWQgZm9yIGZldGNoZXJzXG4gICAgICAvLyBpbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5mdW5jdGlvbiBtZXJnZUxvYWRlckRhdGEobG9hZGVyRGF0YSwgbmV3TG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSB7XG4gIGxldCBtZXJnZWRMb2FkZXJEYXRhID0gX2V4dGVuZHMoe30sIG5ld0xvYWRlckRhdGEpO1xuICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG4gICAgaWYgKG5ld0xvYWRlckRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCAmJiBtYXRjaC5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIGtleXMgbm90IGluY2x1ZGVkIGluIG5ld0xvYWRlckRhdGEgYW5kIHdoZXJlIGEgbG9hZGVyXG4gICAgICAvLyB3YXNuJ3QgcmVtb3ZlZCBieSBITVJcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgLy8gRG9uJ3Qga2VlcCBhbnkgbG9hZGVyIGRhdGEgYmVsb3cgdGhlIGJvdW5kYXJ5XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1lcmdlZExvYWRlckRhdGE7XG59XG4vLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuZnVuY3Rpb24gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCByb3V0ZUlkKSB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkID8gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpICsgMSkgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiBlbGlnaWJsZU1hdGNoZXMucmV2ZXJzZSgpLmZpbmQobSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8IG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcykge1xuICAvLyBQcmVmZXIgYSByb290IGxheW91dCByb3V0ZSBpZiBwcmVzZW50LCBvdGhlcndpc2Ugc2hpbSBpbiBhIHJvdXRlIG9iamVjdFxuICBsZXQgcm91dGUgPSByb3V0ZXMuZmluZChyID0+IHIuaW5kZXggfHwgIXIucGF0aCB8fCByLnBhdGggPT09IFwiL1wiKSB8fCB7XG4gICAgaWQ6IFwiX19zaGltLWVycm9yLXJvdXRlX19cIlxuICB9O1xuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFt7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICBwYXRobmFtZUJhc2U6IFwiXCIsXG4gICAgICByb3V0ZVxuICAgIH1dLFxuICAgIHJvdXRlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKHN0YXR1cywgX3RlbXA0KSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUsXG4gICAgcm91dGVJZCxcbiAgICBtZXRob2QsXG4gICAgdHlwZVxuICB9ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNDtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcbiAgaWYgKHN0YXR1cyA9PT0gNDAwKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiQmFkIFJlcXVlc3RcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZCArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGEgYGxvYWRlcmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGVmZXItYWN0aW9uXCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiaW52YWxpZC1ib2R5XCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiVW5hYmxlIHRvIGVuY29kZSBzdWJtaXNzaW9uIGJvZHlcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJGb3JiaWRkZW5cIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIlJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIgZG9lcyBub3QgbWF0Y2ggVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDQpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJOb3QgRm91bmRcIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHJvdXRlIG1hdGNoZXMgVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDUpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJNZXRob2QgTm90IEFsbG93ZWRcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYW4gYGFjdGlvbmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFxcXCJcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCJcXFwiXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZShzdGF0dXMgfHwgNTAwLCBzdGF0dXNUZXh0LCBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSwgdHJ1ZSk7XG59XG4vLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHBhdGgpIDogcGF0aDtcbiAgcmV0dXJuIGNyZWF0ZVBhdGgoX2V4dGVuZHMoe30sIHBhcnNlZFBhdGgsIHtcbiAgICBoYXNoOiBcIlwiXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICBpZiAoYS5wYXRobmFtZSAhPT0gYi5wYXRobmFtZSB8fCBhLnNlYXJjaCAhPT0gYi5zZWFyY2gpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGEuaGFzaCA9PT0gXCJcIikge1xuICAgIC8vIC9wYWdlIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gYi5oYXNoICE9PSBcIlwiO1xuICB9IGVsc2UgaWYgKGEuaGFzaCA9PT0gYi5oYXNoKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoYi5oYXNoICE9PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNvdGhlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIElmIHRoZSBoYXNoIGlzIHJlbW92ZWQgdGhlIGJyb3dzZXIgd2lsbCByZS1wZXJmb3JtIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyXG4gIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2VcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmRlZmVycmVkO1xufVxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIChyZXN1bHQgJiYgcmVzdWx0LnR5cGUpID09PSBSZXN1bHRUeXBlLnJlZGlyZWN0O1xufVxuZnVuY3Rpb24gaXNEZWZlcnJlZERhdGEodmFsdWUpIHtcbiAgbGV0IGRlZmVycmVkID0gdmFsdWU7XG4gIHJldHVybiBkZWZlcnJlZCAmJiB0eXBlb2YgZGVmZXJyZWQgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGRlZmVycmVkLmRhdGEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGRlZmVycmVkLnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5jYW5jZWwgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQucmVzb2x2ZURhdGEgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdmFsdWUuaGVhZGVycyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUuYm9keSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCFpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICByZXR1cm4gc3RhdHVzID49IDMwMCAmJiBzdGF0dXMgPD0gMzk5ICYmIGxvY2F0aW9uICE9IG51bGw7XG59XG5mdW5jdGlvbiBpc1F1ZXJ5Um91dGVSZXNwb25zZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBpc1Jlc3BvbnNlKG9iai5yZXNwb25zZSkgJiYgKG9iai50eXBlID09PSBSZXN1bHRUeXBlLmRhdGEgfHwgUmVzdWx0VHlwZS5lcnJvcik7XG59XG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWxzLCBpc0ZldGNoZXIsIGN1cnJlbnRMb2FkZXJEYXRhKSB7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXN1bHRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2luZGV4XTtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzVG9Mb2FkW2luZGV4XTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRNYXRjaCA9IGN1cnJlbnRNYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgbGV0IGlzUmV2YWxpZGF0aW5nTG9hZGVyID0gY3VycmVudE1hdGNoICE9IG51bGwgJiYgIWlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSAmJiAoY3VycmVudExvYWRlckRhdGEgJiYgY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgbGV0IHNpZ25hbCA9IHNpZ25hbHNbaW5kZXhdO1xuICAgICAgaW52YXJpYW50KHNpZ25hbCwgXCJFeHBlY3RlZCBhbiBBYm9ydFNpZ25hbCBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXIgZGVmZXJyZWQgcmVzdWx0XCIpO1xuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCB1bndyYXApIHtcbiAgaWYgKHVud3JhcCA9PT0gdm9pZCAwKSB7XG4gICAgdW53cmFwID0gZmFsc2U7XG4gIH1cbiAgbGV0IGFib3J0ZWQgPSBhd2FpdCByZXN1bHQuZGVmZXJyZWREYXRhLnJlc29sdmVEYXRhKHNpZ25hbCk7XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh1bndyYXApIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLnVud3JhcHBlZERhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSGFuZGxlIGFueSBUcmFja2VkUHJvbWlzZS5fZXJyb3IgdmFsdWVzIGVuY291bnRlcmVkIHdoaWxlIHVud3JhcHBpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGFcbiAgfTtcbn1cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59XG4vLyBOb3RlOiBUaGlzIHNob3VsZCBtYXRjaCB0aGUgZm9ybWF0IGV4cG9ydGVkIGJ5IHVzZU1hdGNoZXMsIHNvIGlmIHlvdSBjaGFuZ2Vcbi8vIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHtcbiAgbGV0IHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAobWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2ggfHwgXCJcIikpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKG5hdmlnYXRpb24pIHtcbiAgbGV0IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGUsXG4gICAgdGV4dCxcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uXG4gIH0gPSBuYXZpZ2F0aW9uO1xuICBpZiAoIWZvcm1NZXRob2QgfHwgIWZvcm1BY3Rpb24gfHwgIWZvcm1FbmNUeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChmb3JtRGF0YSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbixcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9IGVsc2Uge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBsb2NhdGlvbixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgfTtcbiAgcmV0dXJuIG5hdmlnYXRpb247XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBkYXRhKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgICAgZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQsXG4gICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGEsXG4gICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgRXJyb3JSZXNwb25zZSwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMgYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIGFzIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgaW52YXJpYW50IGFzIFVOU0FGRV9pbnZhcmlhbnQsIHdhcm5pbmcgYXMgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVyLCBjcmVhdGVTdGF0aWNIYW5kbGVyLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yLCBnZXRUb1BhdGhuYW1lLCBpc0RlZmVycmVkRGF0YSwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpvaW5QYXRocywganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgbm9ybWFsaXplUGF0aG5hbWUsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoLCByZXNvbHZlVG8sIHN0cmlwQmFzZW5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIHY2LjE0LjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgVU5TQUZFX3dhcm5pbmcsIHJlc29sdmVUbywgcGFyc2VQYXRoLCBtYXRjaFJvdXRlcywgQWN0aW9uLCBzdHJpcEJhc2VuYW1lLCBJRExFX0JMT0NLRVIsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8gQ3JlYXRlIHJlYWN0LXNwZWNpZmljIHR5cGVzIGZyb20gdGhlIGFnbm9zdGljIHR5cGVzIGluIEByZW1peC1ydW4vcm91dGVyIHRvXG4vLyBleHBvcnQgZnJvbSByZWFjdC1yb3V0ZXJcbmNvbnN0IERhdGFSb3V0ZXJDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5jb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJTdGF0ZVwiO1xufVxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEF3YWl0Q29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXdhaXRcIjtcbn1cblxuLyoqXG4gKiBBIE5hdmlnYXRvciBpcyBhIFwibG9jYXRpb24gY2hhbmdlclwiOyBpdCdzIGhvdyB5b3UgZ2V0IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogRXZlcnkgaGlzdG9yeSBpbnN0YW5jZSBjb25mb3JtcyB0byB0aGUgTmF2aWdhdG9yIGludGVyZmFjZSwgYnV0IHRoZVxuICogZGlzdGluY3Rpb24gaXMgdXNlZnVsIHByaW1hcmlseSB3aGVuIGl0IGNvbWVzIHRvIHRoZSBsb3ctbGV2ZWwgPFJvdXRlcj4gQVBJXG4gKiB3aGVyZSBib3RoIHRoZSBsb2NhdGlvbiBhbmQgYSBuYXZpZ2F0b3IgbXVzdCBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGluIG9yZGVyXG4gKiB0byBhdm9pZCBcInRlYXJpbmdcIiB0aGF0IG1heSBvY2N1ciBpbiBhIHN1c3BlbnNlLWVuYWJsZWQgYXBwIGlmIHRoZSBhY3Rpb25cbiAqIGFuZC9vciBsb2NhdGlvbiB3ZXJlIHRvIGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgaGlzdG9yeSBpbnN0YW5jZS5cbiAqL1xuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXSxcbiAgaXNEYXRhUm91dGU6IGZhbHNlXG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuY29uc3QgUm91dGVFcnJvckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5mdW5jdGlvbiB1c2VIcmVmKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIGhhc2gsXG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoXG4gIH0gPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHtcbiAgICBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2hcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIDxSb3V0ZXI+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWluLXJvdXRlci1jb250ZXh0XG4gKi9cbmZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbG9jYXRpb24gb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIHRoZSBjdXJyZW50IFVSTCBpbiB3ZWJcbiAqIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IElmIHlvdSdyZSB1c2luZyB0aGlzIGl0IG1heSBtZWFuIHlvdSdyZSBkb2luZyBzb21lIG9mIHlvdXIgb3duXG4gKiBcInJvdXRpbmdcIiBpbiB5b3VyIGFwcCwgYW5kIHdlJ2QgbGlrZSB0byBrbm93IHdoYXQgeW91ciB1c2UgY2FzZSBpcy4gV2UgbWF5XG4gKiBiZSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGhpZ2hlci1sZXZlbCB0byBiZXR0ZXIgc3VpdCB5b3VyIG5lZWRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWxvY2F0aW9uXG4gKi9cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUxvY2F0aW9uKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5sb2NhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gYWN0aW9uIHdoaWNoIGRlc2NyaWJlcyBob3cgdGhlIHJvdXRlciBjYW1lIHRvXG4gKiB0aGUgY3VycmVudCBsb2NhdGlvbiwgZWl0aGVyIGJ5IGEgcG9wLCBwdXNoLCBvciByZXBsYWNlIG9uIHRoZSBoaXN0b3J5IHN0YWNrLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRpb24tdHlwZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgUGF0aE1hdGNoIG9iamVjdCBpZiB0aGUgZ2l2ZW4gcGF0dGVybiBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIDxOYXZMaW5rPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaFxuICovXG5mdW5jdGlvbiB1c2VNYXRjaChwYXR0ZXJuKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuY29uc3QgbmF2aWdhdGVFZmZlY3RXYXJuaW5nID0gXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCI7XG5cbi8vIE11dGUgd2FybmluZ3MgZm9yIGNhbGxzIHRvIHVzZU5hdmlnYXRlIGluIFNTUiBlbnZpcm9ubWVudHNcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoY2IpIHtcbiAgbGV0IGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljO1xuICBpZiAoIWlzU3RhdGljKSB7XG4gICAgLy8gV2Ugc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHJpZCBvZiB0aGlzIG9uY2UgcmVhY3QgMTguMyBpcyByZWxlYXNlZFxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoY2IpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlKCkge1xuICBsZXQge1xuICAgIGlzRGF0YVJvdXRlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHJldHVybiBpc0RhdGFSb3V0ZSA/IHVzZU5hdmlnYXRlU3RhYmxlKCkgOiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCk7XG59XG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciBoaXN0b3J5IGxpc3RlbmVyIHlldFxuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCBvcHRpb25zLnJlbGF0aXZlID09PSBcInBhdGhcIik7XG5cbiAgICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeSAoYnV0IG9ubHkgaWYgd2UncmUgbm90IGluIGEgZGF0YSByb3V0ZXIsXG4gICAgLy8gb3RoZXJ3aXNlIGl0J2xsIHByZXBlbmQgdGhlIGJhc2VuYW1lIGluc2lkZSBvZiB0aGUgcm91dGVyKS5cbiAgICAvLyBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlIG5hdmlnYXRlIHRvIHRoZSByYXcgYmFzZW5hbWVcbiAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGFcbiAgICAvLyB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gICAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ID09IG51bGwgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG4gICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkocGF0aCwgb3B0aW9ucy5zdGF0ZSwgb3B0aW9ucyk7XG4gIH0sIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIGRhdGFSb3V0ZXJDb250ZXh0XSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250ZXh0IChpZiBwcm92aWRlZCkgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0LWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuIFVzZWQgaW50ZXJuYWxseSBieSA8T3V0bGV0PiB0byByZW5kZXIgY2hpbGQgcm91dGVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcbiAgaWYgKG91dGxldCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdXRsZXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFxuICAgIH0sIG91dGxldCk7XG4gIH1cbiAgcmV0dXJuIG91dGxldDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnMgb2YgdGhlIGR5bmFtaWMgcGFyYW1zIGZyb20gdGhlIGN1cnJlbnRcbiAqIFVSTCB0aGF0IHdlcmUgbWF0Y2hlZCBieSB0aGUgcm91dGUgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yZXNvbHZlZC1wYXRoXG4gKi9cbmZ1bmN0aW9uIHVzZVJlc29sdmVkUGF0aCh0bywgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIiksIFt0bywgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWRcbiAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGVcbiAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIDxPdXRsZXQ+IHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnKTtcbn1cblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gd2l0aCBhY2NlcHQgb3B0aW9uYWwgcGFyYW0gZm9yIFJvdXRlclByb3ZpZGVyIHVzYWdlXG5mdW5jdGlvbiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuICBsZXQgbG9jYXRpb25Gcm9tQ29udGV4dCA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBsb2NhdGlvbjtcbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIldoZW4gb3ZlcnJpZGluZyB0aGUgbG9jYXRpb24gdXNpbmcgYDxSb3V0ZXMgbG9jYXRpb24+YCBvciBgdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pYCwgXCIgKyBcInRoZSBsb2NhdGlvbiBwYXRobmFtZSBtdXN0IGJlZ2luIHdpdGggdGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBcIiArIChcIm1hdGNoZWQgYnkgYWxsIHBhcmVudCByb3V0ZXMuIFRoZSBjdXJyZW50IHBhdGhuYW1lIGJhc2UgaXMgXFxcIlwiICsgcGFyZW50UGF0aG5hbWVCYXNlICsgXCJcXFwiIFwiKSArIChcImJ1dCBwYXRobmFtZSBcXFwiXCIgKyBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSArIFwiXFxcIiB3YXMgZ2l2ZW4gaW4gdGhlIGBsb2NhdGlvbmAgcHJvcC5cIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCwgXCJObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5Db21wb25lbnQgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiICsgXCJkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQgb3IgQ29tcG9uZW50LiBUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIFwiICsgXCJudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWUpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUpO1xuXG4gIC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuICBpZiAobG9jYXRpb25BcmcgJiYgcmVuZGVyZWRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbG9jYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAga2V5OiBcImRlZmF1bHRcIlxuICAgICAgICB9LCBsb2NhdGlvbiksXG4gICAgICAgIG5hdmlnYXRpb25UeXBlOiBBY3Rpb24uUG9wXG4gICAgICB9XG4gICAgfSwgcmVuZGVyZWRNYXRjaGVzKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuZnVuY3Rpb24gRGVmYXVsdEVycm9yQ29tcG9uZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBkZXZJbmZvID0gbnVsbDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBoYW5kbGVkIGJ5IFJlYWN0IFJvdXRlciBkZWZhdWx0IEVycm9yQm91bmRhcnk6XCIsIGVycm9yKTtcbiAgICBkZXZJbmZvID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIlxcdUQ4M0RcXHVEQ0JGIEhleSBkZXZlbG9wZXIgXFx1RDgzRFxcdURDNEJcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIllvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9ycyBieSBwcm92aWRpbmcgeW91ciBvd24gXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiRXJyb3JCb3VuZGFyeVwiKSwgXCIgb3JcIiwgXCIgXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiZXJyb3JFbGVtZW50XCIpLCBcIiBwcm9wIG9uIHlvdXIgcm91dGUuXCIpKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwgbnVsbCwgXCJVbmV4cGVjdGVkIEFwcGxpY2F0aW9uIEVycm9yIVwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIlxuICAgIH1cbiAgfSwgbWVzc2FnZSksIHN0YWNrID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIiwge1xuICAgIHN0eWxlOiBwcmVTdHlsZXNcbiAgfSwgc3RhY2spIDogbnVsbCwgZGV2SW5mbyk7XG59XG5jb25zdCBkZWZhdWx0RXJyb3JFbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVycm9yQ29tcG9uZW50LCBudWxsKTtcbmNsYXNzIFJlbmRlckVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24sXG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IGVycm9yXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uICE9PSBcImlkbGVcIiAmJiBwcm9wcy5yZXZhbGlkYXRpb24gPT09IFwiaWRsZVwiKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogcHJvcHMuZXJyb3IsXG4gICAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb25cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvciB8fCBzdGF0ZS5lcnJvcixcbiAgICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uIHx8IHN0YXRlLnJldmFsaWRhdGlvblxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJvdXRlQ29udGV4dFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pKSA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cbn1cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG5cbiAgLy8gVHJhY2sgaG93IGRlZXAgd2UgZ290IGluIG91ciByZW5kZXIgcGFzcyB0byBlbXVsYXRlIFNTUiBjb21wb25lbnREaWRDYXRjaFxuICAvLyBpbiBhIERhdGFTdGF0aWNSb3V0ZXJcbiAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpYyAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0ICYmIChtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgbWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSkpIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByb3V0ZUNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gX3JlbmRlck1hdGNoZXMobWF0Y2hlcywgcGFyZW50TWF0Y2hlcywgZGF0YVJvdXRlclN0YXRlKSB7XG4gIHZhciBfZGF0YVJvdXRlclN0YXRlMjtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuICBpZiAoZGF0YVJvdXRlclN0YXRlID09PSB2b2lkIDApIHtcbiAgICBkYXRhUm91dGVyU3RhdGUgPSBudWxsO1xuICB9XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICB2YXIgX2RhdGFSb3V0ZXJTdGF0ZTtcbiAgICBpZiAoKF9kYXRhUm91dGVyU3RhdGUgPSBkYXRhUm91dGVyU3RhdGUpICE9IG51bGwgJiYgX2RhdGFSb3V0ZXJTdGF0ZS5lcnJvcnMpIHtcbiAgICAgIC8vIERvbid0IGJhaWwgaWYgd2UgaGF2ZSBkYXRhIHJvdXRlciBlcnJvcnMgc28gd2UgY2FuIHJlbmRlciB0aGVtIGluIHRoZVxuICAgICAgLy8gYm91bmRhcnkuICBVc2UgdGhlIHByZS1tYXRjaGVkIChvciBzaGltbWVkKSBtYXRjaGVzXG4gICAgICBtYXRjaGVzID0gZGF0YVJvdXRlclN0YXRlLm1hdGNoZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlcztcblxuICAvLyBJZiB3ZSBoYXZlIGRhdGEgZXJyb3JzLCB0cmltIG1hdGNoZXMgdG8gdGhlIGhpZ2hlc3QgZXJyb3IgYm91bmRhcnlcbiAgbGV0IGVycm9ycyA9IChfZGF0YVJvdXRlclN0YXRlMiA9IGRhdGFSb3V0ZXJTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhUm91dGVyU3RhdGUyLmVycm9ycztcbiAgaWYgKGVycm9ycyAhPSBudWxsKSB7XG4gICAgbGV0IGVycm9ySW5kZXggPSByZW5kZXJlZE1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCAmJiAoZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbS5yb3V0ZS5pZF0pKTtcbiAgICAhKGVycm9ySW5kZXggPj0gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkNvdWxkIG5vdCBmaW5kIGEgbWF0Y2hpbmcgcm91dGUgZm9yIGVycm9ycyBvbiByb3V0ZSBJRHM6IFwiICsgT2JqZWN0LmtleXMoZXJyb3JzKS5qb2luKFwiLFwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCBlcnJvciA9IG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogbnVsbDtcbiAgICAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzXG4gICAgbGV0IGVycm9yRWxlbWVudCA9IG51bGw7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGRlZmF1bHRFcnJvckVsZW1lbnQ7XG4gICAgfVxuICAgIGxldCBtYXRjaGVzID0gcGFyZW50TWF0Y2hlcy5jb25jYXQocmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpO1xuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjaGlsZHJlbiA9IGVycm9yRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuQ29tcG9uZW50KSB7XG4gICAgICAgIC8vIE5vdGU6IFRoaXMgaXMgYSBkZS1vcHRpbWl6ZWQgcGF0aCBzaW5jZSBSZWFjdCB3b24ndCByZS11c2UgdGhlXG4gICAgICAgIC8vIFJlYWN0RWxlbWVudCBzaW5jZSBpdCdzIGlkZW50aXR5IGNoYW5nZXMgd2l0aCBlYWNoIG5ld1xuICAgICAgICAvLyBSZWFjdC5jcmVhdGVFbGVtZW50IGNhbGwuICBXZSBrZWVwIHRoaXMgc28gZm9sa3MgY2FuIHVzZVxuICAgICAgICAvLyBgPFJvdXRlIENvbXBvbmVudD17Li4ufT5gIGluIGA8Um91dGVzPmAgYnV0IGdlbmVyYWxseSBgQ29tcG9uZW50YFxuICAgICAgICAvLyB1c2FnZSBpcyBvbmx5IGFkdmlzZWQgaW4gYFJvdXRlclByb3ZpZGVyYCB3aGVuIHdlIGNhbiBjb252ZXJ0IGl0IHRvXG4gICAgICAgIC8vIGBlbGVtZW50YCBhaGVhZCBvZiB0aW1lLlxuICAgICAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KG1hdGNoLnJvdXRlLkNvbXBvbmVudCwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBtYXRjaC5yb3V0ZS5lbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBvdXRsZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyZWRSb3V0ZSwge1xuICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICAgIG91dGxldCxcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIGlzRGF0YVJvdXRlOiBkYXRhUm91dGVyU3RhdGUgIT0gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gT25seSB3cmFwIGluIGFuIGVycm9yIGJvdW5kYXJ5IHdpdGhpbiBkYXRhIHJvdXRlciB1c2FnZXMgd2hlbiB3ZSBoYXZlIGFuXG4gICAgLy8gRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvXG4gICAgLy8gYW4gYW5jZXN0b3IgRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnRcbiAgICByZXR1cm4gZGF0YVJvdXRlclN0YXRlICYmIChtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5IHx8IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBkYXRhUm91dGVyU3RhdGUucmV2YWxpZGF0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKSxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQ6IG51bGwsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGlzRGF0YVJvdXRlOiB0cnVlXG4gICAgICB9XG4gICAgfSkgOiBnZXRDaGlsZHJlbigpO1xuICB9LCBudWxsKTtcbn1cbnZhciBEYXRhUm91dGVySG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUxvYWRlckRhdGFcIl0gPSBcInVzZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUFjdGlvbkRhdGFcIl0gPSBcInVzZUFjdGlvbkRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlRXJyb3JcIl0gPSBcInVzZVJvdXRlRXJyb3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRpb25cIl0gPSBcInVzZU5hdmlnYXRpb25cIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlTG9hZGVyRGF0YVwiXSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VNYXRjaGVzXCJdID0gXCJ1c2VNYXRjaGVzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVJZFwiXSA9IFwidXNlUm91dGVJZFwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByb3V0ZTtcbn1cblxuLy8gSW50ZXJuYWwgdmVyc2lvbiB3aXRoIGhvb2tOYW1lLWF3YXJlIGRlYnVnZ2luZ1xuZnVuY3Rpb24gdXNlQ3VycmVudFJvdXRlSWQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgIXRoaXNSb3V0ZS5yb3V0ZS5pZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGhvb2tOYW1lICsgXCIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHRoaXNSb3V0ZS5yb3V0ZS5pZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBmb3IgdGhlIG5lYXJlc3QgY29udGV4dHVhbCByb3V0ZVxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUlkKCkge1xuICByZXR1cm4gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUlkKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24sIGRlZmF1bHRpbmcgdG8gYW4gXCJpZGxlXCIgbmF2aWdhdGlvbiB3aGVuXG4gKiBubyBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmV2YWxpZGF0ZSBmdW5jdGlvbiBmb3IgbWFudWFsbHkgdHJpZ2dlcmluZyByZXZhbGlkYXRpb24sIGFzIHdlbGxcbiAqIGFzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGFueSBtYW51YWwgcmV2YWxpZGF0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiB7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLCB1c2VmdWwgZm9yIGFjY2Vzc2luZyBsb2FkZXJEYXRhIGZvclxuICogcGFyZW50L2NoaWxkIHJvdXRlcyBvciB0aGUgcm91dGUgXCJoYW5kbGVcIiBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gbWF0Y2g7XG4gICAgLy8gTm90ZTogVGhpcyBzdHJ1Y3R1cmUgbWF0Y2hlcyB0aGF0IGNyZWF0ZWQgYnkgY3JlYXRlVXNlTWF0Y2hlc01hdGNoXG4gICAgLy8gaW4gdGhlIEByZW1peC1ydW4vcm91dGVyICwgc28gaWYgeW91IGNoYW5nZSB0aGlzIHBsZWFzZSBhbHNvIGNoYW5nZVxuICAgIC8vIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXMsXG4gICAgICBkYXRhOiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSxcbiAgICAgIGhhbmRsZTogbWF0Y2gucm91dGUuaGFuZGxlXG4gICAgfTtcbiAgfSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlclxuICovXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVMb2FkZXJEYXRhKHJvdXRlSWQpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5mdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUFjdGlvbkRhdGEgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGVycm9yLCB3aGljaCBjb3VsZCBiZSBhIGxvYWRlci9hY3Rpb25cbiAqIGVycm9yIG9yIGEgcmVuZGVyIGVycm9yLiAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB5b3VyXG4gKiBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCB0byBkaXNwbGF5IGEgcHJvcGVyIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7XG4gIHZhciBfc3RhdGUkZXJyb3JzO1xuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcblxuICAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1tyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHVzZUFzeW5jRXJyb3IoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZXJyb3I7XG59XG5sZXQgYmxvY2tlcklkID0gMDtcblxuLyoqXG4gKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlXG4gKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWRcbiAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvclxuICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLlxuICovXG5mdW5jdGlvbiB1c2VCbG9ja2VyKHNob3VsZEJsb2NrKSB7XG4gIGxldCB7XG4gICAgcm91dGVyLFxuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBbYmxvY2tlcktleSwgc2V0QmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBzaG91bGRCbG9jayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gISFzaG91bGRCbG9jaztcbiAgICB9XG4gICAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHNob3VsZEJsb2NrKGFyZyk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhleSBwcm92aWRlZCB1cyBhIGZ1bmN0aW9uIGFuZCB3ZSd2ZSBnb3QgYW4gYWN0aXZlIGJhc2VuYW1lLCBzdHJpcFxuICAgIC8vIGl0IGZyb20gdGhlIGxvY2F0aW9ucyB3ZSBleHBvc2UgdG8gdGhlIHVzZXIgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIG9mXG4gICAgLy8gdXNlTG9jYXRpb25cbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBhcmc7XG4gICAgcmV0dXJuIHNob3VsZEJsb2NrKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogX2V4dGVuZHMoe30sIGN1cnJlbnRMb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLFxuICAgICAgbmV4dExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gIH0sIFtiYXNlbmFtZSwgc2hvdWxkQmxvY2tdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBpcyBpbiBjaGFyZ2Ugb2YgYmxvY2tlciBrZXkgYXNzaWdubWVudCBhbmQgZGVsZXRpb24gKHdoaWNoIGlzXG4gIC8vIHRpZ2h0bHkgY291cGxlZCB0byB0aGUga2V5KVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBrZXkgPSBTdHJpbmcoKytibG9ja2VySWQpO1xuICAgIHNldEJsb2NrZXJLZXkoa2V5KTtcbiAgICByZXR1cm4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoa2V5KTtcbiAgfSwgW3JvdXRlcl0pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGhhbmRsZXMgYXNzaWduaW5nIHRoZSBibG9ja2VyRnVuY3Rpb24uICBUaGlzIGlzIHRvIGhhbmRsZVxuICAvLyB1bnN0YWJsZSBibG9ja2VyIGZ1bmN0aW9uIGlkZW50aXRpZXMsIGFuZCBoYXBwZW5zIG9ubHkgYWZ0ZXIgdGhlIHByaW9yXG4gIC8vIGVmZmVjdCBzbyB3ZSBkb24ndCBnZXQgYW4gb3JwaGFuZWQgYmxvY2tlckZ1bmN0aW9uIGluIHRoZSByb3V0ZXIgd2l0aCBhXG4gIC8vIGtleSBvZiBcIlwiLiAgVW50aWwgdGhlbiB3ZSBqdXN0IGhhdmUgdGhlIElETEVfQkxPQ0tFUi5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlcktleSAhPT0gXCJcIikge1xuICAgICAgcm91dGVyLmdldEJsb2NrZXIoYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0pO1xuXG4gIC8vIFByZWZlciB0aGUgYmxvY2tlciBmcm9tIGBzdGF0ZWAgbm90IGByb3V0ZXIuc3RhdGVgIHNpbmNlIERhdGFSb3V0ZXJDb250ZXh0XG4gIC8vIGlzIG1lbW9pemVkIHNvIHRoaXMgZW5zdXJlcyB3ZSB1cGRhdGUgb24gYmxvY2tlciBzdGF0ZSB1cGRhdGVzXG4gIHJldHVybiBibG9ja2VyS2V5ICYmIHN0YXRlLmJsb2NrZXJzLmhhcyhibG9ja2VyS2V5KSA/IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KSA6IElETEVfQkxPQ0tFUjtcbn1cblxuLyoqXG4gKiBTdGFibGUgdmVyc2lvbiBvZiB1c2VOYXZpZ2F0ZSB0aGF0IGlzIHVzZWQgd2hlbiB3ZSBhcmUgaW4gdGhlIGNvbnRleHQgb2ZcbiAqIGEgUm91dGVyUHJvdmlkZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlU3RhYmxlKCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgaWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZykgOiB2b2lkIDA7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgcm91dGVyIHN1YnNjcmliZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywgX2V4dGVuZHMoe1xuICAgICAgICBmcm9tUm91dGVJZDogaWRcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGlkXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByb3V0ZXIsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgYmFzZW5hbWVcbiAgfSksIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdKTtcblxuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvclxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpLCBudWxsKTtcbn1cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUpO1xufVxuLyoqXG4gKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBuYXZpZ2F0ZShKU09OLnBhcnNlKGpzb25QYXRoKSwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSksIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA7XG59XG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgPFJvdXRlcj4gZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSA8QnJvd3NlclJvdXRlcj5cbiAqIGluIHdlYiBicm93c2VycyBvciBhIDxTdGF0aWNSb3V0ZXI+IGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmNTtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIFByZXNlcnZlIHRyYWlsaW5nIHNsYXNoZXMgb24gYmFzZW5hbWUsIHNvIHdlIGNhbiBsZXQgdGhlIHVzZXIgY29udHJvbFxuICAvLyB0aGUgZW5mb3JjZW1lbnQgb2YgdHJhaWxpbmcgc2xhc2hlcyB0aHJvdWdob3V0IHRoZSBhcHBcbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGtleVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5LCBuYXZpZ2F0aW9uVHlwZV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhsb2NhdGlvbkNvbnRleHQgIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG4gIGlmIChsb2NhdGlvbkNvbnRleHQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IGxvY2F0aW9uQ29udGV4dFxuICB9KSk7XG59XG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIDxSb3V0ZT4gZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn1cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGVycm9yRWxlbWVudCxcbiAgICByZXNvbHZlXG4gIH0gPSBfcmVmNztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0RXJyb3JCb3VuZGFyeSwge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgZXJyb3JFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb2x2ZUF3YWl0LCBudWxsLCBjaGlsZHJlbikpO1xufVxudmFyIEF3YWl0UmVuZGVyU3RhdHVzO1xuKGZ1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG59KShBd2FpdFJlbmRlclN0YXR1cyB8fCAoQXdhaXRSZW5kZXJTdGF0dXMgPSB7fSkpO1xuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVycm9yRWxlbWVudCxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgcHJvbWlzZSA9IG51bGw7XG4gICAgbGV0IHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogcHJvbWlzZS5fZGF0YSAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcyA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJhdyAodW50cmFja2VkKSBwcm9taXNlIC0gdHJhY2sgaXRcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKGRhdGEgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICAgIH0pLCBlcnJvciA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmIHByb21pc2UuX2Vycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIC8vIEZyZWV6ZSB0aGUgVUkgYnkgdGhyb3dpbmcgYSBuZXZlciByZXNvbHZlZCBwcm9taXNlXG4gICAgICB0aHJvdyBuZXZlclNldHRsZWRQcm9taXNlO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IpIHtcbiAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGVycm9yRWxlbWVudFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MpIHtcbiAgICAgIC8vIFJlbmRlciBjaGlsZHJlbiB3aXRoIHJlc29sdmVkIHZhbHVlXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuICAgIHRocm93IHByb21pc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogSW5kaXJlY3Rpb24gdG8gbGV2ZXJhZ2UgdXNlQXN5bmNWYWx1ZSBmb3IgYSByZW5kZXItcHJvcCBBUEkgb24gPEF3YWl0PlxuICovXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjg7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuICBsZXQgdG9SZW5kZXIgPSB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdG9SZW5kZXIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgaWQ6IGVsZW1lbnQucHJvcHMuaWQgfHwgdHJlZVBhdGguam9pbihcIi1cIiksXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBDb21wb25lbnQ6IGVsZW1lbnQucHJvcHMuQ29tcG9uZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnksXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZSxcbiAgICAgIGxhenk6IGVsZW1lbnQucHJvcHMubGF6eVxuICAgIH07XG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpIHtcbiAgbGV0IHVwZGF0ZXMgPSB7XG4gICAgLy8gTm90ZTogdGhpcyBjaGVjayBhbHNvIG9jY3VycyBpbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gc28gdXBkYXRlXG4gICAgLy8gdGhlcmUgaWYgeW91IGNoYW5nZSB0aGlzIC0tIHBsZWFzZSBhbmQgdGhhbmsgeW91IVxuICAgIGhhc0Vycm9yQm91bmRhcnk6IHJvdXRlLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCByb3V0ZS5lcnJvckVsZW1lbnQgIT0gbnVsbFxuICB9O1xuICBpZiAocm91dGUuQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBDb21wb25lbnRgIGFuZCBgZWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgQ29tcG9uZW50YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkNvbXBvbmVudCksXG4gICAgICBDb21wb25lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBFcnJvckJvdW5kYXJ5YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuRXJyb3JCb3VuZGFyeSksXG4gICAgICBFcnJvckJvdW5kYXJ5OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG5leHBvcnQgeyBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBEYXRhUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBtYXBSb3V0ZVByb3BlcnRpZXMgYXMgVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcywgdXNlUm91dGVJZCBhcyBVTlNBRkVfdXNlUm91dGVJZCwgdXNlUm91dGVzSW1wbCBhcyBVTlNBRkVfdXNlUm91dGVzSW1wbCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBhcyBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIHJlbmRlck1hdGNoZXMsIHVzZUJsb2NrZXIgYXMgdW5zdGFibGVfdXNlQmxvY2tlciwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4xNC4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIFJvdXRlciwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCB1c2VIcmVmLCB1c2VSZXNvbHZlZFBhdGgsIHVzZUxvY2F0aW9uLCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV91c2VSb3V0ZUlkLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCB1bnN0YWJsZV91c2VCbG9ja2VyLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIFVOU0FGRV91c2VSb3V0ZUlkLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVuc3RhYmxlX3VzZUJsb2NrZXIsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfd2FybmluZywgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIEVycm9yUmVzcG9uc2UsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocyB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKFxuICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiZcbiAgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zLmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5nZXRBbGwoa2V5KS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbi8vIE9uZS10aW1lIGNoZWNrIGZvciBzdWJtaXR0ZXIgc3VwcG9ydFxubGV0IF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gbnVsbDtcbmZ1bmN0aW9uIGlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSB7XG4gIGlmIChfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRm9ybURhdGEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIEZvcm1EYXRhIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgcGFyYW1ldGVyLCB0aGlzIHdpbGwgdGhyb3dcbiAgICAgIDApO1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlcjtcbn1cbmNvbnN0IHN1cHBvcnRlZEZvcm1FbmNUeXBlcyA9IG5ldyBTZXQoW1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLCBcInRleHQvcGxhaW5cIl0pO1xuZnVuY3Rpb24gZ2V0Rm9ybUVuY1R5cGUoZW5jVHlwZSkge1xuICBpZiAoZW5jVHlwZSAhPSBudWxsICYmICFzdXBwb3J0ZWRGb3JtRW5jVHlwZXMuaGFzKGVuY1R5cGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiXFxcIlwiICsgZW5jVHlwZSArIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBgZW5jVHlwZWAgZm9yIGA8Rm9ybT5gL2A8ZmV0Y2hlci5Gb3JtPmAgXCIgKyAoXCJhbmQgd2lsbCBkZWZhdWx0IHRvIFxcXCJcIiArIGRlZmF1bHRFbmNUeXBlICsgXCJcXFwiXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZW5jVHlwZTtcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKSB7XG4gIGxldCBtZXRob2Q7XG4gIGxldCBhY3Rpb247XG4gIGxldCBlbmNUeXBlO1xuICBsZXQgZm9ybURhdGE7XG4gIGxldCBib2R5O1xuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoaXNCdXR0b25FbGVtZW50KHRhcmdldCkgfHwgaXNJbnB1dEVsZW1lbnQodGFyZ2V0KSAmJiAodGFyZ2V0LnR5cGUgPT09IFwic3VibWl0XCIgfHwgdGFyZ2V0LnR5cGUgPT09IFwiaW1hZ2VcIikpIHtcbiAgICBsZXQgZm9ybSA9IHRhcmdldC5mb3JtO1xuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9XG4gICAgLy8gPGJ1dHRvbj4vPGlucHV0IHR5cGU9XCJzdWJtaXRcIj4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikpIHx8IGdldEZvcm1FbmNUeXBlKGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgLy8gQnVpbGQgYSBGb3JtRGF0YSBvYmplY3QgcG9wdWxhdGVkIGZyb20gYSBmb3JtIGFuZCBzdWJtaXR0ZXJcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtLCB0YXJnZXQpO1xuICAgIC8vIElmIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBGb3JtRGF0YShlbCwgc3VibWl0dGVyKWAgZm9ybWF0LFxuICAgIC8vIHRoZW4gdGFjayBvbiB0aGUgc3VibWl0dGVyIHZhbHVlIGF0IHRoZSBlbmQuICBUaGlzIGlzIGEgbGlnaHR3ZWlnaHRcbiAgICAvLyBzb2x1dGlvbiB0aGF0IGlzIG5vdCAxMDAlIHNwZWMgY29tcGxpYW50LiAgRm9yIGNvbXBsZXRlIHN1cHBvcnQgaW4gb2xkZXJcbiAgICAvLyBicm93c2VycywgY29uc2lkZXIgdXNpbmcgdGhlIGBmb3JtZGF0YS1zdWJtaXR0ZXItcG9seWZpbGxgIHBhY2thZ2VcbiAgICBpZiAoIWlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gbmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieFwiLCBcIjBcIik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInlcIiwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuICAvLyBTZW5kIGJvZHkgZm9yIDxGb3JtIGVuY1R5cGU9XCJ0ZXh0L3BsYWluXCIgc28gd2UgZW5jb2RlIGl0IGludG8gdGV4dFxuICBpZiAoZm9ybURhdGEgJiYgZW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICBib2R5ID0gZm9ybURhdGE7XG4gICAgZm9ybURhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhY3Rpb24sXG4gICAgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSxcbiAgICBlbmNUeXBlLFxuICAgIGZvcm1EYXRhLFxuICAgIGJvZHlcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiY2hpbGRyZW5cIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJtZXRob2RcIiwgXCJhY3Rpb25cIiwgXCJvblN1Ym1pdFwiLCBcInN1Ym1pdFwiLCBcInJlbGF0aXZlXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCJdO1xuZnVuY3Rpb24gY3JlYXRlQnJvd3NlclJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllc1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuICBsZXQgc3RhdGUgPSAoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3JzKGVycm9ycykge1xuICBpZiAoIWVycm9ycykgcmV0dXJuIG51bGw7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZXJyb3JzKTtcbiAgbGV0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBlbnRyaWVzKSB7XG4gICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpblxuICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOilcbiAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiUm91dGVFcnJvclJlc3BvbnNlXCIpIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IG5ldyBFcnJvclJlc3BvbnNlKHZhbC5zdGF0dXMsIHZhbC5zdGF0dXNUZXh0LCB2YWwuZGF0YSwgdmFsLmludGVybmFsID09PSB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIkVycm9yXCIpIHtcbiAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcih2YWwubWVzc2FnZSk7XG4gICAgICAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgIGVycm9yLnN0YWNrID0gXCJcIjtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXJpYWxpemVkO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIENvbXBvbmVudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAgV2VicGFjayArIFJlYWN0IDE3IGZhaWxzIHRvIGNvbXBpbGUgb24gYW55IG9mIHRoZSBmb2xsb3dpbmcgYmVjYXVzZSB3ZWJwYWNrXG4gIGNvbXBsYWlucyB0aGF0IGBzdGFydFRyYW5zaXRpb25gIGRvZXNuJ3QgZXhpc3QgaW4gYFJlYWN0YDpcbiAgKiBpbXBvcnQgeyBzdGFydFRyYW5zaXRpb24gfSBmcm9tIFwicmVhY3RcIlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0LnN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdFtcInN0YXJ0VHJhbnNpdGlvblwiXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBNb3ZpbmcgaXQgdG8gYSBjb25zdGFudCBzdWNoIGFzIHRoZSBmb2xsb3dpbmcgc29sdmVzIHRoZSBXZWJwYWNrL1JlYWN0IDE3IGlzc3VlOlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG4gICAgU1RBUlRfVFJBTlNJVElPTiBpbiBSZWFjdCA/IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIEhvd2V2ZXIsIHRoYXQgaW50cm9kdWNlcyB3ZWJwYWNrL3RlcnNlciBtaW5pZmljYXRpb24gaXNzdWVzIGluIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGluIFJlYWN0IDE4IHdoZXJlIG1pbmlmaWNhdGlvbi9vYmZ1c2NhdGlvbiBlbmRzIHVwIHJlbW92aW5nIHRoZSBjYWxsIG9mXG4gIFJlYWN0LnN0YXJ0VHJhbnNpdGlvbiBlbnRpcmVseSBmcm9tIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSB0ZXJuYXJ5LiAgR3JhYmJpbmdcbiAgdGhpcyBleHBvcnRlZCByZWZlcmVuY2Ugb25jZSB1cCBmcm9udCByZXNvbHZlcyB0aGF0IGlzc3VlLlxuXG4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTA1NzlcbiovXG5jb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbmNvbnN0IHN0YXJ0VHJhbnNpdGlvbkltcGwgPSBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXTtcbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmMjtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWYzO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjQsIHJlZikge1xuICBsZXQge1xuICAgICAgb25DbGljayxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICB0byxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICAgIH0gPSBfcmVmNCxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgYWJzb2x1dGUgVVJMc1xuICBsZXQgYWJzb2x1dGVIcmVmO1xuICBsZXQgaXNFeHRlcm5hbCA9IGZhbHNlO1xuICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiICYmIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHRvKSkge1xuICAgIC8vIFJlbmRlciB0aGUgYWJzb2x1dGUgaHJlZiBzZXJ2ZXItIGFuZCBjbGllbnQtc2lkZVxuICAgIGFic29sdXRlSHJlZiA9IHRvO1xuICAgIC8vIE9ubHkgY2hlY2sgZm9yIGV4dGVybmFsIG9yaWdpbnMgY2xpZW50LXNpZGVcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBsZXQgdGFyZ2V0VXJsID0gdG8uc3RhcnRzV2l0aChcIi8vXCIpID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgdG8pIDogbmV3IFVSTCh0byk7XG4gICAgICAgIGxldCBwYXRoID0gc3RyaXBCYXNlbmFtZSh0YXJnZXRVcmwucGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICAgICAgaWYgKHRhcmdldFVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIHBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4vYmFzZW5hbWUgZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgICB0byA9IHBhdGggKyB0YXJnZXRVcmwuc2VhcmNoICsgdGFyZ2V0VXJsLmhhc2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNFeHRlcm5hbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZG8gZXh0ZXJuYWwgVVJMIGRldGVjdGlvbiB3aXRob3V0IGEgdmFsaWQgVVJMXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIjxMaW5rIHRvPVxcXCJcIiArIHRvICsgXCJcXFwiPiBjb250YWlucyBhbiBpbnZhbGlkIFVSTCB3aGljaCB3aWxsIHByb2JhYmx5IGJyZWFrIFwiICsgXCJ3aGVuIGNsaWNrZWQgLSBwbGVhc2UgdXBkYXRlIHRvIGEgdmFsaWQgVVJMIHBhdGguXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciByZWxhdGl2ZSBVUkxzXG4gIGxldCBocmVmID0gdXNlSHJlZih0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGFic29sdXRlSHJlZiB8fCBocmVmLFxuICAgICAgb25DbGljazogaXNFeHRlcm5hbCB8fCByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KSlcbiAgKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjUsIHJlZikge1xuICBsZXQge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICBjaGlsZHJlblxuICAgIH0gPSBfcmVmNSxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlXG4gIH0pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWUgOiBwYXRoLnBhdGhuYW1lO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lIDogbnVsbDtcbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHtcbiAgICAgIGlzQWN0aXZlLFxuICAgICAgaXNQZW5kaW5nXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsLCBpc1BlbmRpbmcgPyBcInBlbmRpbmdcIiA6IG51bGxdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfVxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3Aoe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0b1xuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbih7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nXG4gIH0pIDogY2hpbGRyZW4pO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuY29uc3QgRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXQoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JbXBsLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBzdWJtaXQ6IHN1Ym1pdCxcbiAgICByZWY6IHJlZlxuICB9KSk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybS5kaXNwbGF5TmFtZSA9IFwiRm9ybVwiO1xufVxuY29uc3QgRm9ybUltcGwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoX3JlZjYsIGZvcndhcmRlZFJlZikgPT4ge1xuICBsZXQge1xuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgc3VibWl0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICB9ID0gX3JlZjYsXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNiwgX2V4Y2x1ZGVkMyk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIGxldCBzdWJtaXRNZXRob2QgPSAoc3VibWl0dGVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSkgfHwgbWV0aG9kO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICByZXBsYWNlLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtSW1wbC5kaXNwbGF5TmFtZSA9IFwiRm9ybUltcGxcIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbihfcmVmNykge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfcmVmNztcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oe1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSG9va3Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgRGF0YVJvdXRlckhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0XCJdID0gXCJ1c2VTdWJtaXRcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRGZXRjaGVyXCJdID0gXCJ1c2VTdWJtaXRGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyc1wiXSA9IFwidXNlRmV0Y2hlcnNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUgdW5sZXNzIHRoZSByZXBsYWNlIHByb3AgaXMgZXhwbGljaXRseSBzZXRcbiAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VQcm9wIDogY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICByZWxhdGl2ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG8sIHByZXZlbnRTY3JvbGxSZXNldCwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsIFwiWW91IGNhbm5vdCB1c2UgdGhlIGB1c2VTZWFyY2hQYXJhbXNgIGhvb2sgaW4gYSBicm93c2VyIHRoYXQgZG9lcyBub3QgXCIgKyBcInN1cHBvcnQgdGhlIFVSTFNlYXJjaFBhcmFtcyBBUEkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnQgSW50ZXJuZXQgXCIgKyBcIkV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIFwiICsgXCJodHRwczovL2dpdGh1Yi5jb20vdW5nYXAvdXJsLXNlYXJjaC1wYXJhbXNcXG5cXG5cIiArIFwiSWYgeW91J3JlIHVuc3VyZSBob3cgdG8gbG9hZCBwb2x5ZmlsbHMsIHdlIHJlY29tbWVuZCB5b3UgY2hlY2sgb3V0IFwiICsgXCJodHRwczovL3BvbHlmaWxsLmlvL3YzLyB3aGljaCBwcm92aWRlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBhYm91dCBob3cgXCIgKyBcInRvIGxvYWQgcG9seWZpbGxzIG9ubHkgZm9yIHVzZXJzIHRoYXQgbmVlZCB0aGVtLCBpbnN0ZWFkIG9mIGZvciBldmVyeSBcIiArIFwidXNlci5cIikgOiB2b2lkIDA7XG4gIGxldCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGNyZWF0ZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkpO1xuICBsZXQgaGFzU2V0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT5cbiAgLy8gT25seSBtZXJnZSBpbiB0aGUgZGVmYXVsdHMgaWYgd2UgaGF2ZW4ndCB5ZXQgY2FsbGVkIHNldFNlYXJjaFBhcmFtcy5cbiAgLy8gT25jZSB3ZSBjYWxsIHRoYXQgd2Ugd2FudCB0aG9zZSB0byB0YWtlIHByZWNlZGVuY2UsIG90aGVyd2lzZSB5b3UgY2FuJ3RcbiAgLy8gcmVtb3ZlIGEgcGFyYW0gd2l0aCBzZXRTZWFyY2hQYXJhbXMoe30pIGlmIGl0IGhhcyBhbiBpbml0aWFsIHZhbHVlXG4gIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uLnNlYXJjaCwgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPyBudWxsIDogZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50KSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBuZXdTZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXModHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXQpO1xuICAgIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIG5ld1NlYXJjaFBhcmFtcywgbmF2aWdhdGVPcHRpb25zKTtcbiAgfSwgW25hdmlnYXRlLCBzZWFyY2hQYXJhbXNdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBjYWxsaW5nIHN1Ym1pdCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIuIFwiICsgXCJUcnkgY2FsbGluZyBzdWJtaXQgd2l0aGluIGEgYHVzZUVmZmVjdGAgb3IgY2FsbGJhY2sgaW5zdGVhZC5cIik7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gdXNlU3VibWl0KCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgY3VycmVudFJvdXRlSWQgPSBVTlNBRkVfdXNlUm91dGVJZCgpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpO1xuICAgIGxldCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBlbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBib2R5XG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKTtcbiAgICByb3V0ZXIubmF2aWdhdGUob3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgZm9ybURhdGEsXG4gICAgICBib2R5LFxuICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgcmVwbGFjZTogb3B0aW9ucy5yZXBsYWNlLFxuICAgICAgZnJvbVJvdXRlSWQ6IGN1cnJlbnRSb3V0ZUlkXG4gICAgfSk7XG4gIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBjdXJyZW50Um91dGVJZF0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbXBsZW1lbnRhdGlvbiBmb3IgZmV0Y2hlci5zdWJtaXRcbiAqL1xuZnVuY3Rpb24gdXNlU3VibWl0RmV0Y2hlcihmZXRjaGVyS2V5LCBmZXRjaGVyUm91dGVJZCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0RmV0Y2hlcik7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKTtcbiAgICBsZXQge1xuICAgICAgYWN0aW9uLFxuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgYm9keVxuICAgIH0gPSBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSk7XG4gICAgIShmZXRjaGVyUm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIHVzZUZldGNoZXIoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCBmZXRjaGVyUm91dGVJZCwgb3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgZm9ybURhdGEsXG4gICAgICBib2R5LFxuICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlXG4gICAgfSk7XG4gIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBmZXRjaGVyS2V5LCBmZXRjaGVyUm91dGVJZF0pO1xufVxuLy8gdjc6IEV2ZW50dWFsbHkgd2Ugc2hvdWxkIGRlcHJlY2F0ZSB0aGlzIGVudGlyZWx5IGluIGZhdm9yIG9mIHVzaW5nIHRoZVxuLy8gcm91dGVyIG1ldGhvZCBkaXJlY3RseT9cbmZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oYWN0aW9uLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgcm91dGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlQ29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpO1xuICAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG4gIGxldCBwYXRoID0gX2V4dGVuZHMoe30sIHVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwge1xuICAgIHJlbGF0aXZlXG4gIH0pKTtcbiAgLy8gUHJldmlvdXNseSB3ZSBzZXQgdGhlIGRlZmF1bHQgYWN0aW9uIHRvIFwiLlwiLiBUaGUgcHJvYmxlbSB3aXRoIHRoaXMgaXMgdGhhdFxuICAvLyBgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKWAgZXhjbHVkZXMgc2VhcmNoIHBhcmFtcyBhbmQgdGhlIGhhc2ggb2YgdGhlIHJlc29sdmVkXG4gIC8vIFVSTC4gVGhpcyBpcyB0aGUgaW50ZW5kZWQgYmVoYXZpb3Igb2Ygd2hlbiBcIi5cIiBpcyBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgYXNcbiAgLy8gdGhlIGZvcm0gYWN0aW9uLCBidXQgaW5jb25zaXN0ZW50IHcvIGJyb3dzZXJzIHdoZW4gdGhlIGFjdGlvbiBpcyBvbWl0dGVkLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGVzZSBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZVxuICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aChcIi5cIikgd2hpY2ggd2lsbCBuZXZlciBpbmNsdWRlIGEgc2VhcmNoXG4gICAgLy8gb3IgaGFzaFxuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gICAgLy8gV2hlbiBncmFiYmluZyBzZWFyY2ggcGFyYW1zIGZyb20gdGhlIFVSTCwgcmVtb3ZlIHRoZSBhdXRvbWF0aWNhbGx5XG4gICAgLy8gaW5zZXJ0ZWQgP2luZGV4IHBhcmFtIHNvIHdlIG1hdGNoIHRoZSB1c2VSZXNvbHZlZFBhdGggc2VhcmNoIGJlaGF2aW9yXG4gICAgLy8gd2hpY2ggd291bGQgbm90IGluY2x1ZGUgP2luZGV4XG4gICAgaWYgKG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgICBwYXJhbXMuZGVsZXRlKFwiaW5kZXhcIik7XG4gICAgICBwYXRoLnNlYXJjaCA9IHBhcmFtcy50b1N0cmluZygpID8gXCI/XCIgKyBwYXJhbXMudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgfVxuICB9XG4gIGlmICgoIWFjdGlvbiB8fCBhY3Rpb24gPT09IFwiLlwiKSAmJiBtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfVxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2VcbiAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlXG4gIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpIHtcbiAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICBsZXQgc3VibWl0ID0gdXNlU3VibWl0RmV0Y2hlcihmZXRjaGVyS2V5LCByb3V0ZUlkKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBzdWJtaXQ6IHN1Ym1pdFxuICAgIH0pKTtcbiAgfSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBGZXRjaGVyRm9ybS5kaXNwbGF5TmFtZSA9IFwiZmV0Y2hlci5Gb3JtXCI7XG4gIH1cbiAgcmV0dXJuIEZldGNoZXJGb3JtO1xufVxubGV0IGZldGNoZXJJZCA9IDA7XG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaGVyKCkge1xuICB2YXIgX3JvdXRlJG1hdGNoZXM7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHJvdXRlSWQgPSAoX3JvdXRlJG1hdGNoZXMgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0pID09IG51bGwgPyB2b2lkIDAgOiBfcm91dGUkbWF0Y2hlcy5yb3V0ZS5pZDtcbiAgIShyb3V0ZUlkICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbZmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBTdHJpbmcoKytmZXRjaGVySWQpKTtcbiAgbGV0IFtGb3JtXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIuRm9ybSgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICB9KTtcbiAgbGV0IFtsb2FkXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IGhyZWYgPT4ge1xuICAgICFyb3V0ZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlciBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgIXJvdXRlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmKTtcbiAgfSk7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRGZXRjaGVyKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICBsZXQgZmV0Y2hlciA9IHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7XG4gICAgRm9ybSxcbiAgICBzdWJtaXQsXG4gICAgbG9hZFxuICB9LCBmZXRjaGVyKSwgW2ZldGNoZXIsIEZvcm0sIHN1Ym1pdCwgbG9hZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIElzIHRoaXMgYnVzdGVkIHdoZW4gdGhlIFJlYWN0IHRlYW0gZ2V0cyByZWFsIHdlaXJkIGFuZCBjYWxscyBlZmZlY3RzXG4gICAgLy8gdHdpY2Ugb24gbW91bnQ/ICBXZSByZWFsbHkganVzdCBuZWVkIHRvIGdhcmJhZ2UgY29sbGVjdCBoZXJlIHdoZW4gdGhpc1xuICAgIC8vIGZldGNoZXIgaXMgbm8gbG9uZ2VyIGFyb3VuZC5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFyb3V0ZXIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTm8gcm91dGVyIGF2YWlsYWJsZSB0byBjbGVhbiB1cCBmcm9tIHVzZUZldGNoZXIoKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcm91dGVyLmRlbGV0ZUZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgfTtcbiAgfSwgW3JvdXRlciwgZmV0Y2hlcktleV0pO1xuICByZXR1cm4gZmV0Y2hlcldpdGhDb21wb25lbnRzO1xufVxuLyoqXG4gKiBQcm92aWRlcyBhbGwgZmV0Y2hlcnMgY3VycmVudGx5IG9uIHRoZSBwYWdlLiBVc2VmdWwgZm9yIGxheW91dHMgYW5kIHBhcmVudFxuICogcm91dGVzIHRoYXQgbmVlZCB0byBwcm92aWRlIHBlbmRpbmcvb3B0aW1pc3RpYyBVSSByZWdhcmRpbmcgdGhlIGZldGNoLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaGVycygpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcnMpO1xuICByZXR1cm4gWy4uLnN0YXRlLmZldGNoZXJzLnZhbHVlcygpXTtcbn1cbmNvbnN0IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSA9IFwicmVhY3Qtcm91dGVyLXNjcm9sbC1wb3NpdGlvbnNcIjtcbmxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHt9O1xuLyoqXG4gKiBXaGVuIHJlbmRlcmVkIGluc2lkZSBhIFJvdXRlclByb3ZpZGVyLCB3aWxsIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9ucyBvbiBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihfdGVtcDMpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IG1hdGNoZXMgPSB1c2VNYXRjaGVzKCk7XG4gIGxldCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xuICAvLyBUcmlnZ2VyIG1hbnVhbCBzY3JvbGwgcmVzdG9yYXRpb24gd2hpbGUgd2UncmUgYWN0aXZlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgLy8gU2F2ZSBwb3NpdGlvbnMgb24gcGFnZWhpZGVcbiAgdXNlUGFnZUhpZGUoUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChuYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgbGV0IGtleSA9IChnZXRLZXkgPyBnZXRLZXkobG9jYXRpb24sIG1hdGNoZXMpIDogbnVsbCkgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IHdpbmRvdy5zY3JvbGxZO1xuICAgIH1cbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpO1xuICAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcbiAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgICAgfVxuICAgIH0sIFtzdG9yYWdlS2V5XSk7XG4gICAgLy8gRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBpbiB0aGUgcm91dGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGxldCBnZXRLZXlXaXRob3V0QmFzZW5hbWUgPSBnZXRLZXkgJiYgYmFzZW5hbWUgIT09IFwiL1wiID8gKGxvY2F0aW9uLCBtYXRjaGVzKSA9PiBnZXRLZXkoIC8vIFN0cmlwIHRoZSBiYXNlbmFtZSB0byBtYXRjaCB1c2VMb2NhdGlvbigpXG4gICAgICBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksIG1hdGNoZXMpIDogZ2V0S2V5O1xuICAgICAgbGV0IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiA9IHJvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyLmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHNhdmVkU2Nyb2xsUG9zaXRpb25zLCAoKSA9PiB3aW5kb3cuc2Nyb2xsWSwgZ2V0S2V5V2l0aG91dEJhc2VuYW1lKTtcbiAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gICAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGdldEtleV0pO1xuICAgIC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gRXhwbGljaXQgZmFsc2UgbWVhbnMgZG9uJ3QgZG8gYW55dGhpbmcgKHVzZWQgZm9yIHN1Ym1pc3Npb25zKVxuICAgICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG4gICAgICBpZiAodHlwZW9mIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobG9jYXRpb24uaGFzaC5zbGljZSgxKSk7XG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEb24ndCByZXNldCBpZiB0aGlzIG5hdmlnYXRpb24gb3B0ZWQgb3V0XG4gICAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIG90aGVyd2lzZSBnbyB0byB0aGUgdG9wIG9uIG5ldyBsb2NhdGlvbnNcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9LCBbbG9jYXRpb24sIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiwgcHJldmVudFNjcm9sbFJlc2V0XSk7XG4gIH1cbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYGJlZm9yZXVubG9hZGAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlQmVmb3JlVW5sb2FkKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgcGFnZWhpZGVgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuICBUaGlzIGV2ZW50IGlzIGJldHRlciBzdXBwb3J0ZWQgdGhhbiBiZWZvcmV1bmxvYWQgYWNyb3NzIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VQYWdlSGlkZShjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIHVzZUJsb2NrZXIgdG8gc2hvdyBhIHdpbmRvdy5jb25maXJtIHByb21wdCB0byB1c2VycyBpbnN0ZWFkXG4gKiBvZiBidWlsZGluZyBhIGN1c3RvbSBVSSB3aXRoIHVzZUJsb2NrZXIuXG4gKlxuICogV2FybmluZzogVGhpcyBoYXMgKmEgbG90IG9mIHJvdWdoIGVkZ2VzKiBhbmQgYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IChhbmRcbiAqIHZlcnkgaW5jb3JyZWN0bHkgaW4gc29tZSBjYXNlcykgYWNyb3NzIGJyb3dzZXJzIGlmIHVzZXIgY2xpY2sgYWRkaXRpb25cbiAqIGJhY2svZm9yd2FyZCBuYXZpZ2F0aW9ucyB3aGlsZSB0aGUgY29uZmlybSBpcyBvcGVuLiAgVXNlIGF0IHlvdXIgb3duIHJpc2suXG4gKi9cbmZ1bmN0aW9uIHVzZVByb21wdChfcmVmOCkge1xuICBsZXQge1xuICAgIHdoZW4sXG4gICAgbWVzc2FnZVxuICB9ID0gX3JlZjg7XG4gIGxldCBibG9ja2VyID0gdW5zdGFibGVfdXNlQmxvY2tlcih3aGVuKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBTY3JvbGxSZXN0b3JhdGlvbiwgdXNlU2Nyb2xsUmVzdG9yYXRpb24gYXMgVU5TQUZFX3VzZVNjcm9sbFJlc3RvcmF0aW9uLCBjcmVhdGVCcm93c2VyUm91dGVyLCBjcmVhdGVIYXNoUm91dGVyLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCwgdXNlQmVmb3JlVW5sb2FkLCB1c2VGZXRjaGVyLCB1c2VGZXRjaGVycywgdXNlRm9ybUFjdGlvbiwgdXNlTGlua0NsaWNrSGFuZGxlciwgdXNlU2VhcmNoUGFyYW1zLCB1c2VTdWJtaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBJbmxpbmVMb2FkaW5nID0gKHByb3BzKSA9PiB7XG4gIGxldCBjbGFzc05hbWUgPSBcImxkcy1lbGxpcHNpcyBcIjtcbiAgaWYgKHByb3BzLmNsYXNzTmFtZSkgY2xhc3NOYW1lICs9IHByb3BzLmNsYXNzTmFtZTtcblxuICBjb25zdCBlbCA9IChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbGRzLWVsbGlwc2lzLS0ke3Byb3BzLmNvbG9yfWB9PjwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2BsZHMtZWxsaXBzaXMtLSR7cHJvcHMuY29sb3J9YH0+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGxkcy1lbGxpcHNpcy0tJHtwcm9wcy5jb2xvcn1gfT48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbGRzLWVsbGlwc2lzLS0ke3Byb3BzLmNvbG9yfWB9PjwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xuXG4gIGlmIChwcm9wcy5jZW50ZXIpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ1LXRleHQtY2VudGVyXCI+e2VsfTwvZGl2PjtcbiAgfSBlbHNlIHJldHVybiBlbDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IElubGluZUxvYWRpbmc7XG4iLCJjb25zdCBhbGVydCA9IChtZXNzYWdlLCB0eXBlID0gXCJkZWZhdWx0XCIpID0+IHtcbiAgbGV0IGFsZXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNqcy0tYWxlcnRcIik7XG5cbiAgaWYgKCFhbGVydCkge1xuICAgIC8vIGNyZWF0ZSB0aGUgc3RhY2sgbWVzc2FnZSBlbGVtZW50c1xuICAgIGNvbnN0IEVsQWxlcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnN0IEVMQWxlcnRQID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgY29uc3QgRUxBbGVydEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY29uc3QgRUxBbGVydEJ1dHRvblNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblxuICAgIEVsQWxlcnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJhbGVydC1zbmFja2JhciBhbGVydC1zbmFja2Jhci0tY2xvc2VcIik7XG4gICAgRWxBbGVydC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImpzLS1hbGVydFwiKTtcbiAgICBFTEFsZXJ0QnV0dG9uLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgRUxBbGVydEJ1dHRvblNwYW4uaW5uZXJIVE1MID0gXCImIzEwMDA1XCI7XG5cbiAgICBFTEFsZXJ0QnV0dG9uLmFwcGVuZENoaWxkKEVMQWxlcnRCdXR0b25TcGFuKTtcbiAgICBFbEFsZXJ0LmFwcGVuZENoaWxkKEVMQWxlcnRQKTtcbiAgICBFbEFsZXJ0LmFwcGVuZENoaWxkKEVMQWxlcnRCdXR0b24pO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik/LmFwcGVuZENoaWxkKEVsQWxlcnQpO1xuXG4gICAgYWxlcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2pzLS1hbGVydFwiKTtcbiAgfVxuXG4gIGNvbnN0IGFsZXJ0VGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjanMtLWFsZXJ0IHBcIik7XG4gIGNvbnN0IGFsZXJ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNqcy0tYWxlcnQgYnV0dG9uXCIpO1xuXG4gIGFsZXJ0Py5jbGFzc0xpc3QucmVtb3ZlKFwiYWxlcnQtc25hY2tiYXItLWVycm9yXCIpO1xuICBhbGVydD8uY2xhc3NMaXN0LnJlbW92ZShcImFsZXJ0LXNuYWNrYmFyLS1zdWNjZXNzXCIpO1xuICBhbGVydD8uY2xhc3NMaXN0LnJlbW92ZShcImFsZXJ0LXNuYWNrYmFyLS1vcGVuXCIpO1xuICBhbGVydD8uY2xhc3NMaXN0LnJlbW92ZShcImFsZXJ0LXNuYWNrYmFyLS1jbG9zZVwiKTtcblxuICBhbGVydD8uY2xhc3NMaXN0LmFkZChcImFsZXJ0LXNuYWNrYmFyLS1vcGVuXCIpO1xuXG4gIGlmICh0eXBlID09PSBcInN1Y2Nlc3NcIikge1xuICAgIGFsZXJ0Py5jbGFzc0xpc3QuYWRkKFwiYWxlcnQtc25hY2tiYXItLXN1Y2Nlc3NcIik7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgYWxlcnQ/LmNsYXNzTGlzdC5hZGQoXCJhbGVydC1zbmFja2Jhci0tZXJyb3JcIik7XG4gIH1cblxuICBpZiAoYWxlcnRUZXh0KSBhbGVydFRleHQuaW5uZXJIVE1MID0gbWVzc2FnZTtcblxuICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgYWxlcnQ/LmNsYXNzTGlzdC5hZGQoXCJhbGVydC1zbmFja2Jhci0tY2xvc2VcIik7XG4gICAgYWxlcnQ/LmNsYXNzTGlzdC5yZW1vdmUoXCJhbGVydC1zbmFja2Jhci0tZXJyb3JcIik7XG4gICAgYWxlcnQ/LmNsYXNzTGlzdC5yZW1vdmUoXCJhbGVydC1zbmFja2Jhci0tc3VjY2Vzc1wiKTtcbiAgICBhbGVydD8uY2xhc3NMaXN0LnJlbW92ZShcImFsZXJ0LXNuYWNrYmFyLS1vcGVuXCIpO1xuICB9LCA1MDAwKTtcblxuICBhbGVydEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgYWxlcnQ/LmNsYXNzTGlzdC5hZGQoXCJhbGVydC1zbmFja2Jhci0tY2xvc2VcIik7XG4gICAgYWxlcnQ/LmNsYXNzTGlzdC5yZW1vdmUoXCJhbGVydC1zbmFja2Jhci0tZXJyb3JcIik7XG4gICAgYWxlcnQ/LmNsYXNzTGlzdC5yZW1vdmUoXCJhbGVydC1zbmFja2Jhci0tc3VjY2Vzc1wiKTtcbiAgICBhbGVydD8uY2xhc3NMaXN0LnJlbW92ZShcImFsZXJ0LXNuYWNrYmFyLS1vcGVuXCIpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFsZXJ0O1xuIiwiY29uc3QgdCA9IHtcbiAgLyoqIEZvciBlcnJvciBtZXNzYWdlcy5cbiAgICogTWVzc2FnZXMgYXJlIGRpdmlkZWQgaW50byAzIGRpZmZlcmVudCBzZWN0aW9ucyBmb3IgYm90aCBlcnJvciBhbmQgc3VjY2VzcyBtZXNzYWdlczpcbiAgICogIC0gYXV0aCAoYW55dGhpbmcgcmVsYXRlZCB0byBhdXRoZW50aWNhdGlvbilcbiAgICogIC0gcG9zdCAoYW55dGhpbmcgcmVsYXRlZCB0byBwb3N0cylcbiAgICogIC0gdXNlciAoYW55dGhpbmcgcmVsYXRlZCB0byB1c2VycylcbiAgICovXG4gIGFsZXJ0OiB7XG4gICAgLy8gRm9yIGVycm9yIG1lc3NhZ2VzXG4gICAgZXJyb3I6IHtcbiAgICAgIGF1dGg6IHtcbiAgICAgICAgYmFkTG9naW5JbmZvOiBcIlVzZXJuYW1lIG9yIHBhc3N3b3JkIGlzIGluY29ycmVjdC5cIixcbiAgICAgIH0sXG4gICAgICBwb3N0OiB7fSxcbiAgICAgIHVzZXI6IHt9LFxuICAgICAgZGVmYXVsdDogXCJTb3JyeSBhbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiLFxuICAgIH0sXG4gICAgLy8gRm9yIHN1Y2Nlc3MgZXJyb3IgbWVzc2FnZXNcbiAgICBzdWNjZXNzOiB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIGxvZ2dlZE91dDogXCJZb3Ugd2VyZSBzdWNjZXNzZnVsbHkgbG9nZ2VkIG91dCFcIixcbiAgICAgICAgbG9nZ2VkSW46IFwiWW91IHdlcmUgc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBpbiFcIixcbiAgICAgIH0sXG4gICAgICBwb3N0OiB7XG4gICAgICAgIGNyZWF0ZWQ6IFwiWW91ciBwb3N0IHdhcyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSFcIixcbiAgICAgIH0sXG4gICAgICB1c2VyOiB7XG4gICAgICAgIHVwZGF0ZWQ6IFwiWW91ciBpbmZvIHdhcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseSFcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IElubGluZUxvYWRpbmcgZnJvbSBcIi4uL3JldXNhYmxlL0lubGluZUxvYWRpbmdcIjtcbmltcG9ydCBhbGVydCBmcm9tIFwiLi4vbGliL2FsZXJ0XCI7XG5pbXBvcnQgdCBmcm9tIFwiLi4vbGliL3Rva2Vuc1wiO1xuXG5jb25zdCBIb21lID0gKCkgPT4ge1xuICBjb25zdCBbcG9zdHMsIHNldFBvc3RzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGZldGNoUG9zdHMgPSBhc3luYyAoKSA9PiB7XG4gICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICB0cnkge1xuICAgICAgLyoqIEBBUEkgY2FsbCAqL1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQoXCIvYXBpL3Bvc3RzXCIpO1xuICAgICAgc2V0UG9zdHMoZGF0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWxlcnQodC5hbGVydC5lcnJvci5kZWZhdWx0LCBcImVycm9yXCIpO1xuICAgIH1cbiAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZldGNoUG9zdHMoKTtcbiAgfSwgW10pO1xuXG4gIGlmIChsb2FkaW5nKVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInUtdGV4dC1jZW50ZXIgdS1tYXJnaW4tdG9wLTNcIj5cbiAgICAgICAgPElubGluZUxvYWRpbmcgY29sb3I9XCJncmF5XCIgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0cy1jb250YWluZXJcIj5cbiAgICAgIHtwb3N0cy5tYXAoKHBvc3QpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3RcIiBrZXk9e3Bvc3QuaWR9PlxuICAgICAgICAgICAgPGgxPntwb3N0LnRpdGxlfTwvaDE+XG4gICAgICAgICAgICA8cD57cG9zdC5ib2R5fTwvcD5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBvc3RfX2F1dGhvclwiPkJ5IHtwb3N0LmF1dGhvcn08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9KX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IElucHV0ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUocHJvcHMudmFsdWU/LnRvU3RyaW5nKCkpO1xuXG4gIGNvbnN0IGlucHV0ID0gdXNlUmVmKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLnZhbHVlKSB7XG4gICAgICBzZXRWYWx1ZShwcm9wcy52YWx1ZS50b1N0cmluZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VmFsdWUoXCJcIik7XG4gICAgfVxuICB9LCBbcHJvcHMudmFsdWVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5vbkNoYW5nZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHByb3BzLm9uQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG4gIH0sIFt2YWx1ZV0pO1xuXG4gIGxldCBjbGFzc05hbWUgPSBcImZvcm0tdGV4dFwiO1xuXG4gIHN3aXRjaCAocHJvcHMuc2l6ZSkge1xuICAgIGNhc2UgXCJiaWdcIjpcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmb3JtLXRleHQtLWJpZ1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNtYWxsXCI6XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZm9ybS10ZXh0LS1zbWFsbFwiO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBpZiAocHJvcHMucm91bmRlZCkgY2xhc3NOYW1lICs9IFwiIGZvcm0tdGV4dC0tcm91bmRlZFwiO1xuICBpZiAocHJvcHMuc3VjY2VzcyAmJiAhcHJvcHMuZGlzYWJsZWQpIGNsYXNzTmFtZSArPSBcIiBmb3JtLXRleHQtLXN1Y2Nlc3NcIjtcbiAgaWYgKHByb3BzLmVycm9yICYmICFwcm9wcy5kaXNhYmxlZCkgY2xhc3NOYW1lICs9IFwiIGZvcm0tdGV4dC0tZXJyb3JcIjtcbiAgaWYgKHByb3BzLmRpc2FibGVkKSBjbGFzc05hbWUgKz0gXCIgZm9ybS10ZXh0LS1kaXNhYmxlZFwiO1xuXG4gIGxldCBzaG91bGREaXZpZGVOdW1iZXJCeVRocmVlID0gdHJ1ZTtcbiAgaWYgKHR5cGVvZiBwcm9wcy5zaG91bGREaXZpZGVOdW1iZXJCeVRocmVlID09PSBcImJvb2xlYW5cIikge1xuICAgIHNob3VsZERpdmlkZU51bWJlckJ5VGhyZWUgPSBwcm9wcy5zaG91bGREaXZpZGVOdW1iZXJCeVRocmVlO1xuICB9XG5cbiAgaWYgKHByb3BzLnJlcXVpcmVkV2l0aEVycm9yICYmICF2YWx1ZSkge1xuICAgIGNsYXNzTmFtZSArPSBcIiBmb3JtLXRleHQtLWVycm9yXCI7XG4gIH1cblxuICBpZiAocHJvcHMubGluZWQpIHtcbiAgICBjbGFzc05hbWUgKz0gXCIgZm9ybS10ZXh0LWxpbmVkXCI7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgICAge3Byb3BzLnBsYWNlaG9sZGVyICYmICFwcm9wcy5saW5lZCAmJiAoXG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtX19sYWJlbFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlucHV0LmN1cnJlbnQ/LmZvY3VzKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcm9wcy5sYWJlbH1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICApfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tdGV4dF9faW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICByZWY9e2lucHV0fVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS10ZXh0X19pbnB1dFwiXG4gICAgICAgICAgICBpZD17cHJvcHMuaWR9XG4gICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgICAgIHByb3BzLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWVcbiAgICAgICAgICAgICAgICA/IHNob3VsZERpdmlkZU51bWJlckJ5VGhyZWVcbiAgICAgICAgICAgICAgICAgID8gTnVtYmVyKHZhbHVlKS50b0xvY2FsZVN0cmluZygpXG4gICAgICAgICAgICAgICAgICA6IHZhbHVlXG4gICAgICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWlyZWQ9e3Byb3BzLnJlcXVpcmVkfVxuICAgICAgICAgICAgYXV0b0ZvY3VzPXtwcm9wcy5hdXRvRm9jdXN9XG4gICAgICAgICAgICBhdXRvQ29tcGxldGU9e3Byb3BzLmF1dG9Db21wbGV0ZSB8fCBcIlwifVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICAgICAgICAgICAgaWYgKHByb3BzLnR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLywvZywgXCJcIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoISFOdW1iZXIodmFsdWUpIHx8IE51bWJlcih2YWx1ZSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25CbHVyPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICBzZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIGlmIChwcm9wcy5vbkJsdXIpIHByb3BzLm9uQmx1cih2YWx1ZSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdHlwZT17cHJvcHMudHlwZSA9PT0gXCJwYXNzd29yZFwiID8gXCJwYXNzd29yZFwiIDogXCJ0ZXh0XCJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHshcHJvcHMucGxhY2Vob2xkZXIgJiYgKFxuICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgZm9ybS10ZXh0X19sYWJlbCAke1xuICAgICAgICAgICAgICB2YWx1ZSA/IFwiZm9ybS10ZXh0X19sYWJlbC0tdG9wXCIgOiBcIlwiXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgaW5wdXQuY3VycmVudD8uZm9jdXMoKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb3BzLmxhYmVsfVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLXRleHRfX2Zvb3RlclwiPlxuICAgICAgICB7cHJvcHMuZXJyb3IgJiYgIXByb3BzLmRpc2FibGVkICYmIChcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpbnB1dC1lcnJvclwiPlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZXhjbGFtYXRpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICAgICAge3Byb3BzLmVycm9yfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi9JbmxpbmVMb2FkaW5nXCI7XG5cbmNvbnN0IEJ1dHRvbiA9IChwcm9wcykgPT4ge1xuICBsZXQgY2xhc3NOYW1lID0gXCJidXR0b25cIjtcblxuICBzd2l0Y2ggKHByb3BzLnNpemUpIHtcbiAgICBjYXNlIFwiYmlnXCI6XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYnV0dG9uLWJpZ1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNtYWxsXCI6XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYnV0dG9uLXNtYWxsXCI7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHN3aXRjaCAocHJvcHMuY29sb3IpIHtcbiAgICBjYXNlIFwiYmx1ZVwiOlxuICAgICAgaWYgKHByb3BzLm91dGxpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBidXR0b24tYmx1ZS1vdXRsaW5lZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3NOYW1lICs9IFwiIGJ1dHRvbi1ibHVlXCI7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb3BzLm91dGxpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBidXR0b24tYmx1ZS1vdXRsaW5lZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3NOYW1lICs9IFwiIGJ1dHRvbi1ibHVlXCI7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmIChwcm9wcy5yb3VuZGVkKSB7XG4gICAgY2xhc3NOYW1lICs9IFwiIGJ1dHRvbi1yb3VuZGVkXCI7XG4gIH1cblxuICBpZiAocHJvcHMuYmxvY2spIHtcbiAgICBjbGFzc05hbWUgKz0gXCIgYnV0dG9uLWJsb2NrXCI7XG4gIH1cblxuICBjbGFzc05hbWUgKz0gXCIgXCIgKyBwcm9wcy5jbGFzc05hbWU7XG5cbiAgbGV0IGxvYWRpbmdDb2xvcjtcbiAgaWYgKHByb3BzLmNvbG9yID09PSBcImJsdWVcIikgbG9hZGluZ0NvbG9yID0gXCJibHVlXCI7XG4gIGlmICghcHJvcHMub3V0bGluZWQpIGxvYWRpbmdDb2xvciA9IFwibGlnaHRcIjtcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGlkPXtwcm9wcy5pZH1cbiAgICAgIHN0eWxlPXtwcm9wcy5zdHlsZX1cbiAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uQ2xpY2t9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgIHR5cGU9e3Byb3BzLnR5cGUgPyBwcm9wcy50eXBlIDogXCJidXR0b25cIn1cbiAgICAgIGRpc2FibGVkPXtwcm9wcy5sb2FkaW5nID8gdHJ1ZSA6IHByb3BzLmRpc2FibGVkfVxuICAgID5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIHtwcm9wcy5sb2FkaW5nICYmIChcbiAgICAgICAgPExvYWRpbmcgY2xhc3NOYW1lPVwidS1tYXJnaW4tbGVmdC0wM1wiIGNvbG9yPXtsb2FkaW5nQ29sb3J9IC8+XG4gICAgICApfVxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCBJbnB1dCBmcm9tIFwiLi4vcmV1c2FibGUvSW5wdXRcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL3JldXNhYmxlL0J1dHRvblwiO1xuaW1wb3J0IGFsZXJ0IGZyb20gXCIuLi9saWIvYWxlcnRcIjtcbmltcG9ydCB0IGZyb20gXCIuLi9saWIvdG9rZW5zXCI7XG5cbmNvbnN0IExvZ2luID0gKCkgPT4ge1xuICBjb25zdCBbdXNlcm5hbWUsIHNldFVzZXJuYW1lXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHsgbG9nZ2VkSW4sIHNldExvZ2dlZEluLCBzZXRTZWN0aW9uIH0gPSB1c2VDb250ZXh0KEFwcENvbnRleHQpO1xuXG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcblxuICBjb25zdCBvbkZvcm1TdWJtaXQgPSBhc3luYyAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8qKiBAQVBJIGNhbGwgKi9cbiAgICAgIGF3YWl0IGF4aW9zLnBvc3QoXCIvYXBpL2xvZ2luXCIsIHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0pO1xuICAgICAgc2V0TG9nZ2VkSW4odHJ1ZSk7XG4gICAgICBuYXZpZ2F0ZShcIi9wcm9maWxlXCIpO1xuICAgICAgc2V0U2VjdGlvbihcIi9wcm9maWxlXCIpO1xuICAgICAgYWxlcnQodC5hbGVydC5zdWNjZXNzLmF1dGgubG9nZ2VkSW4sIFwic3VjY2Vzc1wiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5yZXNwb25zZSAmJiBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIGFsZXJ0KHQuYWxlcnQuZXJyb3IuYXV0aC5iYWRMb2dpbkluZm8sIFwiZXJyb3JcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGVydCh0LmFsZXJ0LmVycm9yLmRlZmF1bHQsIFwiZXJyb3JcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICB9O1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibG9naW4tY29udGFpbmVyXCI+XG4gICAgICA8Zm9ybSBvblN1Ym1pdD17b25Gb3JtU3VibWl0fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPElucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBsYWJlbD1cIlVzZXJuYW1lXCJcbiAgICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgc2V0VXNlcm5hbWUodmFsdWUpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPElucHV0XG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgbGFiZWw9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIHNldFBhc3N3b3JkKHZhbHVlKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHUtZmxleC10ZXh0LXJpZ2h0XCI+XG4gICAgICAgICAgPEJ1dHRvbiBjb2xvcj1cImJsdWVcIiB0eXBlPVwic3VibWl0XCIgbG9hZGluZz17bG9hZGluZ30+XG4gICAgICAgICAgICBMb2dpblxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBUZXh0YXJlYSA9IChwcm9wcykgPT4ge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlKHByb3BzLnZhbHVlPy50b1N0cmluZygpKTtcblxuICBjb25zdCBpbnB1dCA9IHVzZVJlZihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9wcy52YWx1ZSkge1xuICAgICAgc2V0VmFsdWUocHJvcHMudmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFZhbHVlKFwiXCIpO1xuICAgIH1cbiAgfSwgW3Byb3BzLnZhbHVlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvcHMub25DaGFuZ2UgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBwcm9wcy5vbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICB9LCBbdmFsdWVdKTtcblxuICBsZXQgY2xhc3NOYW1lID0gXCJmb3JtLXRleHQgZm9ybS10ZXh0LS10ZXh0YXJlYVwiO1xuXG4gIHN3aXRjaCAocHJvcHMuc2l6ZSkge1xuICAgIGNhc2UgXCJiaWdcIjpcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmb3JtLXRleHQtLWJpZ1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNtYWxsXCI6XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZm9ybS10ZXh0LS1zbWFsbFwiO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBpZiAocHJvcHMucm91bmRlZCkgY2xhc3NOYW1lICs9IFwiIGZvcm0tdGV4dC0tcm91bmRlZFwiO1xuICBpZiAocHJvcHMuZXJyb3IpIGNsYXNzTmFtZSArPSBcIiBmb3JtLXRleHQtLWVycm9yXCI7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICAgIHtwcm9wcy5wbGFjZWhvbGRlciAmJiAoXG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtX19sYWJlbFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlucHV0LmN1cnJlbnQ/LmZvY3VzKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcm9wcy5sYWJlbH1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICApfVxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS10ZXh0X19pbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgIHJvd3M9e3Byb3BzLnJvd3N9XG4gICAgICAgICAgICByZWY9e2lucHV0fVxuICAgICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS10ZXh0X19pbnB1dFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17cHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICByZXF1aXJlZD17cHJvcHMucmVxdWlyZWR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgICAgc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQmx1cj17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChwcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgICAgICAgICBwcm9wcy5vbkJsdXIoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+PC90ZXh0YXJlYT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgeyFwcm9wcy5wbGFjZWhvbGRlciAmJiAoXG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Bmb3JtLXRleHRfX2xhYmVsICR7XG4gICAgICAgICAgICAgIHZhbHVlID8gXCJmb3JtLXRleHRfX2xhYmVsLS10b3BcIiA6IFwiXCJcbiAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBpbnB1dC5jdXJyZW50Py5mb2N1cygpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7cHJvcHMubGFiZWx9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tdGV4dF9fZm9vdGVyXCI+XG4gICAgICAgIHtwcm9wcy5lcnJvciAmJiAoXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5wdXQtZXJyb3JcIj5cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgICAgIHtwcm9wcy5lcnJvcn1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCBJbnB1dCBmcm9tIFwiLi4vcmV1c2FibGUvSW5wdXRcIjtcbmltcG9ydCBUZXh0YXJlYSBmcm9tIFwiLi4vcmV1c2FibGUvVGV4dGFyZWFcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL3JldXNhYmxlL0J1dHRvblwiO1xuaW1wb3J0IGFsZXJ0IGZyb20gXCIuLi9saWIvYWxlcnRcIjtcbmltcG9ydCB0IGZyb20gXCIuLi9saWIvdG9rZW5zXCI7XG5cbmNvbnN0IE5ld1Bvc3QgPSAoKSA9PiB7XG4gIGNvbnN0IFt0aXRsZSwgc2V0VGl0bGVdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtib2R5LCBzZXRCb2R5XSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHsgc2V0U2VjdGlvbiB9ID0gdXNlQ29udGV4dChBcHBDb250ZXh0KTtcblxuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgY29uc3Qgb25Gb3JtU3VibWl0ID0gYXN5bmMgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2V0TG9hZGluZyh0cnVlKTtcblxuICAgIHRyeSB7XG4gICAgICAvKiogQEFQSSBjYWxsICovXG4gICAgICBhd2FpdCBheGlvcy5wb3N0KFwiL2FwaS9wb3N0c1wiLCB7IHRpdGxlLCBib2R5IH0pO1xuICAgICAgbmF2aWdhdGUoXCIvXCIpO1xuICAgICAgc2V0U2VjdGlvbihcIi9cIik7XG4gICAgICBhbGVydCh0LmFsZXJ0LnN1Y2Nlc3MucG9zdC5jcmVhdGVkLCBcInN1Y2Nlc3NcIik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWxlcnQodC5hbGVydC5lcnJvci5kZWZhdWx0LCBcImVycm9yXCIpO1xuICAgIH1cblxuICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJuZXctcG9zdC1jb250YWluZXJcIj5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtvbkZvcm1TdWJtaXR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbGFiZWw9XCJUaXRsZVwiXG4gICAgICAgICAgICB2YWx1ZT17dGl0bGV9XG4gICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIHNldFRpdGxlKHZhbHVlKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgIDxUZXh0YXJlYVxuICAgICAgICAgICAgbGFiZWw9XCJCb2R5XCJcbiAgICAgICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICAgICAgcm93cz17NX1cbiAgICAgICAgICAgIHZhbHVlPXtib2R5fVxuICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRCb2R5KHZhbHVlKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cCB1LWZsZXgtdGV4dC1yaWdodFwiPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgY29sb3I9XCJibHVlXCJcbiAgICAgICAgICAgIGxvYWRpbmc9e2xvYWRpbmd9XG4gICAgICAgICAgICBkaXNhYmxlZD17IWJvZHkubGVuZ3RoIHx8ICF0aXRsZS5sZW5ndGh9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ3JlYXRlXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9mb3JtPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTmV3UG9zdDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgSW5wdXQgZnJvbSBcIi4uL3JldXNhYmxlL0lucHV0XCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9yZXVzYWJsZS9CdXR0b25cIjtcbmltcG9ydCBhbGVydCBmcm9tIFwiLi4vbGliL2FsZXJ0XCI7XG5pbXBvcnQgSW5saW5lTG9hZGluZyBmcm9tIFwiLi4vcmV1c2FibGUvSW5saW5lTG9hZGluZ1wiO1xuaW1wb3J0IHQgZnJvbSBcIi4uL2xpYi90b2tlbnNcIjtcblxuY29uc3QgUHJvZmlsZSA9ICgpID0+IHtcbiAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFt1c2VybmFtZSwgc2V0VXNlcm5hbWVdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtjb250ZW50TG9hZGluZywgc2V0Q29udGVudExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpOyAvLyBsb2FkaW5nIGZvciB0aGUgZGF0YSBmZXRjaGluZ1xuICBjb25zdCBbZm9ybUxvYWRpbmcsIHNldEZvcm1Mb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTsgLy8gbG9hZGluZyBmb3IgdGhlIGZvcm0gc3VibWlzc2lvblxuXG4gIGNvbnN0IGZldGNoRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRDb250ZW50TG9hZGluZyh0cnVlKTtcbiAgICB0cnkge1xuICAgICAgLyoqIEBBUEkgY2FsbCAqL1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQoXCIvYXBpL3VzZXJcIik7XG4gICAgICBzZXROYW1lKGRhdGEubmFtZSk7XG4gICAgICBzZXRVc2VybmFtZShkYXRhLnVzZXJuYW1lKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhbGVydCh0LmFsZXJ0LmVycm9yLmRlZmF1bHQsIFwiZXJyb3JcIik7XG4gICAgfVxuICAgIHNldENvbnRlbnRMb2FkaW5nKGZhbHNlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZldGNoRGF0YSgpO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgb25Gb3JtU3VibWl0ID0gYXN5bmMgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2V0Rm9ybUxvYWRpbmcodHJ1ZSk7XG5cbiAgICB0cnkge1xuICAgICAgLyoqIEBBUEkgY2FsbCAqL1xuICAgICAgYXdhaXQgYXhpb3MucHV0KFwiL2FwaS91c2VyXCIsIHsgbmFtZSwgdXNlcm5hbWUsIHBhc3N3b3JkIH0pO1xuICAgICAgYWxlcnQodC5hbGVydC5zdWNjZXNzLnVzZXIudXBkYXRlZCwgXCJzdWNjZXNzXCIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFsZXJ0KHQuYWxlcnQuZXJyb3IuZGVmYXVsdCwgXCJlcnJvclwiKTtcbiAgICB9XG4gICAgc2V0Rm9ybUxvYWRpbmcoZmFsc2UpO1xuICB9O1xuXG4gIGlmIChjb250ZW50TG9hZGluZylcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1LXRleHQtY2VudGVyIHUtbWFyZ2luLXRvcC0zXCI+XG4gICAgICAgIDxJbmxpbmVMb2FkaW5nIGNvbG9yPVwiZ3JheVwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlLWNvbnRhaW5lclwiPlxuICAgICAgPGZvcm0gb25TdWJtaXQ9e29uRm9ybVN1Ym1pdH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbGFiZWw9XCJOYW1lXCJcbiAgICAgICAgICAgIHZhbHVlPXtuYW1lfVxuICAgICAgICAgICAgcmVxdWlyZWQ9e3RydWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIHNldE5hbWUodmFsdWUpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPElucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBsYWJlbD1cIlVzZXJuYW1lXCJcbiAgICAgICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRVc2VybmFtZSh2YWx1ZSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBsYWJlbD1cIlBhc3N3b3JkXCJcbiAgICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgc2V0UGFzc3dvcmQodmFsdWUpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHUtZmxleC10ZXh0LXJpZ2h0XCI+XG4gICAgICAgICAgPEJ1dHRvbiBjb2xvcj1cImJsdWVcIiB0eXBlPVwic3VibWl0XCIgbG9hZGluZz17Zm9ybUxvYWRpbmd9PlxuICAgICAgICAgICAgU2F2ZVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGU7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL3JldXNhYmxlL0J1dHRvblwiO1xuaW1wb3J0IGFsZXJ0IGZyb20gXCIuLi9saWIvYWxlcnRcIjtcbmltcG9ydCB0IGZyb20gXCIuLi9saWIvdG9rZW5zXCI7XG5cbmNvbnN0IEhlYWRlciA9ICgpID0+IHtcbiAgY29uc3QgeyBsb2dnZWRJbiwgc2V0TG9nZ2VkSW4sIHNlY3Rpb24sIHNldFNlY3Rpb24gfSA9IHVzZUNvbnRleHQoQXBwQ29udGV4dCk7XG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcblxuICBjb25zdCBjaGVja0xvZ2dlZEluID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvKiogQEFQSSBjYWxsICovXG4gICAgICBhd2FpdCBheGlvcy5nZXQoXCIvYXBpL3VzZXJcIik7XG4gICAgICBzZXRMb2dnZWRJbih0cnVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzZXRMb2dnZWRJbihmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGxvZ2dlZEluID09PSBudWxsKSBjaGVja0xvZ2dlZEluKCk7XG4gIH0sIFtsb2dnZWRJbl0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0U2VjdGlvbih3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICB9LCBbc2VjdGlvbl0pO1xuXG4gIGNvbnN0IGxvZ291dCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLyoqIEBBUEkgY2FsbCAqL1xuICAgICAgYXdhaXQgYXhpb3MuZGVsZXRlKFwiL2FwaS9sb2dvdXRcIik7XG4gICAgICBzZXRMb2dnZWRJbihmYWxzZSk7XG4gICAgICBzZXRTZWN0aW9uKFwiL1wiKTtcbiAgICAgIGFsZXJ0KHQuYWxlcnQuc3VjY2Vzcy5hdXRoLmxvZ2dlZE91dCwgXCJzdWNjZXNzXCIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFsZXJ0KHQuYWxlcnQuZXJyb3IuZGVmYXVsdCwgXCJlcnJvclwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJfX2xlZnRcIj5cbiAgICAgICAgPExpbmtcbiAgICAgICAgICBjbGFzc05hbWU9XCJoZWFkZXJfX2xpbmsgaGVhZGVyX19saW5rLS1ob21lXCJcbiAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIHNldFNlY3Rpb24oXCIvXCIpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBIb21lXG4gICAgICAgIDwvTGluaz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJfX3JpZ2h0XCI+XG4gICAgICAgIHtzZWN0aW9uICE9PSBcIi9sb2dpblwiICYmICFsb2dnZWRJbiAmJiAoXG4gICAgICAgICAgPExpbmtcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImhlYWRlcl9fbGluayBoZWFkZXJfX2xpbmstLWxvZ2luXCJcbiAgICAgICAgICAgIHRvPVwiL2xvZ2luXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgc2V0U2VjdGlvbihcIi9sb2dpblwiKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgTG9naW5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgICl9XG5cbiAgICAgICAge3NlY3Rpb24gIT09IFwiL25ldy1wb3N0XCIgJiYgbG9nZ2VkSW4gJiYgKFxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICBjb2xvcj1cImJsdWVcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBzZXRTZWN0aW9uKFwiL25ldy1wb3N0XCIpO1xuICAgICAgICAgICAgICBuYXZpZ2F0ZShcIi9uZXctcG9zdFwiKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ3JlYXRlIGEgUG9zdFxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIC8vIDxMaW5rXG4gICAgICAgICAgLy8gICBjbGFzc05hbWU9XCJoZWFkZXJfX2xpbmsgaGVhZGVyX19saW5rLS1uZXctcG9zdFwiXG4gICAgICAgICAgLy8gICB0bz1cIi9uZXctcG9zdFwiXG4gICAgICAgICAgLy8gICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgLy8gICAgIHNldFNlY3Rpb24oXCIvbmV3LXBvc3RcIik7XG4gICAgICAgICAgLy8gICB9fVxuICAgICAgICAgIC8vID5cbiAgICAgICAgICAvLyAgIENyZWF0ZSBhIFBvc3RcbiAgICAgICAgICAvLyA8L0xpbms+XG4gICAgICAgICl9XG5cbiAgICAgICAge3NlY3Rpb24gIT09IFwiL3Byb2ZpbGVcIiAmJiBsb2dnZWRJbiAmJiAoXG4gICAgICAgICAgPExpbmtcbiAgICAgICAgICAgIHRvPVwiL3Byb2ZpbGVcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaGVhZGVyX19saW5rIGhlYWRlcl9fbGluay0tcHJvZmlsZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNldFNlY3Rpb24oXCIvcHJvZmlsZVwiKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgUHJvZmlsZVxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgKX1cblxuICAgICAgICB7bG9nZ2VkSW4gJiYgKFxuICAgICAgICAgIDxMaW5rXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJoZWFkZXJfX2xpbmsgaGVhZGVyX19saW5rLS1sb2dvdXRcIlxuICAgICAgICAgICAgdG89XCIvXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgbG9nb3V0KCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIExvZ291dFxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIjtcbmltcG9ydCB7XG4gIE5hdmlnYXRlLFxuICBSb3V0ZSxcbiAgUm91dGVzLFxuICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcbn0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vY29tcG9uZW50cy9Ib21lXCI7XG5pbXBvcnQgTG9naW4gZnJvbSBcIi4vY29tcG9uZW50cy9Mb2dpblwiO1xuaW1wb3J0IE5ld1Bvc3QgZnJvbSBcIi4vY29tcG9uZW50cy9OZXdQb3N0XCI7XG5pbXBvcnQgUHJvZmlsZSBmcm9tIFwiLi9jb21wb25lbnRzL1Byb2ZpbGVcIjtcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4vY29tcG9uZW50cy9IZWFkZXJcIjtcblxuZXhwb3J0IGNvbnN0IEFwcENvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xuZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCBbbG9nZ2VkSW4sIHNldExvZ2dlZEluXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbc2VjdGlvbiwgc2V0U2VjdGlvbl0gPSB1c2VTdGF0ZShcIi9cIik7IC8vIFBvc3NpYmxlIHZhbHVlczogW1wiL1wiLCBcIi9wcm9maWxlXCIsIFwiL2xvZ2luXCIsIFwiL25ldy1wb3N0XCJdO1xuXG4gIHJldHVybiAoXG4gICAgPEFwcENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgbG9nZ2VkSW4sIHNldExvZ2dlZEluLCBzZWN0aW9uLCBzZXRTZWN0aW9uIH19PlxuICAgICAgPFJvdXRlcj5cbiAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8Um91dGVzPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxIb21lIC8+fSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ2luXCIgZWxlbWVudD17PExvZ2luIC8+fSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL25ldy1wb3N0XCIgZWxlbWVudD17PE5ld1Bvc3QgLz59IC8+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcHJvZmlsZVwiIGVsZW1lbnQ9ezxQcm9maWxlIC8+fSAvPlxuICAgICAgICA8L1JvdXRlcz5cbiAgICAgIDwvUm91dGVyPlxuICAgIDwvQXBwQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuY29uc3Qgcm9vdCA9IFJlYWN0RE9NLmNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpKTtcbnJvb3QucmVuZGVyKDxBcHAgLz4pO1xuIl0sIm5hbWVzIjpbImxlYWZQcm90b3R5cGVzIiwiZ2V0UHJvdG8iLCJtb2R1bGUiLCJleHBvcnRzIiwidXRpbHMiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJBeGlvc0Vycm9yIiwiQ2FuY2VsZWRFcnJvciIsInBhcnNlUHJvdG9jb2wiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uQ2FuY2VsZWQiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJkb25lIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Zvcm1EYXRhIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJ2YWx1ZSIsImVyciIsIm9wZW4iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInNldFRpbWVvdXQiLCJvbmFib3J0IiwiRUNPTk5BQk9SVEVEIiwib25lcnJvciIsIkVSUl9ORVRXT1JLIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInRyYW5zaXRpb25hbCIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJFVElNRURPVVQiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJpc1VuZGVmaW5lZCIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsIiwidHlwZSIsImFib3J0Iiwic3Vic2NyaWJlIiwiYWJvcnRlZCIsInByb3RvY29sIiwiRVJSX0JBRF9SRVFVRVNUIiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJleHRlbmQiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJWRVJTSU9OIiwidG9Gb3JtRGF0YSIsIkNhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInRoaXMiLCJwcm9taXNlIiwidG9rZW4iLCJ0aGVuIiwiX2xpc3RlbmVycyIsImkiLCJsIiwibGVuZ3RoIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIm1lc3NhZ2UiLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwibGlzdGVuZXIiLCJwdXNoIiwiaW5kZXgiLCJzcGxpY2UiLCJzb3VyY2UiLCJjIiwiY2FsbCIsIkVSUl9DQU5DRUxFRCIsIm5hbWUiLCJpbmhlcml0cyIsIl9fQ0FOQ0VMX18iLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwiZGVmYXVsdHMiLCJpbnRlcmNlcHRvcnMiLCJjb25maWdPclVybCIsImFzc2VydE9wdGlvbnMiLCJzaWxlbnRKU09OUGFyc2luZyIsImJvb2xlYW4iLCJmb3JjZWRKU09OUGFyc2luZyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJydW5XaGVuIiwic3luY2hyb25vdXMiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJjaGFpbiIsIkFycmF5IiwiYXBwbHkiLCJjb25jYXQiLCJzaGlmdCIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImVycm9yIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiY29kZSIsIkVycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImRlc2NyaXB0b3JzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiZnJvbSIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsInRvRmxhdE9iamVjdCIsIm9iaiIsImFzc2lnbiIsImhhbmRsZXJzIiwidXNlIiwib3B0aW9ucyIsImVqZWN0IiwiaWQiLCJmbiIsImgiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJ0YXJnZXQiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsInNsaWNlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwia2V5cyIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdGVTdGF0dXMiLCJFUlJfQkFEX1JFU1BPTlNFIiwiTWF0aCIsImZsb29yIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwicHJvY2VzcyIsInRvU3RyaW5nIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNGaWxlTGlzdCIsImlzT2JqZWN0UGF5bG9hZCIsImlzT2JqZWN0IiwiY29udGVudFR5cGUiLCJfRm9ybURhdGEiLCJlbnYiLCJGb3JtRGF0YSIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZW5jb2RlciIsImlzU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwidHJpbSIsImUiLCJzdHJpbmdpZnkiLCJzdHJpbmdpZnlTYWZlbHkiLCJzdHJpY3RKU09OUGFyc2luZyIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidGhpc0FyZyIsImFyZ3MiLCJhcmd1bWVudHMiLCJlbmNvZGUiLCJyZXBsYWNlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsImhhc2htYXJrSW5kZXgiLCJyZWxhdGl2ZVVSTCIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImRvY3VtZW50IiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJ0ZXN0IiwicGF5bG9hZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwiZXhlYyIsImNhbGxiYWNrIiwiYXJyIiwiZm9ybURhdGEiLCJjb252ZXJ0VmFsdWUiLCJpc1R5cGVkQXJyYXkiLCJCbG9iIiwiQnVmZmVyIiwiYnVpbGQiLCJwYXJlbnRLZXkiLCJmdWxsS2V5IiwiZW5kc1dpdGgiLCJ0b0FycmF5IiwiZWwiLCJhcHBlbmQiLCJwb3AiLCJ0aGluZyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJFUlJfREVQUkVDQVRFRCIsImNvbnNvbGUiLCJ3YXJuIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJyZXN1bHQiLCJFUlJfQkFEX09QVElPTiIsImNhY2hlIiwia2luZE9mIiwic3RyIiwia2luZE9mVGVzdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJjb25zdHJ1Y3RvciIsInBhdHRlcm4iLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInBpcGUiLCJwcm9kdWN0IiwiYXNzaWduVmFsdWUiLCJhIiwiYiIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJzdXBlckNvbnN0cnVjdG9yIiwicHJvcHMiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwibWVyZ2VkIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwiU3RyaW5nIiwibGFzdEluZGV4IiwiYWEiLCJjYSIsInAiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImFkZCIsImlhIiwiamEiLCJrYSIsImxhIiwibWEiLCJkIiwiZiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJyYSIsInNhIiwidGEiLCJwYSIsImlzTmFOIiwicWEiLCJvYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwiU3ltYm9sIiwiZm9yIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJBIiwiTWEiLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiayIsImRpc3BsYXlOYW1lIiwiaW5jbHVkZXMiLCJQYSIsInRhZyIsInJlbmRlciIsIlFhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInN1YnN0cmluZyIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIm0iLCJvbkVycm9yIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIldiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJYYiIsIlpiIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsIlliIiwiJGIiLCJhYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJiYyIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiY2MiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImRjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiQiIsInVuc3RhYmxlX25vdyIsImVjIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJmYyIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiZ2MiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImhjIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJpYyIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiamMiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJrYyIsImxjIiwib2MiLCJjbHozMiIsInBjIiwicWMiLCJsb2ciLCJMTjIiLCJyYyIsInNjIiwidGMiLCJ1YyIsInBlbmRpbmdMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJ2YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiZXZlbnRUaW1lcyIsIkNjIiwiQyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIk1hcCIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiVGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiVmMiLCJXYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlhjIiwiWWMiLCJkaXNwYXRjaEV2ZW50IiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiZGQiLCJlZCIsInRyYW5zaXRpb24iLCJmZCIsImdkIiwiaGQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJmcm9tQ2hhckNvZGUiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJMZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJNZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsIk5lIiwiY29udGVudEVkaXRhYmxlIiwiT2UiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZG9jdW1lbnRFbGVtZW50Iiwic3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIm1pbiIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlhlIiwiWWUiLCJaZSIsImFuaW1hdGlvbiIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImxmIiwibWYiLCJuZiIsIlViIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIm4iLCJ0IiwiSiIsIngiLCJ1IiwidyIsIkYiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJjaGFyIiwia2UiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiSmYiLCJxdWV1ZU1pY3JvdGFzayIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsIkkiLCJ6ZyIsIkFnIiwiQmciLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwibW9kZSIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiZGVmYXVsdFByb3BzIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiX2N1cnJlbnRWYWx1ZSIsIlNnIiwiY2hpbGRMYW5lcyIsIlRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJVZyIsIlZnIiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwiZGgiLCJLIiwiZWgiLCJmaCIsImdoIiwicSIsInIiLCJ5IiwiaGgiLCJpaCIsImpoIiwiQ29tcG9uZW50IiwicmVmcyIsImtoIiwibmgiLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJMIiwibGgiLCJtaCIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJvaCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwicGgiLCJjb250ZXh0VHlwZSIsInN0YXRlIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNoIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJ0YWdOYW1lIiwiSmgiLCJLaCIsIkxoIiwiTSIsIk1oIiwicmV2ZWFsT3JkZXIiLCJOaCIsIk9oIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJQaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJRaCIsIlJoIiwiTiIsIk8iLCJQIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJRIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiZGkiLCJlaSIsImZpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJnZXRTbmFwc2hvdCIsImxpIiwibWkiLCJSIiwibmkiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwib2kiLCJwaSIsInFpIiwicmkiLCJkZXN0cm95IiwiZGVwcyIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJLaSIsImRpZ2VzdCIsIkxpIiwiTWkiLCJOaSIsIldlYWtNYXAiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjb21wYXJlIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiUyIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJUIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJVIiwiTGoiLCJXZWFrU2V0IiwiViIsIk1qIiwiVyIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIlgiLCJZaiIsIlpqIiwiYWsiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsImlzSGlkZGVuIiwiZ2siLCJoayIsImRpc3BsYXkiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiV2siLCJtayIsImNlaWwiLCJuayIsIm9rIiwicGsiLCJZIiwiWiIsInFrIiwicmsiLCJzayIsInRrIiwidWsiLCJJbmZpbml0eSIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsIlBrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlFrIiwidGltZW91dEhhbmRsZSIsIlJrIiwiU2siLCJUayIsIlVrIiwiVmsiLCJtdXRhYmxlUmVhZExhbmVzIiwiQmMiLCJQaiIsIm9uQ29tbWl0RmliZXJSb290IiwibWMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJYayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIllrIiwiWmsiLCJhbCIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJibCIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJjbCIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidmwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwid2wiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImRsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJDaGlsZHJlbiIsIm1hcCIsImNvdW50Iiwib25seSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwic2V0SW1tZWRpYXRlIiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwic2NoZWR1bGluZyIsImlzSW5wdXRQZW5kaW5nIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwibnMiLCJkZWYiLCJkZWZpbml0aW9uIiwibyIsInRvU3RyaW5nVGFnIiwiQWN0aW9uIiwiX2V4dGVuZHMiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsIndhcm5pbmciLCJjb25kIiwiZ2V0SGlzdG9yeVN0YXRlIiwidXNyIiwiaWR4IiwiY3JlYXRlTG9jYXRpb24iLCJ0byIsInBhcnNlUGF0aCIsIl9yZWYiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJSZXN1bHRUeXBlIiwibWF0Y2hSb3V0ZXMiLCJyb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwiYnJhbmNoZXMiLCJmbGF0dGVuUm91dGVzIiwic29ydCIsInNjb3JlIiwiZXZlcnkiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaGVzIiwibWF0Y2hSb3V0ZUJyYW5jaCIsInNhZmVseURlY29kZVVSSSIsInBhcmVudHNNZXRhIiwicGFyZW50UGF0aCIsImZsYXR0ZW5Sb3V0ZSIsInJvdXRlIiwicmVsYXRpdmVQYXRoIiwiY2FzZVNlbnNpdGl2ZSIsInN0YXJ0c1dpdGgiLCJjb21wdXRlU2NvcmUiLCJfcm91dGUkcGF0aCIsImV4cGxvZGVkIiwiZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMiLCJzZWdtZW50cyIsImZpcnN0IiwicmVzdCIsImlzT3B0aW9uYWwiLCJyZXF1aXJlZCIsInJlc3RFeHBsb2RlZCIsInN1YnBhdGgiLCJwYXJhbVJlIiwiZHluYW1pY1NlZ21lbnRWYWx1ZSIsImluZGV4Um91dGVWYWx1ZSIsImVtcHR5U2VnbWVudFZhbHVlIiwic3RhdGljU2VnbWVudFZhbHVlIiwic3BsYXRQZW5hbHR5IiwiaXNTcGxhdCIsInMiLCJpbml0aWFsU2NvcmUiLCJzb21lIiwicmVkdWNlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwibWF0Y2hlciIsInBhcmFtTmFtZXMiLCJyZWdleHBTb3VyY2UiLCJfIiwicGFyYW1OYW1lIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwic3BsYXRWYWx1ZSIsInNhZmVseURlY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSSIsInN0YXJ0SW5kZXgiLCJuZXh0Q2hhciIsImdldEludmFsaWRQYXRoRXJyb3IiLCJmaWVsZCIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJpc0VtcHR5UGF0aCIsInRvUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiZnJvbVBhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsInJlc29sdmVQYXRoIiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJwYXRocyIsInZhbGlkTXV0YXRpb25NZXRob2RzQXJyIiwidmFsaWRSZXF1ZXN0TWV0aG9kc0FyciIsIkRhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIk5hdmlnYXRpb25Db250ZXh0IiwiTG9jYXRpb25Db250ZXh0IiwiUm91dGVDb250ZXh0Iiwib3V0bGV0IiwiaXNEYXRhUm91dGUiLCJSb3V0ZUVycm9yQ29udGV4dCIsInVzZUluUm91dGVyQ29udGV4dCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJzdGF0aWMiLCJyb3V0ZXIiLCJob29rTmFtZSIsImN0eCIsInVzZURhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlckhvb2siLCJVc2VOYXZpZ2F0ZVN0YWJsZSIsInVzZUN1cnJlbnRSb3V0ZUlkIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsImFjdGl2ZVJlZiIsIm5hdmlnYXRlIiwiZnJvbVJvdXRlSWQiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwicm91dGVQYXRobmFtZXNKc29uIiwiZ28iLCJyZWxhdGl2ZSIsInVzZU5hdmlnYXRlVW5zdGFibGUiLCJfdGVtcDIiLCJ1c2VSb3V0ZXNJbXBsIiwiZGF0YVJvdXRlclN0YXRlIiwicGFyZW50TWF0Y2hlcyIsInJvdXRlTWF0Y2giLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJyZW5kZXJlZE1hdGNoZXMiLCJfZGF0YVJvdXRlclN0YXRlMiIsIl9kYXRhUm91dGVyU3RhdGUiLCJlcnJvcnMiLCJlcnJvckluZGV4IiwiZmluZEluZGV4IiwicmVkdWNlUmlnaHQiLCJlcnJvckVsZW1lbnQiLCJkZWZhdWx0RXJyb3JFbGVtZW50IiwiZ2V0Q2hpbGRyZW4iLCJSZW5kZXJlZFJvdXRlIiwicm91dGVDb250ZXh0IiwiRXJyb3JCb3VuZGFyeSIsIlJlbmRlckVycm9yQm91bmRhcnkiLCJyZXZhbGlkYXRpb24iLCJjb21wb25lbnQiLCJfcmVuZGVyTWF0Y2hlcyIsImVuY29kZUxvY2F0aW9uIiwibmF2aWdhdGlvblR5cGUiLCJQb3AiLCJEZWZhdWx0RXJyb3JDb21wb25lbnQiLCJfc3RhdGUkZXJyb3JzIiwidXNlRGF0YVJvdXRlclN0YXRlIiwiVXNlUm91dGVFcnJvciIsInJvdXRlSWQiLCJ1c2VSb3V0ZUVycm9yIiwiaW50ZXJuYWwiLCJpc1JvdXRlRXJyb3JSZXNwb25zZSIsInByZVN0eWxlcyIsInBhZGRpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250U3R5bGUiLCJzdXBlciIsImVycm9ySW5mbyIsInN0YXRpY0NvbnRleHQiLCJfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCIsIkF3YWl0UmVuZGVyU3RhdHVzIiwidXNlUm91dGVDb250ZXh0IiwidGhpc1JvdXRlIiwiUm91dGUiLCJfcHJvcHMiLCJfcmVmNSIsImJhc2VuYW1lUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsImxvY2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJSb3V0ZXMiLCJfcmVmNiIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsInRyZWVQYXRoIiwibG9hZGVyIiwiaGFzRXJyb3JCb3VuZGFyeSIsInNob3VsZFJldmFsaWRhdGUiLCJoYW5kbGUiLCJfZXhjbHVkZWQiLCJCcm93c2VyUm91dGVyIiwiZnV0dXJlIiwiaGlzdG9yeVJlZiIsInY1Q29tcGF0IiwiZ2V0TG9jYXRpb24iLCJjcmVhdGVIcmVmIiwidmFsaWRhdGVMb2NhdGlvbiIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImNyZWF0ZVVSTCIsIm9yaWdpbiIsIlVSTCIsInJlcGxhY2VTdGF0ZSIsImxpc3RlbiIsIlB1c2giLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJET01FeGNlcHRpb24iLCJSZXBsYWNlIiwiZ2V0VXJsQmFzZWRIaXN0b3J5Iiwic2V0U3RhdGVJbXBsIiwidjdfc3RhcnRUcmFuc2l0aW9uIiwibmV3U3RhdGUiLCJpc0Jyb3dzZXIiLCJMaW5rIiwiX3JlZjQiLCJhYnNvbHV0ZUhyZWYiLCJyZWxvYWREb2N1bWVudCIsInByZXZlbnRTY3JvbGxSZXNldCIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiaXNFeHRlcm5hbCIsImN1cnJlbnRVcmwiLCJ0YXJnZXRVcmwiLCJfdGVtcCIsImpvaW5lZFBhdGhuYW1lIiwidXNlSHJlZiIsImludGVybmFsT25DbGljayIsInJlcGxhY2VQcm9wIiwiaXNNb2RpZmllZEV2ZW50Iiwic2hvdWxkUHJvY2Vzc0xpbmtDbGljayIsInVzZUxpbmtDbGlja0hhbmRsZXIiLCJjbGFzc05hbWUiLCJSZWFjdCIsImNlbnRlciIsIl9hbGVydCIsIl9hbGVydDIiLCJfYWxlcnQzIiwiX2FsZXJ0NCIsIl9hbGVydDUiLCJhbGVydCIsInF1ZXJ5U2VsZWN0b3IiLCJfZG9jdW1lbnQkcXVlcnlTZWxlY3QiLCJFbEFsZXJ0IiwiRUxBbGVydFAiLCJFTEFsZXJ0QnV0dG9uIiwiRUxBbGVydEJ1dHRvblNwYW4iLCJfYWxlcnQ2IiwiX2FsZXJ0NyIsImFsZXJ0VGV4dCIsImFsZXJ0QnV0dG9uIiwiY2xhc3NMaXN0IiwiX2FsZXJ0OCIsIl9hbGVydDkiLCJfYWxlcnQxMCIsIl9hbGVydDExIiwiX2FsZXJ0MTIiLCJfYWxlcnQxMyIsIl9hbGVydDE0IiwiX2FsZXJ0MTUiLCJiYWRMb2dpbkluZm8iLCJwb3N0IiwidXNlciIsInN1Y2Nlc3MiLCJsb2dnZWRPdXQiLCJsb2dnZWRJbiIsImNyZWF0ZWQiLCJ1cGRhdGVkIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImRlZmluZSIsIndyaXRhYmxlIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiYXJnIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVjb3JkIiwiX3R5cGVvZiIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJtZXRob2ROYW1lIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJkb25lUmVzdWx0IiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsIm9iamVjdCIsInJldmVyc2UiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaSIsIl9zIiwiX2UiLCJfeCIsIl9yIiwiX2FyciIsIl9uIiwiX2QiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJsZW4iLCJhcnIyIiwiX3VzZVN0YXRlMiIsInBvc3RzIiwic2V0UG9zdHMiLCJfdXNlU3RhdGU0IiwibG9hZGluZyIsInNldExvYWRpbmciLCJmZXRjaFBvc3RzIiwiX2NhbGxlZSIsIl95aWVsZCRheGlvcyRnZXQiLCJ0MCIsIklubGluZUxvYWRpbmciLCJ0aXRsZSIsImF1dGhvciIsIl9wcm9wcyR2YWx1ZSIsIm9uQ2hhbmdlIiwicm91bmRlZCIsInNob3VsZERpdmlkZU51bWJlckJ5VGhyZWUiLCJyZXF1aXJlZFdpdGhFcnJvciIsImxpbmVkIiwicGxhY2Vob2xkZXIiLCJfaW5wdXQkY3VycmVudCIsImxhYmVsIiwiTnVtYmVyIiwidG9Mb2NhbGVTdHJpbmciLCJhdXRvQ29tcGxldGUiLCJvbkJsdXIiLCJfaW5wdXQkY3VycmVudDIiLCJsb2FkaW5nQ29sb3IiLCJvdXRsaW5lZCIsImJsb2NrIiwiTG9hZGluZyIsInNldFVzZXJuYW1lIiwic2V0UGFzc3dvcmQiLCJfdXNlU3RhdGU2IiwiX3VzZUNvbnRleHQiLCJBcHBDb250ZXh0Iiwic2V0TG9nZ2VkSW4iLCJzZXRTZWN0aW9uIiwidXNlTmF2aWdhdGUiLCJvbkZvcm1TdWJtaXQiLCJfeDIiLCJvblN1Ym1pdCIsIklucHV0IiwiQnV0dG9uIiwicm93cyIsInNldFRpdGxlIiwic2V0Qm9keSIsIlRleHRhcmVhIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJzZXROYW1lIiwiX3VzZVN0YXRlOCIsImNvbnRlbnRMb2FkaW5nIiwic2V0Q29udGVudExvYWRpbmciLCJfdXNlU3RhdGUxMCIsImZvcm1Mb2FkaW5nIiwic2V0Rm9ybUxvYWRpbmciLCJmZXRjaERhdGEiLCJfcmVmMiIsIl9jYWxsZWUyIiwiX2NvbnRleHQyIiwic2VjdGlvbiIsImNoZWNrTG9nZ2VkSW4iLCJsb2dvdXQiLCJBcHAiLCJSb3V0ZXIiLCJIZWFkZXIiLCJIb21lIiwiTG9naW4iLCJOZXdQb3N0IiwiUHJvZmlsZSIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9